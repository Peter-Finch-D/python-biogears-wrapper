// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CircuitPathData.hxx"

#include "enumOpenClosed.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CircuitPathData
        // 

        const CircuitPathData::Name_type& CircuitPathData::
        Name () const
        {
          return this->Name_.get ();
        }

        CircuitPathData::Name_type& CircuitPathData::
        Name ()
        {
          return this->Name_.get ();
        }

        void CircuitPathData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void CircuitPathData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const CircuitPathData::SourceNode_type& CircuitPathData::
        SourceNode () const
        {
          return this->SourceNode_.get ();
        }

        CircuitPathData::SourceNode_type& CircuitPathData::
        SourceNode ()
        {
          return this->SourceNode_.get ();
        }

        void CircuitPathData::
        SourceNode (const SourceNode_type& x)
        {
          this->SourceNode_.set (x);
        }

        void CircuitPathData::
        SourceNode (::std::unique_ptr< SourceNode_type > x)
        {
          this->SourceNode_.set (std::move (x));
        }

        const CircuitPathData::TargetNode_type& CircuitPathData::
        TargetNode () const
        {
          return this->TargetNode_.get ();
        }

        CircuitPathData::TargetNode_type& CircuitPathData::
        TargetNode ()
        {
          return this->TargetNode_.get ();
        }

        void CircuitPathData::
        TargetNode (const TargetNode_type& x)
        {
          this->TargetNode_.set (x);
        }

        void CircuitPathData::
        TargetNode (::std::unique_ptr< TargetNode_type > x)
        {
          this->TargetNode_.set (std::move (x));
        }

        const CircuitPathData::Switch_optional& CircuitPathData::
        Switch () const
        {
          return this->Switch_;
        }

        CircuitPathData::Switch_optional& CircuitPathData::
        Switch ()
        {
          return this->Switch_;
        }

        void CircuitPathData::
        Switch (const Switch_type& x)
        {
          this->Switch_.set (x);
        }

        void CircuitPathData::
        Switch (const Switch_optional& x)
        {
          this->Switch_ = x;
        }

        void CircuitPathData::
        Switch (::std::unique_ptr< Switch_type > x)
        {
          this->Switch_.set (std::move (x));
        }

        const CircuitPathData::NextSwitch_optional& CircuitPathData::
        NextSwitch () const
        {
          return this->NextSwitch_;
        }

        CircuitPathData::NextSwitch_optional& CircuitPathData::
        NextSwitch ()
        {
          return this->NextSwitch_;
        }

        void CircuitPathData::
        NextSwitch (const NextSwitch_type& x)
        {
          this->NextSwitch_.set (x);
        }

        void CircuitPathData::
        NextSwitch (const NextSwitch_optional& x)
        {
          this->NextSwitch_ = x;
        }

        void CircuitPathData::
        NextSwitch (::std::unique_ptr< NextSwitch_type > x)
        {
          this->NextSwitch_.set (std::move (x));
        }

        const CircuitPathData::Valve_optional& CircuitPathData::
        Valve () const
        {
          return this->Valve_;
        }

        CircuitPathData::Valve_optional& CircuitPathData::
        Valve ()
        {
          return this->Valve_;
        }

        void CircuitPathData::
        Valve (const Valve_type& x)
        {
          this->Valve_.set (x);
        }

        void CircuitPathData::
        Valve (const Valve_optional& x)
        {
          this->Valve_ = x;
        }

        void CircuitPathData::
        Valve (::std::unique_ptr< Valve_type > x)
        {
          this->Valve_.set (std::move (x));
        }

        const CircuitPathData::NextValve_optional& CircuitPathData::
        NextValve () const
        {
          return this->NextValve_;
        }

        CircuitPathData::NextValve_optional& CircuitPathData::
        NextValve ()
        {
          return this->NextValve_;
        }

        void CircuitPathData::
        NextValve (const NextValve_type& x)
        {
          this->NextValve_.set (x);
        }

        void CircuitPathData::
        NextValve (const NextValve_optional& x)
        {
          this->NextValve_ = x;
        }

        void CircuitPathData::
        NextValve (::std::unique_ptr< NextValve_type > x)
        {
          this->NextValve_.set (std::move (x));
        }

        const CircuitPathData::PolarizedState_optional& CircuitPathData::
        PolarizedState () const
        {
          return this->PolarizedState_;
        }

        CircuitPathData::PolarizedState_optional& CircuitPathData::
        PolarizedState ()
        {
          return this->PolarizedState_;
        }

        void CircuitPathData::
        PolarizedState (const PolarizedState_type& x)
        {
          this->PolarizedState_.set (x);
        }

        void CircuitPathData::
        PolarizedState (const PolarizedState_optional& x)
        {
          this->PolarizedState_ = x;
        }

        void CircuitPathData::
        PolarizedState (::std::unique_ptr< PolarizedState_type > x)
        {
          this->PolarizedState_.set (std::move (x));
        }

        const CircuitPathData::NextPolarizedState_optional& CircuitPathData::
        NextPolarizedState () const
        {
          return this->NextPolarizedState_;
        }

        CircuitPathData::NextPolarizedState_optional& CircuitPathData::
        NextPolarizedState ()
        {
          return this->NextPolarizedState_;
        }

        void CircuitPathData::
        NextPolarizedState (const NextPolarizedState_type& x)
        {
          this->NextPolarizedState_.set (x);
        }

        void CircuitPathData::
        NextPolarizedState (const NextPolarizedState_optional& x)
        {
          this->NextPolarizedState_ = x;
        }

        void CircuitPathData::
        NextPolarizedState (::std::unique_ptr< NextPolarizedState_type > x)
        {
          this->NextPolarizedState_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CircuitPathData
        //

        CircuitPathData::
        CircuitPathData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          SourceNode_ (this),
          TargetNode_ (this),
          Switch_ (this),
          NextSwitch_ (this),
          Valve_ (this),
          NextValve_ (this),
          PolarizedState_ (this),
          NextPolarizedState_ (this)
        {
        }

        CircuitPathData::
        CircuitPathData (const Name_type& Name,
                         const SourceNode_type& SourceNode,
                         const TargetNode_type& TargetNode)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (Name, this),
          SourceNode_ (SourceNode, this),
          TargetNode_ (TargetNode, this),
          Switch_ (this),
          NextSwitch_ (this),
          Valve_ (this),
          NextValve_ (this),
          PolarizedState_ (this),
          NextPolarizedState_ (this)
        {
        }

        CircuitPathData::
        CircuitPathData (::std::unique_ptr< Name_type > Name,
                         ::std::unique_ptr< SourceNode_type > SourceNode,
                         ::std::unique_ptr< TargetNode_type > TargetNode)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (std::move (Name), this),
          SourceNode_ (std::move (SourceNode), this),
          TargetNode_ (std::move (TargetNode), this),
          Switch_ (this),
          NextSwitch_ (this),
          Valve_ (this),
          NextValve_ (this),
          PolarizedState_ (this),
          NextPolarizedState_ (this)
        {
        }

        CircuitPathData::
        CircuitPathData (const CircuitPathData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          SourceNode_ (x.SourceNode_, f, this),
          TargetNode_ (x.TargetNode_, f, this),
          Switch_ (x.Switch_, f, this),
          NextSwitch_ (x.NextSwitch_, f, this),
          Valve_ (x.Valve_, f, this),
          NextValve_ (x.NextValve_, f, this),
          PolarizedState_ (x.PolarizedState_, f, this),
          NextPolarizedState_ (x.NextPolarizedState_, f, this)
        {
        }

        CircuitPathData::
        CircuitPathData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          SourceNode_ (this),
          TargetNode_ (this),
          Switch_ (this),
          NextSwitch_ (this),
          Valve_ (this),
          NextValve_ (this),
          PolarizedState_ (this),
          NextPolarizedState_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CircuitPathData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Name_.present ())
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SourceNode
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SourceNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SourceNode_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SourceNode_.present ())
                {
                  ::std::unique_ptr< SourceNode_type > r (
                    dynamic_cast< SourceNode_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SourceNode_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetNode
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetNode_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TargetNode_.present ())
                {
                  ::std::unique_ptr< TargetNode_type > r (
                    dynamic_cast< TargetNode_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetNode_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Switch
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Switch",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Switch_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Switch_)
                {
                  ::std::unique_ptr< Switch_type > r (
                    dynamic_cast< Switch_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Switch_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextSwitch
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextSwitch",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextSwitch_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextSwitch_)
                {
                  ::std::unique_ptr< NextSwitch_type > r (
                    dynamic_cast< NextSwitch_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextSwitch_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Valve
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Valve",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Valve_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Valve_)
                {
                  ::std::unique_ptr< Valve_type > r (
                    dynamic_cast< Valve_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Valve_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextValve
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextValve",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextValve_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextValve_)
                {
                  ::std::unique_ptr< NextValve_type > r (
                    dynamic_cast< NextValve_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextValve_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PolarizedState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PolarizedState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PolarizedState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PolarizedState_)
                {
                  ::std::unique_ptr< PolarizedState_type > r (
                    dynamic_cast< PolarizedState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PolarizedState_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextPolarizedState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextPolarizedState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextPolarizedState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextPolarizedState_)
                {
                  ::std::unique_ptr< NextPolarizedState_type > r (
                    dynamic_cast< NextPolarizedState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextPolarizedState_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Name",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SourceNode_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SourceNode",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TargetNode_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TargetNode",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        CircuitPathData* CircuitPathData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CircuitPathData (*this, f, c);
        }

        CircuitPathData& CircuitPathData::
        operator= (const CircuitPathData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->SourceNode_ = x.SourceNode_;
            this->TargetNode_ = x.TargetNode_;
            this->Switch_ = x.Switch_;
            this->NextSwitch_ = x.NextSwitch_;
            this->Valve_ = x.Valve_;
            this->NextValve_ = x.NextValve_;
            this->PolarizedState_ = x.PolarizedState_;
            this->NextPolarizedState_ = x.NextPolarizedState_;
          }

          return *this;
        }

        CircuitPathData::
        ~CircuitPathData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CircuitPathData >
        _xsd_CircuitPathData_type_factory_init (
          "CircuitPathData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CircuitPathData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Name: ";
            om.insert (o, i.Name ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SourceNode: ";
            om.insert (o, i.SourceNode ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TargetNode: ";
            om.insert (o, i.TargetNode ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Switch ())
            {
              o << ::std::endl << "Switch: ";
              om.insert (o, *i.Switch ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextSwitch ())
            {
              o << ::std::endl << "NextSwitch: ";
              om.insert (o, *i.NextSwitch ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Valve ())
            {
              o << ::std::endl << "Valve: ";
              om.insert (o, *i.Valve ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextValve ())
            {
              o << ::std::endl << "NextValve: ";
              om.insert (o, *i.NextValve ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PolarizedState ())
            {
              o << ::std::endl << "PolarizedState: ";
              om.insert (o, *i.PolarizedState ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextPolarizedState ())
            {
              o << ::std::endl << "NextPolarizedState: ";
              om.insert (o, *i.NextPolarizedState ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CircuitPathData >
        _xsd_CircuitPathData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CircuitPathData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CircuitPathData::Name_type& x (i.Name ());
            if (typeid (CircuitPathData::Name_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Name",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SourceNode
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CircuitPathData::SourceNode_type& x (i.SourceNode ());
            if (typeid (CircuitPathData::SourceNode_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SourceNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SourceNode",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TargetNode
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const CircuitPathData::TargetNode_type& x (i.TargetNode ());
            if (typeid (CircuitPathData::TargetNode_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TargetNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TargetNode",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Switch
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Switch ())
            {
              const CircuitPathData::Switch_type& x (*i.Switch ());
              if (typeid (CircuitPathData::Switch_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Switch",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Switch",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextSwitch
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextSwitch ())
            {
              const CircuitPathData::NextSwitch_type& x (*i.NextSwitch ());
              if (typeid (CircuitPathData::NextSwitch_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextSwitch",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextSwitch",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Valve
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Valve ())
            {
              const CircuitPathData::Valve_type& x (*i.Valve ());
              if (typeid (CircuitPathData::Valve_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Valve",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Valve",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextValve
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextValve ())
            {
              const CircuitPathData::NextValve_type& x (*i.NextValve ());
              if (typeid (CircuitPathData::NextValve_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextValve",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextValve",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PolarizedState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PolarizedState ())
            {
              const CircuitPathData::PolarizedState_type& x (*i.PolarizedState ());
              if (typeid (CircuitPathData::PolarizedState_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PolarizedState",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PolarizedState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextPolarizedState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextPolarizedState ())
            {
              const CircuitPathData::NextPolarizedState_type& x (*i.NextPolarizedState ());
              if (typeid (CircuitPathData::NextPolarizedState_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextPolarizedState",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextPolarizedState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CircuitPathData >
        _xsd_CircuitPathData_type_serializer_init (
          "CircuitPathData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


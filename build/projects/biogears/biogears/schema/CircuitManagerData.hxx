// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from CircuitManagerData.xsd.
 */

#ifndef CIRCUIT_MANAGER_DATA_HXX
#define CIRCUIT_MANAGER_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class CircuitManagerData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ObjectData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ElectricalCircuitNodeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ElectricalCircuitPathData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ElectricalCircuitData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class FluidCircuitNodeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class FluidCircuitPathData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class FluidCircuitData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ThermalCircuitNodeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ThermalCircuitPathData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ThermalCircuitData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %CircuitManagerData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API CircuitManagerData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name ElectricalNode
           *
           * @brief Accessor and modifier functions for the %ElectricalNode
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ElectricalCircuitNodeData ElectricalNode_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ElectricalNode_type > ElectricalNode_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ElectricalNode_sequence::iterator ElectricalNode_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ElectricalNode_sequence::const_iterator ElectricalNode_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricalNode_type, char > ElectricalNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ElectricalNode_sequence&
          ElectricalNode () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ElectricalNode_sequence&
          ElectricalNode ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ElectricalNode (const ElectricalNode_sequence& s);

          //@}

          /**
           * @name ElectricalPath
           *
           * @brief Accessor and modifier functions for the %ElectricalPath
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ElectricalCircuitPathData ElectricalPath_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ElectricalPath_type > ElectricalPath_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ElectricalPath_sequence::iterator ElectricalPath_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ElectricalPath_sequence::const_iterator ElectricalPath_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricalPath_type, char > ElectricalPath_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ElectricalPath_sequence&
          ElectricalPath () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ElectricalPath_sequence&
          ElectricalPath ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ElectricalPath (const ElectricalPath_sequence& s);

          //@}

          /**
           * @name ElectricalCircuit
           *
           * @brief Accessor and modifier functions for the %ElectricalCircuit
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ElectricalCircuitData ElectricalCircuit_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ElectricalCircuit_type > ElectricalCircuit_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ElectricalCircuit_sequence::iterator ElectricalCircuit_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ElectricalCircuit_sequence::const_iterator ElectricalCircuit_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectricalCircuit_type, char > ElectricalCircuit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ElectricalCircuit_sequence&
          ElectricalCircuit () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ElectricalCircuit_sequence&
          ElectricalCircuit ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ElectricalCircuit (const ElectricalCircuit_sequence& s);

          //@}

          /**
           * @name FluidNode
           *
           * @brief Accessor and modifier functions for the %FluidNode
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::FluidCircuitNodeData FluidNode_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< FluidNode_type > FluidNode_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef FluidNode_sequence::iterator FluidNode_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef FluidNode_sequence::const_iterator FluidNode_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FluidNode_type, char > FluidNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const FluidNode_sequence&
          FluidNode () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          FluidNode_sequence&
          FluidNode ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          FluidNode (const FluidNode_sequence& s);

          //@}

          /**
           * @name FluidPath
           *
           * @brief Accessor and modifier functions for the %FluidPath
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::FluidCircuitPathData FluidPath_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< FluidPath_type > FluidPath_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef FluidPath_sequence::iterator FluidPath_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef FluidPath_sequence::const_iterator FluidPath_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FluidPath_type, char > FluidPath_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const FluidPath_sequence&
          FluidPath () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          FluidPath_sequence&
          FluidPath ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          FluidPath (const FluidPath_sequence& s);

          //@}

          /**
           * @name FluidCircuit
           *
           * @brief Accessor and modifier functions for the %FluidCircuit
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::FluidCircuitData FluidCircuit_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< FluidCircuit_type > FluidCircuit_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef FluidCircuit_sequence::iterator FluidCircuit_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef FluidCircuit_sequence::const_iterator FluidCircuit_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FluidCircuit_type, char > FluidCircuit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const FluidCircuit_sequence&
          FluidCircuit () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          FluidCircuit_sequence&
          FluidCircuit ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          FluidCircuit (const FluidCircuit_sequence& s);

          //@}

          /**
           * @name ThermalNode
           *
           * @brief Accessor and modifier functions for the %ThermalNode
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ThermalCircuitNodeData ThermalNode_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ThermalNode_type > ThermalNode_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ThermalNode_sequence::iterator ThermalNode_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ThermalNode_sequence::const_iterator ThermalNode_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ThermalNode_type, char > ThermalNode_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ThermalNode_sequence&
          ThermalNode () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ThermalNode_sequence&
          ThermalNode ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ThermalNode (const ThermalNode_sequence& s);

          //@}

          /**
           * @name ThermalPath
           *
           * @brief Accessor and modifier functions for the %ThermalPath
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ThermalCircuitPathData ThermalPath_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ThermalPath_type > ThermalPath_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ThermalPath_sequence::iterator ThermalPath_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ThermalPath_sequence::const_iterator ThermalPath_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ThermalPath_type, char > ThermalPath_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ThermalPath_sequence&
          ThermalPath () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ThermalPath_sequence&
          ThermalPath ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ThermalPath (const ThermalPath_sequence& s);

          //@}

          /**
           * @name ThermalCircuit
           *
           * @brief Accessor and modifier functions for the %ThermalCircuit
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ThermalCircuitData ThermalCircuit_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ThermalCircuit_type > ThermalCircuit_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef ThermalCircuit_sequence::iterator ThermalCircuit_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ThermalCircuit_sequence::const_iterator ThermalCircuit_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ThermalCircuit_type, char > ThermalCircuit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ThermalCircuit_sequence&
          ThermalCircuit () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ThermalCircuit_sequence&
          ThermalCircuit ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          ThermalCircuit (const ThermalCircuit_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CircuitManagerData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CircuitManagerData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitManagerData (const CircuitManagerData& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CircuitManagerData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CircuitManagerData&
          operator= (const CircuitManagerData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~CircuitManagerData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ElectricalNode_sequence ElectricalNode_;
          ElectricalPath_sequence ElectricalPath_;
          ElectricalCircuit_sequence ElectricalCircuit_;
          FluidNode_sequence FluidNode_;
          FluidPath_sequence FluidPath_;
          FluidCircuit_sequence FluidCircuit_;
          ThermalNode_sequence ThermalNode_;
          ThermalPath_sequence ThermalPath_;
          ThermalCircuit_sequence ThermalCircuit_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const CircuitManagerData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const CircuitManagerData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CIRCUIT_MANAGER_DATA_HXX

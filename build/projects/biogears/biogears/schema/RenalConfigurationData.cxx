// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RenalConfigurationData.hxx"

#include "enumOnOff.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarAreaData.hxx"

#include "ScalarData.hxx"

#include "ScalarFlowResistanceData.hxx"

#include "ScalarMassPerTimeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RenalConfigurationData
        // 

        const RenalConfigurationData::EnableRenal_optional& RenalConfigurationData::
        EnableRenal () const
        {
          return this->EnableRenal_;
        }

        RenalConfigurationData::EnableRenal_optional& RenalConfigurationData::
        EnableRenal ()
        {
          return this->EnableRenal_;
        }

        void RenalConfigurationData::
        EnableRenal (const EnableRenal_type& x)
        {
          this->EnableRenal_.set (x);
        }

        void RenalConfigurationData::
        EnableRenal (const EnableRenal_optional& x)
        {
          this->EnableRenal_ = x;
        }

        void RenalConfigurationData::
        EnableRenal (::std::unique_ptr< EnableRenal_type > x)
        {
          this->EnableRenal_.set (std::move (x));
        }

        const RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_optional& RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint () const
        {
          return this->PlasmaSodiumConcentrationSetPoint_;
        }

        RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_optional& RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint ()
        {
          return this->PlasmaSodiumConcentrationSetPoint_;
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_type& x)
        {
          this->PlasmaSodiumConcentrationSetPoint_.set (x);
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (const PlasmaSodiumConcentrationSetPoint_optional& x)
        {
          this->PlasmaSodiumConcentrationSetPoint_ = x;
        }

        void RenalConfigurationData::
        PlasmaSodiumConcentrationSetPoint (::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > x)
        {
          this->PlasmaSodiumConcentrationSetPoint_.set (std::move (x));
        }

        const RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline () const
        {
          return this->LeftGlomerularFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline ()
        {
          return this->LeftGlomerularFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_type& x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (const LeftGlomerularFilteringSurfaceAreaBaseline_optional& x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > x)
        {
          this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline () const
        {
          return this->LeftGlomerularFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline ()
        {
          return this->LeftGlomerularFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_type& x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (const LeftGlomerularFluidPermeabilityBaseline_optional& x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftGlomerularFluidPermeabilityBaseline (::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > x)
        {
          this->LeftGlomerularFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline () const
        {
          return this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline ()
        {
          return this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (const LeftTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > x)
        {
          this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline () const
        {
          return this->LeftTubularReabsorptionFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline ()
        {
          return this->LeftTubularReabsorptionFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_type& x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (const LeftTubularReabsorptionFluidPermeabilityBaseline_optional& x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        LeftTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > x)
        {
          this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::MaximumAfferentResistance_optional& RenalConfigurationData::
        MaximumAfferentResistance () const
        {
          return this->MaximumAfferentResistance_;
        }

        RenalConfigurationData::MaximumAfferentResistance_optional& RenalConfigurationData::
        MaximumAfferentResistance ()
        {
          return this->MaximumAfferentResistance_;
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (const MaximumAfferentResistance_type& x)
        {
          this->MaximumAfferentResistance_.set (x);
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (const MaximumAfferentResistance_optional& x)
        {
          this->MaximumAfferentResistance_ = x;
        }

        void RenalConfigurationData::
        MaximumAfferentResistance (::std::unique_ptr< MaximumAfferentResistance_type > x)
        {
          this->MaximumAfferentResistance_.set (std::move (x));
        }

        const RenalConfigurationData::MinimumAfferentResistance_optional& RenalConfigurationData::
        MinimumAfferentResistance () const
        {
          return this->MinimumAfferentResistance_;
        }

        RenalConfigurationData::MinimumAfferentResistance_optional& RenalConfigurationData::
        MinimumAfferentResistance ()
        {
          return this->MinimumAfferentResistance_;
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (const MinimumAfferentResistance_type& x)
        {
          this->MinimumAfferentResistance_.set (x);
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (const MinimumAfferentResistance_optional& x)
        {
          this->MinimumAfferentResistance_ = x;
        }

        void RenalConfigurationData::
        MinimumAfferentResistance (::std::unique_ptr< MinimumAfferentResistance_type > x)
        {
          this->MinimumAfferentResistance_.set (std::move (x));
        }

        const RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline () const
        {
          return this->RightGlomerularFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline ()
        {
          return this->RightGlomerularFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_type& x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (const RightGlomerularFilteringSurfaceAreaBaseline_optional& x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        RightGlomerularFilteringSurfaceAreaBaseline (::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > x)
        {
          this->RightGlomerularFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline () const
        {
          return this->RightGlomerularFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline ()
        {
          return this->RightGlomerularFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_type& x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (const RightGlomerularFluidPermeabilityBaseline_optional& x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        RightGlomerularFluidPermeabilityBaseline (::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > x)
        {
          this->RightGlomerularFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline () const
        {
          return this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline ()
        {
          return this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (const RightTubularReabsorptionFilteringSurfaceAreaBaseline_optional& x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_ = x;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFilteringSurfaceAreaBaseline (::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > x)
        {
          this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline () const
        {
          return this->RightTubularReabsorptionFluidPermeabilityBaseline_;
        }

        RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_optional& RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline ()
        {
          return this->RightTubularReabsorptionFluidPermeabilityBaseline_;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_type& x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (x);
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (const RightTubularReabsorptionFluidPermeabilityBaseline_optional& x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_ = x;
        }

        void RenalConfigurationData::
        RightTubularReabsorptionFluidPermeabilityBaseline (::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > x)
        {
          this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (std::move (x));
        }

        const RenalConfigurationData::TargetSodiumDelivery_optional& RenalConfigurationData::
        TargetSodiumDelivery () const
        {
          return this->TargetSodiumDelivery_;
        }

        RenalConfigurationData::TargetSodiumDelivery_optional& RenalConfigurationData::
        TargetSodiumDelivery ()
        {
          return this->TargetSodiumDelivery_;
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (const TargetSodiumDelivery_type& x)
        {
          this->TargetSodiumDelivery_.set (x);
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (const TargetSodiumDelivery_optional& x)
        {
          this->TargetSodiumDelivery_ = x;
        }

        void RenalConfigurationData::
        TargetSodiumDelivery (::std::unique_ptr< TargetSodiumDelivery_type > x)
        {
          this->TargetSodiumDelivery_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RenalConfigurationData
        //

        RenalConfigurationData::
        RenalConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          EnableRenal_ (this),
          PlasmaSodiumConcentrationSetPoint_ (this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (this),
          LeftGlomerularFluidPermeabilityBaseline_ (this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (this),
          MaximumAfferentResistance_ (this),
          MinimumAfferentResistance_ (this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (this),
          RightGlomerularFluidPermeabilityBaseline_ (this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (this),
          TargetSodiumDelivery_ (this)
        {
        }

        RenalConfigurationData::
        RenalConfigurationData (const RenalConfigurationData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          EnableRenal_ (x.EnableRenal_, f, this),
          PlasmaSodiumConcentrationSetPoint_ (x.PlasmaSodiumConcentrationSetPoint_, f, this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (x.LeftGlomerularFilteringSurfaceAreaBaseline_, f, this),
          LeftGlomerularFluidPermeabilityBaseline_ (x.LeftGlomerularFluidPermeabilityBaseline_, f, this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (x.LeftTubularReabsorptionFilteringSurfaceAreaBaseline_, f, this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (x.LeftTubularReabsorptionFluidPermeabilityBaseline_, f, this),
          MaximumAfferentResistance_ (x.MaximumAfferentResistance_, f, this),
          MinimumAfferentResistance_ (x.MinimumAfferentResistance_, f, this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (x.RightGlomerularFilteringSurfaceAreaBaseline_, f, this),
          RightGlomerularFluidPermeabilityBaseline_ (x.RightGlomerularFluidPermeabilityBaseline_, f, this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (x.RightTubularReabsorptionFilteringSurfaceAreaBaseline_, f, this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (x.RightTubularReabsorptionFluidPermeabilityBaseline_, f, this),
          TargetSodiumDelivery_ (x.TargetSodiumDelivery_, f, this)
        {
        }

        RenalConfigurationData::
        RenalConfigurationData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          EnableRenal_ (this),
          PlasmaSodiumConcentrationSetPoint_ (this),
          LeftGlomerularFilteringSurfaceAreaBaseline_ (this),
          LeftGlomerularFluidPermeabilityBaseline_ (this),
          LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          LeftTubularReabsorptionFluidPermeabilityBaseline_ (this),
          MaximumAfferentResistance_ (this),
          MinimumAfferentResistance_ (this),
          RightGlomerularFilteringSurfaceAreaBaseline_ (this),
          RightGlomerularFluidPermeabilityBaseline_ (this),
          RightTubularReabsorptionFilteringSurfaceAreaBaseline_ (this),
          RightTubularReabsorptionFluidPermeabilityBaseline_ (this),
          TargetSodiumDelivery_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RenalConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EnableRenal
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnableRenal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnableRenal_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnableRenal_)
                {
                  ::std::unique_ptr< EnableRenal_type > r (
                    dynamic_cast< EnableRenal_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnableRenal_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlasmaSodiumConcentrationSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlasmaSodiumConcentrationSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlasmaSodiumConcentrationSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlasmaSodiumConcentrationSetPoint_)
                {
                  ::std::unique_ptr< PlasmaSodiumConcentrationSetPoint_type > r (
                    dynamic_cast< PlasmaSodiumConcentrationSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlasmaSodiumConcentrationSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< LeftGlomerularFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< LeftGlomerularFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftGlomerularFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftGlomerularFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftGlomerularFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< LeftGlomerularFluidPermeabilityBaseline_type > r (
                    dynamic_cast< LeftGlomerularFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftGlomerularFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftTubularReabsorptionFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftTubularReabsorptionFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftTubularReabsorptionFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< LeftTubularReabsorptionFluidPermeabilityBaseline_type > r (
                    dynamic_cast< LeftTubularReabsorptionFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftTubularReabsorptionFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MaximumAfferentResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MaximumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MaximumAfferentResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MaximumAfferentResistance_)
                {
                  ::std::unique_ptr< MaximumAfferentResistance_type > r (
                    dynamic_cast< MaximumAfferentResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MaximumAfferentResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MinimumAfferentResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumAfferentResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MinimumAfferentResistance_)
                {
                  ::std::unique_ptr< MinimumAfferentResistance_type > r (
                    dynamic_cast< MinimumAfferentResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumAfferentResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< RightGlomerularFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< RightGlomerularFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightGlomerularFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightGlomerularFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightGlomerularFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< RightGlomerularFluidPermeabilityBaseline_type > r (
                    dynamic_cast< RightGlomerularFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightGlomerularFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFilteringSurfaceAreaBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type > r (
                    dynamic_cast< RightTubularReabsorptionFilteringSurfaceAreaBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightTubularReabsorptionFluidPermeabilityBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightTubularReabsorptionFluidPermeabilityBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightTubularReabsorptionFluidPermeabilityBaseline_)
                {
                  ::std::unique_ptr< RightTubularReabsorptionFluidPermeabilityBaseline_type > r (
                    dynamic_cast< RightTubularReabsorptionFluidPermeabilityBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightTubularReabsorptionFluidPermeabilityBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TargetSodiumDelivery
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TargetSodiumDelivery",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TargetSodiumDelivery_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TargetSodiumDelivery_)
                {
                  ::std::unique_ptr< TargetSodiumDelivery_type > r (
                    dynamic_cast< TargetSodiumDelivery_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TargetSodiumDelivery_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RenalConfigurationData* RenalConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RenalConfigurationData (*this, f, c);
        }

        RenalConfigurationData& RenalConfigurationData::
        operator= (const RenalConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->EnableRenal_ = x.EnableRenal_;
            this->PlasmaSodiumConcentrationSetPoint_ = x.PlasmaSodiumConcentrationSetPoint_;
            this->LeftGlomerularFilteringSurfaceAreaBaseline_ = x.LeftGlomerularFilteringSurfaceAreaBaseline_;
            this->LeftGlomerularFluidPermeabilityBaseline_ = x.LeftGlomerularFluidPermeabilityBaseline_;
            this->LeftTubularReabsorptionFilteringSurfaceAreaBaseline_ = x.LeftTubularReabsorptionFilteringSurfaceAreaBaseline_;
            this->LeftTubularReabsorptionFluidPermeabilityBaseline_ = x.LeftTubularReabsorptionFluidPermeabilityBaseline_;
            this->MaximumAfferentResistance_ = x.MaximumAfferentResistance_;
            this->MinimumAfferentResistance_ = x.MinimumAfferentResistance_;
            this->RightGlomerularFilteringSurfaceAreaBaseline_ = x.RightGlomerularFilteringSurfaceAreaBaseline_;
            this->RightGlomerularFluidPermeabilityBaseline_ = x.RightGlomerularFluidPermeabilityBaseline_;
            this->RightTubularReabsorptionFilteringSurfaceAreaBaseline_ = x.RightTubularReabsorptionFilteringSurfaceAreaBaseline_;
            this->RightTubularReabsorptionFluidPermeabilityBaseline_ = x.RightTubularReabsorptionFluidPermeabilityBaseline_;
            this->TargetSodiumDelivery_ = x.TargetSodiumDelivery_;
          }

          return *this;
        }

        RenalConfigurationData::
        ~RenalConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_type_factory_init (
          "RenalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const RenalConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnableRenal ())
            {
              o << ::std::endl << "EnableRenal: ";
              om.insert (o, *i.EnableRenal ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlasmaSodiumConcentrationSetPoint ())
            {
              o << ::std::endl << "PlasmaSodiumConcentrationSetPoint: ";
              om.insert (o, *i.PlasmaSodiumConcentrationSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "LeftGlomerularFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.LeftGlomerularFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "LeftGlomerularFluidPermeabilityBaseline: ";
              om.insert (o, *i.LeftGlomerularFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "LeftTubularReabsorptionFluidPermeabilityBaseline: ";
              om.insert (o, *i.LeftTubularReabsorptionFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MaximumAfferentResistance ())
            {
              o << ::std::endl << "MaximumAfferentResistance: ";
              om.insert (o, *i.MaximumAfferentResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MinimumAfferentResistance ())
            {
              o << ::std::endl << "MinimumAfferentResistance: ";
              om.insert (o, *i.MinimumAfferentResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "RightGlomerularFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.RightGlomerularFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "RightGlomerularFluidPermeabilityBaseline: ";
              om.insert (o, *i.RightGlomerularFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              o << ::std::endl << "RightTubularReabsorptionFilteringSurfaceAreaBaseline: ";
              om.insert (o, *i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeabilityBaseline ())
            {
              o << ::std::endl << "RightTubularReabsorptionFluidPermeabilityBaseline: ";
              om.insert (o, *i.RightTubularReabsorptionFluidPermeabilityBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TargetSodiumDelivery ())
            {
              o << ::std::endl << "TargetSodiumDelivery: ";
              om.insert (o, *i.TargetSodiumDelivery ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const RenalConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // EnableRenal
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnableRenal ())
            {
              const RenalConfigurationData::EnableRenal_type& x (*i.EnableRenal ());
              if (typeid (RenalConfigurationData::EnableRenal_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnableRenal",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnableRenal",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlasmaSodiumConcentrationSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlasmaSodiumConcentrationSetPoint ())
            {
              const RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_type& x (*i.PlasmaSodiumConcentrationSetPoint ());
              if (typeid (RenalConfigurationData::PlasmaSodiumConcentrationSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlasmaSodiumConcentrationSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlasmaSodiumConcentrationSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_type& x (*i.LeftGlomerularFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::LeftGlomerularFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftGlomerularFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftGlomerularFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_type& x (*i.LeftGlomerularFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::LeftGlomerularFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftGlomerularFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type& x (*i.LeftTubularReabsorptionFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::LeftTubularReabsorptionFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftTubularReabsorptionFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftTubularReabsorptionFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_type& x (*i.LeftTubularReabsorptionFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::LeftTubularReabsorptionFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftTubularReabsorptionFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MaximumAfferentResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MaximumAfferentResistance ())
            {
              const RenalConfigurationData::MaximumAfferentResistance_type& x (*i.MaximumAfferentResistance ());
              if (typeid (RenalConfigurationData::MaximumAfferentResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MaximumAfferentResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MaximumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MinimumAfferentResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MinimumAfferentResistance ())
            {
              const RenalConfigurationData::MinimumAfferentResistance_type& x (*i.MinimumAfferentResistance ());
              if (typeid (RenalConfigurationData::MinimumAfferentResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MinimumAfferentResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MinimumAfferentResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_type& x (*i.RightGlomerularFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::RightGlomerularFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightGlomerularFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightGlomerularFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_type& x (*i.RightGlomerularFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::RightGlomerularFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightGlomerularFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightGlomerularFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFilteringSurfaceAreaBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ())
            {
              const RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_type& x (*i.RightTubularReabsorptionFilteringSurfaceAreaBaseline ());
              if (typeid (RenalConfigurationData::RightTubularReabsorptionFilteringSurfaceAreaBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFilteringSurfaceAreaBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightTubularReabsorptionFluidPermeabilityBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightTubularReabsorptionFluidPermeabilityBaseline ())
            {
              const RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_type& x (*i.RightTubularReabsorptionFluidPermeabilityBaseline ());
              if (typeid (RenalConfigurationData::RightTubularReabsorptionFluidPermeabilityBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightTubularReabsorptionFluidPermeabilityBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightTubularReabsorptionFluidPermeabilityBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TargetSodiumDelivery
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TargetSodiumDelivery ())
            {
              const RenalConfigurationData::TargetSodiumDelivery_type& x (*i.TargetSodiumDelivery ());
              if (typeid (RenalConfigurationData::TargetSodiumDelivery_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TargetSodiumDelivery",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TargetSodiumDelivery",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RenalConfigurationData >
        _xsd_RenalConfigurationData_type_serializer_init (
          "RenalConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


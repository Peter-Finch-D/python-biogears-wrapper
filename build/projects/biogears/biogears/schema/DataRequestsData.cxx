// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DataRequestsData.hxx"

#include "DecimalFormatData.hxx"

#include "DataRequestData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // DataRequestsData
        // 

        const DataRequestsData::DefaultDecimalFormatting_optional& DataRequestsData::
        DefaultDecimalFormatting () const
        {
          return this->DefaultDecimalFormatting_;
        }

        DataRequestsData::DefaultDecimalFormatting_optional& DataRequestsData::
        DefaultDecimalFormatting ()
        {
          return this->DefaultDecimalFormatting_;
        }

        void DataRequestsData::
        DefaultDecimalFormatting (const DefaultDecimalFormatting_type& x)
        {
          this->DefaultDecimalFormatting_.set (x);
        }

        void DataRequestsData::
        DefaultDecimalFormatting (const DefaultDecimalFormatting_optional& x)
        {
          this->DefaultDecimalFormatting_ = x;
        }

        void DataRequestsData::
        DefaultDecimalFormatting (::std::unique_ptr< DefaultDecimalFormatting_type > x)
        {
          this->DefaultDecimalFormatting_.set (std::move (x));
        }

        const DataRequestsData::OverrideDecimalFormatting_optional& DataRequestsData::
        OverrideDecimalFormatting () const
        {
          return this->OverrideDecimalFormatting_;
        }

        DataRequestsData::OverrideDecimalFormatting_optional& DataRequestsData::
        OverrideDecimalFormatting ()
        {
          return this->OverrideDecimalFormatting_;
        }

        void DataRequestsData::
        OverrideDecimalFormatting (const OverrideDecimalFormatting_type& x)
        {
          this->OverrideDecimalFormatting_.set (x);
        }

        void DataRequestsData::
        OverrideDecimalFormatting (const OverrideDecimalFormatting_optional& x)
        {
          this->OverrideDecimalFormatting_ = x;
        }

        void DataRequestsData::
        OverrideDecimalFormatting (::std::unique_ptr< OverrideDecimalFormatting_type > x)
        {
          this->OverrideDecimalFormatting_.set (std::move (x));
        }

        const DataRequestsData::DataRequest_sequence& DataRequestsData::
        DataRequest () const
        {
          return this->DataRequest_;
        }

        DataRequestsData::DataRequest_sequence& DataRequestsData::
        DataRequest ()
        {
          return this->DataRequest_;
        }

        void DataRequestsData::
        DataRequest (const DataRequest_sequence& s)
        {
          this->DataRequest_ = s;
        }

        const DataRequestsData::Filename_optional& DataRequestsData::
        Filename () const
        {
          return this->Filename_;
        }

        DataRequestsData::Filename_optional& DataRequestsData::
        Filename ()
        {
          return this->Filename_;
        }

        void DataRequestsData::
        Filename (const Filename_type& x)
        {
          this->Filename_.set (x);
        }

        void DataRequestsData::
        Filename (const Filename_optional& x)
        {
          this->Filename_ = x;
        }

        void DataRequestsData::
        Filename (::std::unique_ptr< Filename_type > x)
        {
          this->Filename_.set (std::move (x));
        }

        const DataRequestsData::SamplesPerSecond_optional& DataRequestsData::
        SamplesPerSecond () const
        {
          return this->SamplesPerSecond_;
        }

        DataRequestsData::SamplesPerSecond_optional& DataRequestsData::
        SamplesPerSecond ()
        {
          return this->SamplesPerSecond_;
        }

        void DataRequestsData::
        SamplesPerSecond (const SamplesPerSecond_type& x)
        {
          this->SamplesPerSecond_.set (x);
        }

        void DataRequestsData::
        SamplesPerSecond (const SamplesPerSecond_optional& x)
        {
          this->SamplesPerSecond_ = x;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // DataRequestsData
        //

        DataRequestsData::
        DataRequestsData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          DefaultDecimalFormatting_ (this),
          OverrideDecimalFormatting_ (this),
          DataRequest_ (this),
          Filename_ (this),
          SamplesPerSecond_ (this)
        {
        }

        DataRequestsData::
        DataRequestsData (const DataRequestsData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          DefaultDecimalFormatting_ (x.DefaultDecimalFormatting_, f, this),
          OverrideDecimalFormatting_ (x.OverrideDecimalFormatting_, f, this),
          DataRequest_ (x.DataRequest_, f, this),
          Filename_ (x.Filename_, f, this),
          SamplesPerSecond_ (x.SamplesPerSecond_, f, this)
        {
        }

        DataRequestsData::
        DataRequestsData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          DefaultDecimalFormatting_ (this),
          OverrideDecimalFormatting_ (this),
          DataRequest_ (this),
          Filename_ (this),
          SamplesPerSecond_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DataRequestsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // DefaultDecimalFormatting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DefaultDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DefaultDecimalFormatting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DefaultDecimalFormatting_)
                {
                  ::std::unique_ptr< DefaultDecimalFormatting_type > r (
                    dynamic_cast< DefaultDecimalFormatting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DefaultDecimalFormatting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OverrideDecimalFormatting
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OverrideDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OverrideDecimalFormatting_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OverrideDecimalFormatting_)
                {
                  ::std::unique_ptr< OverrideDecimalFormatting_type > r (
                    dynamic_cast< OverrideDecimalFormatting_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OverrideDecimalFormatting_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DataRequest
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DataRequest",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DataRequest_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< DataRequest_type > r (
                  dynamic_cast< DataRequest_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->DataRequest_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Filename" && n.namespace_ ().empty ())
            {
              this->Filename_.set (Filename_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "SamplesPerSecond" && n.namespace_ ().empty ())
            {
              this->SamplesPerSecond_.set (SamplesPerSecond_traits::create (i, f, this));
              continue;
            }
          }
        }

        DataRequestsData* DataRequestsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DataRequestsData (*this, f, c);
        }

        DataRequestsData& DataRequestsData::
        operator= (const DataRequestsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->DefaultDecimalFormatting_ = x.DefaultDecimalFormatting_;
            this->OverrideDecimalFormatting_ = x.OverrideDecimalFormatting_;
            this->DataRequest_ = x.DataRequest_;
            this->Filename_ = x.Filename_;
            this->SamplesPerSecond_ = x.SamplesPerSecond_;
          }

          return *this;
        }

        DataRequestsData::
        ~DataRequestsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_type_factory_init (
          "DataRequestsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const DataRequestsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DefaultDecimalFormatting ())
            {
              o << ::std::endl << "DefaultDecimalFormatting: ";
              om.insert (o, *i.DefaultDecimalFormatting ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OverrideDecimalFormatting ())
            {
              o << ::std::endl << "OverrideDecimalFormatting: ";
              om.insert (o, *i.OverrideDecimalFormatting ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (DataRequestsData::DataRequest_const_iterator
                 b (i.DataRequest ().begin ()), e (i.DataRequest ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "DataRequest: ";
              om.insert (o, *b);
            }
          }

          if (i.Filename ())
          {
            o << ::std::endl << "Filename: " << *i.Filename ();
          }

          if (i.SamplesPerSecond ())
          {
            o << ::std::endl << "SamplesPerSecond: " << *i.SamplesPerSecond ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const DataRequestsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // DefaultDecimalFormatting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DefaultDecimalFormatting ())
            {
              const DataRequestsData::DefaultDecimalFormatting_type& x (*i.DefaultDecimalFormatting ());
              if (typeid (DataRequestsData::DefaultDecimalFormatting_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DefaultDecimalFormatting",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DefaultDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OverrideDecimalFormatting
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OverrideDecimalFormatting ())
            {
              const DataRequestsData::OverrideDecimalFormatting_type& x (*i.OverrideDecimalFormatting ());
              if (typeid (DataRequestsData::OverrideDecimalFormatting_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OverrideDecimalFormatting",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OverrideDecimalFormatting",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DataRequest
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (DataRequestsData::DataRequest_const_iterator
                 b (i.DataRequest ().begin ()), n (i.DataRequest ().end ());
                 b != n; ++b)
            {
              if (typeid (DataRequestsData::DataRequest_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DataRequest",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "DataRequest",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Filename
          //
          if (i.Filename ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Filename",
                e));

            a << *i.Filename ();
          }

          // SamplesPerSecond
          //
          if (i.SamplesPerSecond ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "SamplesPerSecond",
                e));

            a << ::xml_schema::as_double(*i.SamplesPerSecond ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DataRequestsData >
        _xsd_DataRequestsData_type_serializer_init (
          "DataRequestsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


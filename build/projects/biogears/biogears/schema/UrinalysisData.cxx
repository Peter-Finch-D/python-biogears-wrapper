// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "UrinalysisData.hxx"

#include "enumUrineColor.hxx"

#include "enumClarityIndicator.hxx"

#include "enumPresenceIndicator.hxx"

#include "ScalarData.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "UrinalysisMicroscopicData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // UrinalysisData
        // 

        const UrinalysisData::Color_optional& UrinalysisData::
        Color () const
        {
          return this->Color_;
        }

        UrinalysisData::Color_optional& UrinalysisData::
        Color ()
        {
          return this->Color_;
        }

        void UrinalysisData::
        Color (const Color_type& x)
        {
          this->Color_.set (x);
        }

        void UrinalysisData::
        Color (const Color_optional& x)
        {
          this->Color_ = x;
        }

        void UrinalysisData::
        Color (::std::unique_ptr< Color_type > x)
        {
          this->Color_.set (std::move (x));
        }

        const UrinalysisData::Appearance_optional& UrinalysisData::
        Appearance () const
        {
          return this->Appearance_;
        }

        UrinalysisData::Appearance_optional& UrinalysisData::
        Appearance ()
        {
          return this->Appearance_;
        }

        void UrinalysisData::
        Appearance (const Appearance_type& x)
        {
          this->Appearance_.set (x);
        }

        void UrinalysisData::
        Appearance (const Appearance_optional& x)
        {
          this->Appearance_ = x;
        }

        void UrinalysisData::
        Appearance (::std::unique_ptr< Appearance_type > x)
        {
          this->Appearance_.set (std::move (x));
        }

        const UrinalysisData::Glucose_optional& UrinalysisData::
        Glucose () const
        {
          return this->Glucose_;
        }

        UrinalysisData::Glucose_optional& UrinalysisData::
        Glucose ()
        {
          return this->Glucose_;
        }

        void UrinalysisData::
        Glucose (const Glucose_type& x)
        {
          this->Glucose_.set (x);
        }

        void UrinalysisData::
        Glucose (const Glucose_optional& x)
        {
          this->Glucose_ = x;
        }

        void UrinalysisData::
        Glucose (::std::unique_ptr< Glucose_type > x)
        {
          this->Glucose_.set (std::move (x));
        }

        const UrinalysisData::Ketone_optional& UrinalysisData::
        Ketone () const
        {
          return this->Ketone_;
        }

        UrinalysisData::Ketone_optional& UrinalysisData::
        Ketone ()
        {
          return this->Ketone_;
        }

        void UrinalysisData::
        Ketone (const Ketone_type& x)
        {
          this->Ketone_.set (x);
        }

        void UrinalysisData::
        Ketone (const Ketone_optional& x)
        {
          this->Ketone_ = x;
        }

        void UrinalysisData::
        Ketone (::std::unique_ptr< Ketone_type > x)
        {
          this->Ketone_.set (std::move (x));
        }

        const UrinalysisData::Bilirubin_optional& UrinalysisData::
        Bilirubin () const
        {
          return this->Bilirubin_;
        }

        UrinalysisData::Bilirubin_optional& UrinalysisData::
        Bilirubin ()
        {
          return this->Bilirubin_;
        }

        void UrinalysisData::
        Bilirubin (const Bilirubin_type& x)
        {
          this->Bilirubin_.set (x);
        }

        void UrinalysisData::
        Bilirubin (const Bilirubin_optional& x)
        {
          this->Bilirubin_ = x;
        }

        void UrinalysisData::
        Bilirubin (::std::unique_ptr< Bilirubin_type > x)
        {
          this->Bilirubin_.set (std::move (x));
        }

        const UrinalysisData::SpecificGravity_optional& UrinalysisData::
        SpecificGravity () const
        {
          return this->SpecificGravity_;
        }

        UrinalysisData::SpecificGravity_optional& UrinalysisData::
        SpecificGravity ()
        {
          return this->SpecificGravity_;
        }

        void UrinalysisData::
        SpecificGravity (const SpecificGravity_type& x)
        {
          this->SpecificGravity_.set (x);
        }

        void UrinalysisData::
        SpecificGravity (const SpecificGravity_optional& x)
        {
          this->SpecificGravity_ = x;
        }

        void UrinalysisData::
        SpecificGravity (::std::unique_ptr< SpecificGravity_type > x)
        {
          this->SpecificGravity_.set (std::move (x));
        }

        const UrinalysisData::Blood_optional& UrinalysisData::
        Blood () const
        {
          return this->Blood_;
        }

        UrinalysisData::Blood_optional& UrinalysisData::
        Blood ()
        {
          return this->Blood_;
        }

        void UrinalysisData::
        Blood (const Blood_type& x)
        {
          this->Blood_.set (x);
        }

        void UrinalysisData::
        Blood (const Blood_optional& x)
        {
          this->Blood_ = x;
        }

        void UrinalysisData::
        Blood (::std::unique_ptr< Blood_type > x)
        {
          this->Blood_.set (std::move (x));
        }

        const UrinalysisData::pH_optional& UrinalysisData::
        pH () const
        {
          return this->pH_;
        }

        UrinalysisData::pH_optional& UrinalysisData::
        pH ()
        {
          return this->pH_;
        }

        void UrinalysisData::
        pH (const pH_type& x)
        {
          this->pH_.set (x);
        }

        void UrinalysisData::
        pH (const pH_optional& x)
        {
          this->pH_ = x;
        }

        void UrinalysisData::
        pH (::std::unique_ptr< pH_type > x)
        {
          this->pH_.set (std::move (x));
        }

        const UrinalysisData::Protein_optional& UrinalysisData::
        Protein () const
        {
          return this->Protein_;
        }

        UrinalysisData::Protein_optional& UrinalysisData::
        Protein ()
        {
          return this->Protein_;
        }

        void UrinalysisData::
        Protein (const Protein_type& x)
        {
          this->Protein_.set (x);
        }

        void UrinalysisData::
        Protein (const Protein_optional& x)
        {
          this->Protein_ = x;
        }

        void UrinalysisData::
        Protein (::std::unique_ptr< Protein_type > x)
        {
          this->Protein_.set (std::move (x));
        }

        const UrinalysisData::Urobilinogen_optional& UrinalysisData::
        Urobilinogen () const
        {
          return this->Urobilinogen_;
        }

        UrinalysisData::Urobilinogen_optional& UrinalysisData::
        Urobilinogen ()
        {
          return this->Urobilinogen_;
        }

        void UrinalysisData::
        Urobilinogen (const Urobilinogen_type& x)
        {
          this->Urobilinogen_.set (x);
        }

        void UrinalysisData::
        Urobilinogen (const Urobilinogen_optional& x)
        {
          this->Urobilinogen_ = x;
        }

        void UrinalysisData::
        Urobilinogen (::std::unique_ptr< Urobilinogen_type > x)
        {
          this->Urobilinogen_.set (std::move (x));
        }

        const UrinalysisData::Nitrite_optional& UrinalysisData::
        Nitrite () const
        {
          return this->Nitrite_;
        }

        UrinalysisData::Nitrite_optional& UrinalysisData::
        Nitrite ()
        {
          return this->Nitrite_;
        }

        void UrinalysisData::
        Nitrite (const Nitrite_type& x)
        {
          this->Nitrite_.set (x);
        }

        void UrinalysisData::
        Nitrite (const Nitrite_optional& x)
        {
          this->Nitrite_ = x;
        }

        void UrinalysisData::
        Nitrite (::std::unique_ptr< Nitrite_type > x)
        {
          this->Nitrite_.set (std::move (x));
        }

        const UrinalysisData::LeukocyteEsterase_optional& UrinalysisData::
        LeukocyteEsterase () const
        {
          return this->LeukocyteEsterase_;
        }

        UrinalysisData::LeukocyteEsterase_optional& UrinalysisData::
        LeukocyteEsterase ()
        {
          return this->LeukocyteEsterase_;
        }

        void UrinalysisData::
        LeukocyteEsterase (const LeukocyteEsterase_type& x)
        {
          this->LeukocyteEsterase_.set (x);
        }

        void UrinalysisData::
        LeukocyteEsterase (const LeukocyteEsterase_optional& x)
        {
          this->LeukocyteEsterase_ = x;
        }

        void UrinalysisData::
        LeukocyteEsterase (::std::unique_ptr< LeukocyteEsterase_type > x)
        {
          this->LeukocyteEsterase_.set (std::move (x));
        }

        const UrinalysisData::Microscopic_optional& UrinalysisData::
        Microscopic () const
        {
          return this->Microscopic_;
        }

        UrinalysisData::Microscopic_optional& UrinalysisData::
        Microscopic ()
        {
          return this->Microscopic_;
        }

        void UrinalysisData::
        Microscopic (const Microscopic_type& x)
        {
          this->Microscopic_.set (x);
        }

        void UrinalysisData::
        Microscopic (const Microscopic_optional& x)
        {
          this->Microscopic_ = x;
        }

        void UrinalysisData::
        Microscopic (::std::unique_ptr< Microscopic_type > x)
        {
          this->Microscopic_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // UrinalysisData
        //

        UrinalysisData::
        UrinalysisData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Color_ (this),
          Appearance_ (this),
          Glucose_ (this),
          Ketone_ (this),
          Bilirubin_ (this),
          SpecificGravity_ (this),
          Blood_ (this),
          pH_ (this),
          Protein_ (this),
          Urobilinogen_ (this),
          Nitrite_ (this),
          LeukocyteEsterase_ (this),
          Microscopic_ (this)
        {
        }

        UrinalysisData::
        UrinalysisData (const UrinalysisData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Color_ (x.Color_, f, this),
          Appearance_ (x.Appearance_, f, this),
          Glucose_ (x.Glucose_, f, this),
          Ketone_ (x.Ketone_, f, this),
          Bilirubin_ (x.Bilirubin_, f, this),
          SpecificGravity_ (x.SpecificGravity_, f, this),
          Blood_ (x.Blood_, f, this),
          pH_ (x.pH_, f, this),
          Protein_ (x.Protein_, f, this),
          Urobilinogen_ (x.Urobilinogen_, f, this),
          Nitrite_ (x.Nitrite_, f, this),
          LeukocyteEsterase_ (x.LeukocyteEsterase_, f, this),
          Microscopic_ (x.Microscopic_, f, this)
        {
        }

        UrinalysisData::
        UrinalysisData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Color_ (this),
          Appearance_ (this),
          Glucose_ (this),
          Ketone_ (this),
          Bilirubin_ (this),
          SpecificGravity_ (this),
          Blood_ (this),
          pH_ (this),
          Protein_ (this),
          Urobilinogen_ (this),
          Nitrite_ (this),
          LeukocyteEsterase_ (this),
          Microscopic_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void UrinalysisData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Color
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Color",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Color_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Color_)
                {
                  ::std::unique_ptr< Color_type > r (
                    dynamic_cast< Color_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Color_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Appearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Appearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Appearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Appearance_)
                {
                  ::std::unique_ptr< Appearance_type > r (
                    dynamic_cast< Appearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Appearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Glucose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Glucose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Glucose_)
                {
                  ::std::unique_ptr< Glucose_type > r (
                    dynamic_cast< Glucose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Glucose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Ketone
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Ketone",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Ketone_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Ketone_)
                {
                  ::std::unique_ptr< Ketone_type > r (
                    dynamic_cast< Ketone_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Ketone_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Bilirubin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Bilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Bilirubin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Bilirubin_)
                {
                  ::std::unique_ptr< Bilirubin_type > r (
                    dynamic_cast< Bilirubin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Bilirubin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SpecificGravity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SpecificGravity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SpecificGravity_)
                {
                  ::std::unique_ptr< SpecificGravity_type > r (
                    dynamic_cast< SpecificGravity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SpecificGravity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Blood
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Blood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Blood_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Blood_)
                {
                  ::std::unique_ptr< Blood_type > r (
                    dynamic_cast< Blood_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Blood_.set (::std::move (r));
                  continue;
                }
              }
            }

            // pH
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< pH_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->pH_)
                {
                  ::std::unique_ptr< pH_type > r (
                    dynamic_cast< pH_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->pH_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Protein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Protein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Protein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Protein_)
                {
                  ::std::unique_ptr< Protein_type > r (
                    dynamic_cast< Protein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Protein_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Urobilinogen
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Urobilinogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Urobilinogen_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Urobilinogen_)
                {
                  ::std::unique_ptr< Urobilinogen_type > r (
                    dynamic_cast< Urobilinogen_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Urobilinogen_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Nitrite
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Nitrite",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Nitrite_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Nitrite_)
                {
                  ::std::unique_ptr< Nitrite_type > r (
                    dynamic_cast< Nitrite_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Nitrite_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeukocyteEsterase
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeukocyteEsterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeukocyteEsterase_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeukocyteEsterase_)
                {
                  ::std::unique_ptr< LeukocyteEsterase_type > r (
                    dynamic_cast< LeukocyteEsterase_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeukocyteEsterase_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Microscopic
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Microscopic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Microscopic_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Microscopic_)
                {
                  ::std::unique_ptr< Microscopic_type > r (
                    dynamic_cast< Microscopic_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Microscopic_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        UrinalysisData* UrinalysisData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UrinalysisData (*this, f, c);
        }

        UrinalysisData& UrinalysisData::
        operator= (const UrinalysisData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Color_ = x.Color_;
            this->Appearance_ = x.Appearance_;
            this->Glucose_ = x.Glucose_;
            this->Ketone_ = x.Ketone_;
            this->Bilirubin_ = x.Bilirubin_;
            this->SpecificGravity_ = x.SpecificGravity_;
            this->Blood_ = x.Blood_;
            this->pH_ = x.pH_;
            this->Protein_ = x.Protein_;
            this->Urobilinogen_ = x.Urobilinogen_;
            this->Nitrite_ = x.Nitrite_;
            this->LeukocyteEsterase_ = x.LeukocyteEsterase_;
            this->Microscopic_ = x.Microscopic_;
          }

          return *this;
        }

        UrinalysisData::
        ~UrinalysisData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_type_factory_init (
          "UrinalysisData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const UrinalysisData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Color ())
            {
              o << ::std::endl << "Color: ";
              om.insert (o, *i.Color ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Appearance ())
            {
              o << ::std::endl << "Appearance: ";
              om.insert (o, *i.Appearance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              o << ::std::endl << "Glucose: ";
              om.insert (o, *i.Glucose ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Ketone ())
            {
              o << ::std::endl << "Ketone: ";
              om.insert (o, *i.Ketone ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Bilirubin ())
            {
              o << ::std::endl << "Bilirubin: ";
              om.insert (o, *i.Bilirubin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SpecificGravity ())
            {
              o << ::std::endl << "SpecificGravity: ";
              om.insert (o, *i.SpecificGravity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Blood ())
            {
              o << ::std::endl << "Blood: ";
              om.insert (o, *i.Blood ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.pH ())
            {
              o << ::std::endl << "pH: ";
              om.insert (o, *i.pH ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Protein ())
            {
              o << ::std::endl << "Protein: ";
              om.insert (o, *i.Protein ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Urobilinogen ())
            {
              o << ::std::endl << "Urobilinogen: ";
              om.insert (o, *i.Urobilinogen ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Nitrite ())
            {
              o << ::std::endl << "Nitrite: ";
              om.insert (o, *i.Nitrite ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeukocyteEsterase ())
            {
              o << ::std::endl << "LeukocyteEsterase: ";
              om.insert (o, *i.LeukocyteEsterase ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Microscopic ())
            {
              o << ::std::endl << "Microscopic: ";
              om.insert (o, *i.Microscopic ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const UrinalysisData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Color
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Color ())
            {
              const UrinalysisData::Color_type& x (*i.Color ());
              if (typeid (UrinalysisData::Color_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Color",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Color",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Appearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Appearance ())
            {
              const UrinalysisData::Appearance_type& x (*i.Appearance ());
              if (typeid (UrinalysisData::Appearance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Appearance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Appearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Glucose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              const UrinalysisData::Glucose_type& x (*i.Glucose ());
              if (typeid (UrinalysisData::Glucose_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Glucose",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Ketone
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Ketone ())
            {
              const UrinalysisData::Ketone_type& x (*i.Ketone ());
              if (typeid (UrinalysisData::Ketone_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Ketone",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Ketone",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Bilirubin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Bilirubin ())
            {
              const UrinalysisData::Bilirubin_type& x (*i.Bilirubin ());
              if (typeid (UrinalysisData::Bilirubin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Bilirubin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Bilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SpecificGravity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SpecificGravity ())
            {
              const UrinalysisData::SpecificGravity_type& x (*i.SpecificGravity ());
              if (typeid (UrinalysisData::SpecificGravity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SpecificGravity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SpecificGravity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Blood
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Blood ())
            {
              const UrinalysisData::Blood_type& x (*i.Blood ());
              if (typeid (UrinalysisData::Blood_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Blood",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Blood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // pH
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.pH ())
            {
              const UrinalysisData::pH_type& x (*i.pH ());
              if (typeid (UrinalysisData::pH_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "pH",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "pH",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Protein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Protein ())
            {
              const UrinalysisData::Protein_type& x (*i.Protein ());
              if (typeid (UrinalysisData::Protein_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Protein",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Protein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Urobilinogen
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Urobilinogen ())
            {
              const UrinalysisData::Urobilinogen_type& x (*i.Urobilinogen ());
              if (typeid (UrinalysisData::Urobilinogen_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Urobilinogen",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Urobilinogen",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Nitrite
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Nitrite ())
            {
              const UrinalysisData::Nitrite_type& x (*i.Nitrite ());
              if (typeid (UrinalysisData::Nitrite_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Nitrite",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Nitrite",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeukocyteEsterase
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeukocyteEsterase ())
            {
              const UrinalysisData::LeukocyteEsterase_type& x (*i.LeukocyteEsterase ());
              if (typeid (UrinalysisData::LeukocyteEsterase_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeukocyteEsterase",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeukocyteEsterase",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Microscopic
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Microscopic ())
            {
              const UrinalysisData::Microscopic_type& x (*i.Microscopic ());
              if (typeid (UrinalysisData::Microscopic_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Microscopic",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Microscopic",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UrinalysisData >
        _xsd_UrinalysisData_type_serializer_init (
          "UrinalysisData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RespiratorySystemData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarData.hxx"

#include "ScalarFlowComplianceData.hxx"

#include "ScalarFlowResistanceData.hxx"

#include "ScalarFrequencyData.hxx"

#include "ScalarVolumeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RespiratorySystemData
        // 

        const RespiratorySystemData::AlveolarArterialGradient_optional& RespiratorySystemData::
        AlveolarArterialGradient () const
        {
          return this->AlveolarArterialGradient_;
        }

        RespiratorySystemData::AlveolarArterialGradient_optional& RespiratorySystemData::
        AlveolarArterialGradient ()
        {
          return this->AlveolarArterialGradient_;
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (const AlveolarArterialGradient_type& x)
        {
          this->AlveolarArterialGradient_.set (x);
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (const AlveolarArterialGradient_optional& x)
        {
          this->AlveolarArterialGradient_ = x;
        }

        void RespiratorySystemData::
        AlveolarArterialGradient (::std::unique_ptr< AlveolarArterialGradient_type > x)
        {
          this->AlveolarArterialGradient_.set (std::move (x));
        }

        const RespiratorySystemData::CarricoIndex_optional& RespiratorySystemData::
        CarricoIndex () const
        {
          return this->CarricoIndex_;
        }

        RespiratorySystemData::CarricoIndex_optional& RespiratorySystemData::
        CarricoIndex ()
        {
          return this->CarricoIndex_;
        }

        void RespiratorySystemData::
        CarricoIndex (const CarricoIndex_type& x)
        {
          this->CarricoIndex_.set (x);
        }

        void RespiratorySystemData::
        CarricoIndex (const CarricoIndex_optional& x)
        {
          this->CarricoIndex_ = x;
        }

        void RespiratorySystemData::
        CarricoIndex (::std::unique_ptr< CarricoIndex_type > x)
        {
          this->CarricoIndex_.set (std::move (x));
        }

        const RespiratorySystemData::EndTidalCarbonDioxideFraction_optional& RespiratorySystemData::
        EndTidalCarbonDioxideFraction () const
        {
          return this->EndTidalCarbonDioxideFraction_;
        }

        RespiratorySystemData::EndTidalCarbonDioxideFraction_optional& RespiratorySystemData::
        EndTidalCarbonDioxideFraction ()
        {
          return this->EndTidalCarbonDioxideFraction_;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_type& x)
        {
          this->EndTidalCarbonDioxideFraction_.set (x);
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (const EndTidalCarbonDioxideFraction_optional& x)
        {
          this->EndTidalCarbonDioxideFraction_ = x;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxideFraction (::std::unique_ptr< EndTidalCarbonDioxideFraction_type > x)
        {
          this->EndTidalCarbonDioxideFraction_.set (std::move (x));
        }

        const RespiratorySystemData::EndTidalCarbonDioxidePressure_optional& RespiratorySystemData::
        EndTidalCarbonDioxidePressure () const
        {
          return this->EndTidalCarbonDioxidePressure_;
        }

        RespiratorySystemData::EndTidalCarbonDioxidePressure_optional& RespiratorySystemData::
        EndTidalCarbonDioxidePressure ()
        {
          return this->EndTidalCarbonDioxidePressure_;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_type& x)
        {
          this->EndTidalCarbonDioxidePressure_.set (x);
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (const EndTidalCarbonDioxidePressure_optional& x)
        {
          this->EndTidalCarbonDioxidePressure_ = x;
        }

        void RespiratorySystemData::
        EndTidalCarbonDioxidePressure (::std::unique_ptr< EndTidalCarbonDioxidePressure_type > x)
        {
          this->EndTidalCarbonDioxidePressure_.set (std::move (x));
        }

        const RespiratorySystemData::ExpiratoryFlow_optional& RespiratorySystemData::
        ExpiratoryFlow () const
        {
          return this->ExpiratoryFlow_;
        }

        RespiratorySystemData::ExpiratoryFlow_optional& RespiratorySystemData::
        ExpiratoryFlow ()
        {
          return this->ExpiratoryFlow_;
        }

        void RespiratorySystemData::
        ExpiratoryFlow (const ExpiratoryFlow_type& x)
        {
          this->ExpiratoryFlow_.set (x);
        }

        void RespiratorySystemData::
        ExpiratoryFlow (const ExpiratoryFlow_optional& x)
        {
          this->ExpiratoryFlow_ = x;
        }

        void RespiratorySystemData::
        ExpiratoryFlow (::std::unique_ptr< ExpiratoryFlow_type > x)
        {
          this->ExpiratoryFlow_.set (std::move (x));
        }

        const RespiratorySystemData::InspiratoryExpiratoryRatio_optional& RespiratorySystemData::
        InspiratoryExpiratoryRatio () const
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        RespiratorySystemData::InspiratoryExpiratoryRatio_optional& RespiratorySystemData::
        InspiratoryExpiratoryRatio ()
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_type& x)
        {
          this->InspiratoryExpiratoryRatio_.set (x);
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_optional& x)
        {
          this->InspiratoryExpiratoryRatio_ = x;
        }

        void RespiratorySystemData::
        InspiratoryExpiratoryRatio (::std::unique_ptr< InspiratoryExpiratoryRatio_type > x)
        {
          this->InspiratoryExpiratoryRatio_.set (std::move (x));
        }

        const RespiratorySystemData::InspiratoryFlow_optional& RespiratorySystemData::
        InspiratoryFlow () const
        {
          return this->InspiratoryFlow_;
        }

        RespiratorySystemData::InspiratoryFlow_optional& RespiratorySystemData::
        InspiratoryFlow ()
        {
          return this->InspiratoryFlow_;
        }

        void RespiratorySystemData::
        InspiratoryFlow (const InspiratoryFlow_type& x)
        {
          this->InspiratoryFlow_.set (x);
        }

        void RespiratorySystemData::
        InspiratoryFlow (const InspiratoryFlow_optional& x)
        {
          this->InspiratoryFlow_ = x;
        }

        void RespiratorySystemData::
        InspiratoryFlow (::std::unique_ptr< InspiratoryFlow_type > x)
        {
          this->InspiratoryFlow_.set (std::move (x));
        }

        const RespiratorySystemData::PulmonaryCompliance_optional& RespiratorySystemData::
        PulmonaryCompliance () const
        {
          return this->PulmonaryCompliance_;
        }

        RespiratorySystemData::PulmonaryCompliance_optional& RespiratorySystemData::
        PulmonaryCompliance ()
        {
          return this->PulmonaryCompliance_;
        }

        void RespiratorySystemData::
        PulmonaryCompliance (const PulmonaryCompliance_type& x)
        {
          this->PulmonaryCompliance_.set (x);
        }

        void RespiratorySystemData::
        PulmonaryCompliance (const PulmonaryCompliance_optional& x)
        {
          this->PulmonaryCompliance_ = x;
        }

        void RespiratorySystemData::
        PulmonaryCompliance (::std::unique_ptr< PulmonaryCompliance_type > x)
        {
          this->PulmonaryCompliance_.set (std::move (x));
        }

        const RespiratorySystemData::PulmonaryResistance_optional& RespiratorySystemData::
        PulmonaryResistance () const
        {
          return this->PulmonaryResistance_;
        }

        RespiratorySystemData::PulmonaryResistance_optional& RespiratorySystemData::
        PulmonaryResistance ()
        {
          return this->PulmonaryResistance_;
        }

        void RespiratorySystemData::
        PulmonaryResistance (const PulmonaryResistance_type& x)
        {
          this->PulmonaryResistance_.set (x);
        }

        void RespiratorySystemData::
        PulmonaryResistance (const PulmonaryResistance_optional& x)
        {
          this->PulmonaryResistance_ = x;
        }

        void RespiratorySystemData::
        PulmonaryResistance (::std::unique_ptr< PulmonaryResistance_type > x)
        {
          this->PulmonaryResistance_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationDriverPressure_optional& RespiratorySystemData::
        RespirationDriverPressure () const
        {
          return this->RespirationDriverPressure_;
        }

        RespiratorySystemData::RespirationDriverPressure_optional& RespiratorySystemData::
        RespirationDriverPressure ()
        {
          return this->RespirationDriverPressure_;
        }

        void RespiratorySystemData::
        RespirationDriverPressure (const RespirationDriverPressure_type& x)
        {
          this->RespirationDriverPressure_.set (x);
        }

        void RespiratorySystemData::
        RespirationDriverPressure (const RespirationDriverPressure_optional& x)
        {
          this->RespirationDriverPressure_ = x;
        }

        void RespiratorySystemData::
        RespirationDriverPressure (::std::unique_ptr< RespirationDriverPressure_type > x)
        {
          this->RespirationDriverPressure_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationMusclePressure_optional& RespiratorySystemData::
        RespirationMusclePressure () const
        {
          return this->RespirationMusclePressure_;
        }

        RespiratorySystemData::RespirationMusclePressure_optional& RespiratorySystemData::
        RespirationMusclePressure ()
        {
          return this->RespirationMusclePressure_;
        }

        void RespiratorySystemData::
        RespirationMusclePressure (const RespirationMusclePressure_type& x)
        {
          this->RespirationMusclePressure_.set (x);
        }

        void RespiratorySystemData::
        RespirationMusclePressure (const RespirationMusclePressure_optional& x)
        {
          this->RespirationMusclePressure_ = x;
        }

        void RespiratorySystemData::
        RespirationMusclePressure (::std::unique_ptr< RespirationMusclePressure_type > x)
        {
          this->RespirationMusclePressure_.set (std::move (x));
        }

        const RespiratorySystemData::RespirationRate_optional& RespiratorySystemData::
        RespirationRate () const
        {
          return this->RespirationRate_;
        }

        RespiratorySystemData::RespirationRate_optional& RespiratorySystemData::
        RespirationRate ()
        {
          return this->RespirationRate_;
        }

        void RespiratorySystemData::
        RespirationRate (const RespirationRate_type& x)
        {
          this->RespirationRate_.set (x);
        }

        void RespiratorySystemData::
        RespirationRate (const RespirationRate_optional& x)
        {
          this->RespirationRate_ = x;
        }

        void RespiratorySystemData::
        RespirationRate (::std::unique_ptr< RespirationRate_type > x)
        {
          this->RespirationRate_.set (std::move (x));
        }

        const RespiratorySystemData::SpecificVentilation_optional& RespiratorySystemData::
        SpecificVentilation () const
        {
          return this->SpecificVentilation_;
        }

        RespiratorySystemData::SpecificVentilation_optional& RespiratorySystemData::
        SpecificVentilation ()
        {
          return this->SpecificVentilation_;
        }

        void RespiratorySystemData::
        SpecificVentilation (const SpecificVentilation_type& x)
        {
          this->SpecificVentilation_.set (x);
        }

        void RespiratorySystemData::
        SpecificVentilation (const SpecificVentilation_optional& x)
        {
          this->SpecificVentilation_ = x;
        }

        void RespiratorySystemData::
        SpecificVentilation (::std::unique_ptr< SpecificVentilation_type > x)
        {
          this->SpecificVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TidalVolume_optional& RespiratorySystemData::
        TidalVolume () const
        {
          return this->TidalVolume_;
        }

        RespiratorySystemData::TidalVolume_optional& RespiratorySystemData::
        TidalVolume ()
        {
          return this->TidalVolume_;
        }

        void RespiratorySystemData::
        TidalVolume (const TidalVolume_type& x)
        {
          this->TidalVolume_.set (x);
        }

        void RespiratorySystemData::
        TidalVolume (const TidalVolume_optional& x)
        {
          this->TidalVolume_ = x;
        }

        void RespiratorySystemData::
        TidalVolume (::std::unique_ptr< TidalVolume_type > x)
        {
          this->TidalVolume_.set (std::move (x));
        }

        const RespiratorySystemData::TotalAlveolarVentilation_optional& RespiratorySystemData::
        TotalAlveolarVentilation () const
        {
          return this->TotalAlveolarVentilation_;
        }

        RespiratorySystemData::TotalAlveolarVentilation_optional& RespiratorySystemData::
        TotalAlveolarVentilation ()
        {
          return this->TotalAlveolarVentilation_;
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (const TotalAlveolarVentilation_type& x)
        {
          this->TotalAlveolarVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (const TotalAlveolarVentilation_optional& x)
        {
          this->TotalAlveolarVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalAlveolarVentilation (::std::unique_ptr< TotalAlveolarVentilation_type > x)
        {
          this->TotalAlveolarVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TotalDeadSpaceVentilation_optional& RespiratorySystemData::
        TotalDeadSpaceVentilation () const
        {
          return this->TotalDeadSpaceVentilation_;
        }

        RespiratorySystemData::TotalDeadSpaceVentilation_optional& RespiratorySystemData::
        TotalDeadSpaceVentilation ()
        {
          return this->TotalDeadSpaceVentilation_;
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_type& x)
        {
          this->TotalDeadSpaceVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (const TotalDeadSpaceVentilation_optional& x)
        {
          this->TotalDeadSpaceVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalDeadSpaceVentilation (::std::unique_ptr< TotalDeadSpaceVentilation_type > x)
        {
          this->TotalDeadSpaceVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TotalLungVolume_optional& RespiratorySystemData::
        TotalLungVolume () const
        {
          return this->TotalLungVolume_;
        }

        RespiratorySystemData::TotalLungVolume_optional& RespiratorySystemData::
        TotalLungVolume ()
        {
          return this->TotalLungVolume_;
        }

        void RespiratorySystemData::
        TotalLungVolume (const TotalLungVolume_type& x)
        {
          this->TotalLungVolume_.set (x);
        }

        void RespiratorySystemData::
        TotalLungVolume (const TotalLungVolume_optional& x)
        {
          this->TotalLungVolume_ = x;
        }

        void RespiratorySystemData::
        TotalLungVolume (::std::unique_ptr< TotalLungVolume_type > x)
        {
          this->TotalLungVolume_.set (std::move (x));
        }

        const RespiratorySystemData::TotalPulmonaryVentilation_optional& RespiratorySystemData::
        TotalPulmonaryVentilation () const
        {
          return this->TotalPulmonaryVentilation_;
        }

        RespiratorySystemData::TotalPulmonaryVentilation_optional& RespiratorySystemData::
        TotalPulmonaryVentilation ()
        {
          return this->TotalPulmonaryVentilation_;
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (const TotalPulmonaryVentilation_type& x)
        {
          this->TotalPulmonaryVentilation_.set (x);
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (const TotalPulmonaryVentilation_optional& x)
        {
          this->TotalPulmonaryVentilation_ = x;
        }

        void RespiratorySystemData::
        TotalPulmonaryVentilation (::std::unique_ptr< TotalPulmonaryVentilation_type > x)
        {
          this->TotalPulmonaryVentilation_.set (std::move (x));
        }

        const RespiratorySystemData::TranspulmonaryPressure_optional& RespiratorySystemData::
        TranspulmonaryPressure () const
        {
          return this->TranspulmonaryPressure_;
        }

        RespiratorySystemData::TranspulmonaryPressure_optional& RespiratorySystemData::
        TranspulmonaryPressure ()
        {
          return this->TranspulmonaryPressure_;
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (const TranspulmonaryPressure_type& x)
        {
          this->TranspulmonaryPressure_.set (x);
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (const TranspulmonaryPressure_optional& x)
        {
          this->TranspulmonaryPressure_ = x;
        }

        void RespiratorySystemData::
        TranspulmonaryPressure (::std::unique_ptr< TranspulmonaryPressure_type > x)
        {
          this->TranspulmonaryPressure_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RespiratorySystemData
        //

        RespiratorySystemData::
        RespiratorySystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          AlveolarArterialGradient_ (this),
          CarricoIndex_ (this),
          EndTidalCarbonDioxideFraction_ (this),
          EndTidalCarbonDioxidePressure_ (this),
          ExpiratoryFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          InspiratoryFlow_ (this),
          PulmonaryCompliance_ (this),
          PulmonaryResistance_ (this),
          RespirationDriverPressure_ (this),
          RespirationMusclePressure_ (this),
          RespirationRate_ (this),
          SpecificVentilation_ (this),
          TidalVolume_ (this),
          TotalAlveolarVentilation_ (this),
          TotalDeadSpaceVentilation_ (this),
          TotalLungVolume_ (this),
          TotalPulmonaryVentilation_ (this),
          TranspulmonaryPressure_ (this)
        {
        }

        RespiratorySystemData::
        RespiratorySystemData (const RespiratorySystemData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          AlveolarArterialGradient_ (x.AlveolarArterialGradient_, f, this),
          CarricoIndex_ (x.CarricoIndex_, f, this),
          EndTidalCarbonDioxideFraction_ (x.EndTidalCarbonDioxideFraction_, f, this),
          EndTidalCarbonDioxidePressure_ (x.EndTidalCarbonDioxidePressure_, f, this),
          ExpiratoryFlow_ (x.ExpiratoryFlow_, f, this),
          InspiratoryExpiratoryRatio_ (x.InspiratoryExpiratoryRatio_, f, this),
          InspiratoryFlow_ (x.InspiratoryFlow_, f, this),
          PulmonaryCompliance_ (x.PulmonaryCompliance_, f, this),
          PulmonaryResistance_ (x.PulmonaryResistance_, f, this),
          RespirationDriverPressure_ (x.RespirationDriverPressure_, f, this),
          RespirationMusclePressure_ (x.RespirationMusclePressure_, f, this),
          RespirationRate_ (x.RespirationRate_, f, this),
          SpecificVentilation_ (x.SpecificVentilation_, f, this),
          TidalVolume_ (x.TidalVolume_, f, this),
          TotalAlveolarVentilation_ (x.TotalAlveolarVentilation_, f, this),
          TotalDeadSpaceVentilation_ (x.TotalDeadSpaceVentilation_, f, this),
          TotalLungVolume_ (x.TotalLungVolume_, f, this),
          TotalPulmonaryVentilation_ (x.TotalPulmonaryVentilation_, f, this),
          TranspulmonaryPressure_ (x.TranspulmonaryPressure_, f, this)
        {
        }

        RespiratorySystemData::
        RespiratorySystemData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          AlveolarArterialGradient_ (this),
          CarricoIndex_ (this),
          EndTidalCarbonDioxideFraction_ (this),
          EndTidalCarbonDioxidePressure_ (this),
          ExpiratoryFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          InspiratoryFlow_ (this),
          PulmonaryCompliance_ (this),
          PulmonaryResistance_ (this),
          RespirationDriverPressure_ (this),
          RespirationMusclePressure_ (this),
          RespirationRate_ (this),
          SpecificVentilation_ (this),
          TidalVolume_ (this),
          TotalAlveolarVentilation_ (this),
          TotalDeadSpaceVentilation_ (this),
          TotalLungVolume_ (this),
          TotalPulmonaryVentilation_ (this),
          TranspulmonaryPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RespiratorySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AlveolarArterialGradient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AlveolarArterialGradient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AlveolarArterialGradient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AlveolarArterialGradient_)
                {
                  ::std::unique_ptr< AlveolarArterialGradient_type > r (
                    dynamic_cast< AlveolarArterialGradient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AlveolarArterialGradient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CarricoIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CarricoIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CarricoIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CarricoIndex_)
                {
                  ::std::unique_ptr< CarricoIndex_type > r (
                    dynamic_cast< CarricoIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CarricoIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalCarbonDioxideFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalCarbonDioxideFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalCarbonDioxideFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalCarbonDioxideFraction_)
                {
                  ::std::unique_ptr< EndTidalCarbonDioxideFraction_type > r (
                    dynamic_cast< EndTidalCarbonDioxideFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalCarbonDioxideFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalCarbonDioxidePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalCarbonDioxidePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalCarbonDioxidePressure_)
                {
                  ::std::unique_ptr< EndTidalCarbonDioxidePressure_type > r (
                    dynamic_cast< EndTidalCarbonDioxidePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalCarbonDioxidePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExpiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExpiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExpiratoryFlow_)
                {
                  ::std::unique_ptr< ExpiratoryFlow_type > r (
                    dynamic_cast< ExpiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExpiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryExpiratoryRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryExpiratoryRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryExpiratoryRatio_)
                {
                  ::std::unique_ptr< InspiratoryExpiratoryRatio_type > r (
                    dynamic_cast< InspiratoryExpiratoryRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryExpiratoryRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryFlow_)
                {
                  ::std::unique_ptr< InspiratoryFlow_type > r (
                    dynamic_cast< InspiratoryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryCompliance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryCompliance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryCompliance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryCompliance_)
                {
                  ::std::unique_ptr< PulmonaryCompliance_type > r (
                    dynamic_cast< PulmonaryCompliance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryCompliance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryResistance_)
                {
                  ::std::unique_ptr< PulmonaryResistance_type > r (
                    dynamic_cast< PulmonaryResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationDriverPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationDriverPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationDriverPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationDriverPressure_)
                {
                  ::std::unique_ptr< RespirationDriverPressure_type > r (
                    dynamic_cast< RespirationDriverPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationDriverPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationMusclePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationMusclePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationMusclePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationMusclePressure_)
                {
                  ::std::unique_ptr< RespirationMusclePressure_type > r (
                    dynamic_cast< RespirationMusclePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationMusclePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationRate_)
                {
                  ::std::unique_ptr< RespirationRate_type > r (
                    dynamic_cast< RespirationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SpecificVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SpecificVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SpecificVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SpecificVentilation_)
                {
                  ::std::unique_ptr< SpecificVentilation_type > r (
                    dynamic_cast< SpecificVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SpecificVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TidalVolume_)
                {
                  ::std::unique_ptr< TidalVolume_type > r (
                    dynamic_cast< TidalVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalAlveolarVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalAlveolarVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalAlveolarVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalAlveolarVentilation_)
                {
                  ::std::unique_ptr< TotalAlveolarVentilation_type > r (
                    dynamic_cast< TotalAlveolarVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalAlveolarVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalDeadSpaceVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalDeadSpaceVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalDeadSpaceVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalDeadSpaceVentilation_)
                {
                  ::std::unique_ptr< TotalDeadSpaceVentilation_type > r (
                    dynamic_cast< TotalDeadSpaceVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalDeadSpaceVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalLungVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalLungVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalLungVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalLungVolume_)
                {
                  ::std::unique_ptr< TotalLungVolume_type > r (
                    dynamic_cast< TotalLungVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalLungVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalPulmonaryVentilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalPulmonaryVentilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalPulmonaryVentilation_)
                {
                  ::std::unique_ptr< TotalPulmonaryVentilation_type > r (
                    dynamic_cast< TotalPulmonaryVentilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalPulmonaryVentilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TranspulmonaryPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TranspulmonaryPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TranspulmonaryPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TranspulmonaryPressure_)
                {
                  ::std::unique_ptr< TranspulmonaryPressure_type > r (
                    dynamic_cast< TranspulmonaryPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TranspulmonaryPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RespiratorySystemData* RespiratorySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RespiratorySystemData (*this, f, c);
        }

        RespiratorySystemData& RespiratorySystemData::
        operator= (const RespiratorySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->AlveolarArterialGradient_ = x.AlveolarArterialGradient_;
            this->CarricoIndex_ = x.CarricoIndex_;
            this->EndTidalCarbonDioxideFraction_ = x.EndTidalCarbonDioxideFraction_;
            this->EndTidalCarbonDioxidePressure_ = x.EndTidalCarbonDioxidePressure_;
            this->ExpiratoryFlow_ = x.ExpiratoryFlow_;
            this->InspiratoryExpiratoryRatio_ = x.InspiratoryExpiratoryRatio_;
            this->InspiratoryFlow_ = x.InspiratoryFlow_;
            this->PulmonaryCompliance_ = x.PulmonaryCompliance_;
            this->PulmonaryResistance_ = x.PulmonaryResistance_;
            this->RespirationDriverPressure_ = x.RespirationDriverPressure_;
            this->RespirationMusclePressure_ = x.RespirationMusclePressure_;
            this->RespirationRate_ = x.RespirationRate_;
            this->SpecificVentilation_ = x.SpecificVentilation_;
            this->TidalVolume_ = x.TidalVolume_;
            this->TotalAlveolarVentilation_ = x.TotalAlveolarVentilation_;
            this->TotalDeadSpaceVentilation_ = x.TotalDeadSpaceVentilation_;
            this->TotalLungVolume_ = x.TotalLungVolume_;
            this->TotalPulmonaryVentilation_ = x.TotalPulmonaryVentilation_;
            this->TranspulmonaryPressure_ = x.TranspulmonaryPressure_;
          }

          return *this;
        }

        RespiratorySystemData::
        ~RespiratorySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_type_factory_init (
          "RespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const RespiratorySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AlveolarArterialGradient ())
            {
              o << ::std::endl << "AlveolarArterialGradient: ";
              om.insert (o, *i.AlveolarArterialGradient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CarricoIndex ())
            {
              o << ::std::endl << "CarricoIndex: ";
              om.insert (o, *i.CarricoIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxideFraction ())
            {
              o << ::std::endl << "EndTidalCarbonDioxideFraction: ";
              om.insert (o, *i.EndTidalCarbonDioxideFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxidePressure ())
            {
              o << ::std::endl << "EndTidalCarbonDioxidePressure: ";
              om.insert (o, *i.EndTidalCarbonDioxidePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExpiratoryFlow ())
            {
              o << ::std::endl << "ExpiratoryFlow: ";
              om.insert (o, *i.ExpiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              o << ::std::endl << "InspiratoryExpiratoryRatio: ";
              om.insert (o, *i.InspiratoryExpiratoryRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryFlow ())
            {
              o << ::std::endl << "InspiratoryFlow: ";
              om.insert (o, *i.InspiratoryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryCompliance ())
            {
              o << ::std::endl << "PulmonaryCompliance: ";
              om.insert (o, *i.PulmonaryCompliance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryResistance ())
            {
              o << ::std::endl << "PulmonaryResistance: ";
              om.insert (o, *i.PulmonaryResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationDriverPressure ())
            {
              o << ::std::endl << "RespirationDriverPressure: ";
              om.insert (o, *i.RespirationDriverPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationMusclePressure ())
            {
              o << ::std::endl << "RespirationMusclePressure: ";
              om.insert (o, *i.RespirationMusclePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationRate ())
            {
              o << ::std::endl << "RespirationRate: ";
              om.insert (o, *i.RespirationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SpecificVentilation ())
            {
              o << ::std::endl << "SpecificVentilation: ";
              om.insert (o, *i.SpecificVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TidalVolume ())
            {
              o << ::std::endl << "TidalVolume: ";
              om.insert (o, *i.TidalVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilation ())
            {
              o << ::std::endl << "TotalAlveolarVentilation: ";
              om.insert (o, *i.TotalAlveolarVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalDeadSpaceVentilation ())
            {
              o << ::std::endl << "TotalDeadSpaceVentilation: ";
              om.insert (o, *i.TotalDeadSpaceVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalLungVolume ())
            {
              o << ::std::endl << "TotalLungVolume: ";
              om.insert (o, *i.TotalLungVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilation ())
            {
              o << ::std::endl << "TotalPulmonaryVentilation: ";
              om.insert (o, *i.TotalPulmonaryVentilation ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TranspulmonaryPressure ())
            {
              o << ::std::endl << "TranspulmonaryPressure: ";
              om.insert (o, *i.TranspulmonaryPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const RespiratorySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // AlveolarArterialGradient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AlveolarArterialGradient ())
            {
              const RespiratorySystemData::AlveolarArterialGradient_type& x (*i.AlveolarArterialGradient ());
              if (typeid (RespiratorySystemData::AlveolarArterialGradient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AlveolarArterialGradient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AlveolarArterialGradient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CarricoIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CarricoIndex ())
            {
              const RespiratorySystemData::CarricoIndex_type& x (*i.CarricoIndex ());
              if (typeid (RespiratorySystemData::CarricoIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CarricoIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CarricoIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalCarbonDioxideFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxideFraction ())
            {
              const RespiratorySystemData::EndTidalCarbonDioxideFraction_type& x (*i.EndTidalCarbonDioxideFraction ());
              if (typeid (RespiratorySystemData::EndTidalCarbonDioxideFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalCarbonDioxideFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalCarbonDioxideFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalCarbonDioxidePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalCarbonDioxidePressure ())
            {
              const RespiratorySystemData::EndTidalCarbonDioxidePressure_type& x (*i.EndTidalCarbonDioxidePressure ());
              if (typeid (RespiratorySystemData::EndTidalCarbonDioxidePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalCarbonDioxidePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalCarbonDioxidePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExpiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExpiratoryFlow ())
            {
              const RespiratorySystemData::ExpiratoryFlow_type& x (*i.ExpiratoryFlow ());
              if (typeid (RespiratorySystemData::ExpiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExpiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExpiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryExpiratoryRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              const RespiratorySystemData::InspiratoryExpiratoryRatio_type& x (*i.InspiratoryExpiratoryRatio ());
              if (typeid (RespiratorySystemData::InspiratoryExpiratoryRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryExpiratoryRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryFlow ())
            {
              const RespiratorySystemData::InspiratoryFlow_type& x (*i.InspiratoryFlow ());
              if (typeid (RespiratorySystemData::InspiratoryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryCompliance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryCompliance ())
            {
              const RespiratorySystemData::PulmonaryCompliance_type& x (*i.PulmonaryCompliance ());
              if (typeid (RespiratorySystemData::PulmonaryCompliance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryCompliance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryCompliance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryResistance ())
            {
              const RespiratorySystemData::PulmonaryResistance_type& x (*i.PulmonaryResistance ());
              if (typeid (RespiratorySystemData::PulmonaryResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationDriverPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationDriverPressure ())
            {
              const RespiratorySystemData::RespirationDriverPressure_type& x (*i.RespirationDriverPressure ());
              if (typeid (RespiratorySystemData::RespirationDriverPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationDriverPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationDriverPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationMusclePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationMusclePressure ())
            {
              const RespiratorySystemData::RespirationMusclePressure_type& x (*i.RespirationMusclePressure ());
              if (typeid (RespiratorySystemData::RespirationMusclePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationMusclePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationMusclePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationRate ())
            {
              const RespiratorySystemData::RespirationRate_type& x (*i.RespirationRate ());
              if (typeid (RespiratorySystemData::RespirationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SpecificVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SpecificVentilation ())
            {
              const RespiratorySystemData::SpecificVentilation_type& x (*i.SpecificVentilation ());
              if (typeid (RespiratorySystemData::SpecificVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SpecificVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SpecificVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TidalVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TidalVolume ())
            {
              const RespiratorySystemData::TidalVolume_type& x (*i.TidalVolume ());
              if (typeid (RespiratorySystemData::TidalVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TidalVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TidalVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalAlveolarVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalAlveolarVentilation ())
            {
              const RespiratorySystemData::TotalAlveolarVentilation_type& x (*i.TotalAlveolarVentilation ());
              if (typeid (RespiratorySystemData::TotalAlveolarVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalAlveolarVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalAlveolarVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalDeadSpaceVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalDeadSpaceVentilation ())
            {
              const RespiratorySystemData::TotalDeadSpaceVentilation_type& x (*i.TotalDeadSpaceVentilation ());
              if (typeid (RespiratorySystemData::TotalDeadSpaceVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalDeadSpaceVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalDeadSpaceVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalLungVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalLungVolume ())
            {
              const RespiratorySystemData::TotalLungVolume_type& x (*i.TotalLungVolume ());
              if (typeid (RespiratorySystemData::TotalLungVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalLungVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalLungVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalPulmonaryVentilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalPulmonaryVentilation ())
            {
              const RespiratorySystemData::TotalPulmonaryVentilation_type& x (*i.TotalPulmonaryVentilation ());
              if (typeid (RespiratorySystemData::TotalPulmonaryVentilation_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalPulmonaryVentilation",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalPulmonaryVentilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TranspulmonaryPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TranspulmonaryPressure ())
            {
              const RespiratorySystemData::TranspulmonaryPressure_type& x (*i.TranspulmonaryPressure ());
              if (typeid (RespiratorySystemData::TranspulmonaryPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TranspulmonaryPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TranspulmonaryPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RespiratorySystemData >
        _xsd_RespiratorySystemData_type_serializer_init (
          "RespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


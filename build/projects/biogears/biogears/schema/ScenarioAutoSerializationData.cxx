// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ScenarioAutoSerializationData.hxx"

#include "enumOnOff.hxx"

#include "ScalarTimeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ScenarioAutoSerializationData
        // 

        const ScenarioAutoSerializationData::Directory_type& ScenarioAutoSerializationData::
        Directory () const
        {
          return this->Directory_.get ();
        }

        ScenarioAutoSerializationData::Directory_type& ScenarioAutoSerializationData::
        Directory ()
        {
          return this->Directory_.get ();
        }

        void ScenarioAutoSerializationData::
        Directory (const Directory_type& x)
        {
          this->Directory_.set (x);
        }

        void ScenarioAutoSerializationData::
        Directory (::std::unique_ptr< Directory_type > x)
        {
          this->Directory_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::FileName_type& ScenarioAutoSerializationData::
        FileName () const
        {
          return this->FileName_.get ();
        }

        ScenarioAutoSerializationData::FileName_type& ScenarioAutoSerializationData::
        FileName ()
        {
          return this->FileName_.get ();
        }

        void ScenarioAutoSerializationData::
        FileName (const FileName_type& x)
        {
          this->FileName_.set (x);
        }

        void ScenarioAutoSerializationData::
        FileName (::std::unique_ptr< FileName_type > x)
        {
          this->FileName_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::AfterActions_type& ScenarioAutoSerializationData::
        AfterActions () const
        {
          return this->AfterActions_.get ();
        }

        ScenarioAutoSerializationData::AfterActions_type& ScenarioAutoSerializationData::
        AfterActions ()
        {
          return this->AfterActions_.get ();
        }

        void ScenarioAutoSerializationData::
        AfterActions (const AfterActions_type& x)
        {
          this->AfterActions_.set (x);
        }

        void ScenarioAutoSerializationData::
        AfterActions (::std::unique_ptr< AfterActions_type > x)
        {
          this->AfterActions_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::Period_type& ScenarioAutoSerializationData::
        Period () const
        {
          return this->Period_.get ();
        }

        ScenarioAutoSerializationData::Period_type& ScenarioAutoSerializationData::
        Period ()
        {
          return this->Period_.get ();
        }

        void ScenarioAutoSerializationData::
        Period (const Period_type& x)
        {
          this->Period_.set (x);
        }

        void ScenarioAutoSerializationData::
        Period (::std::unique_ptr< Period_type > x)
        {
          this->Period_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::PeriodTimeStamps_type& ScenarioAutoSerializationData::
        PeriodTimeStamps () const
        {
          return this->PeriodTimeStamps_.get ();
        }

        ScenarioAutoSerializationData::PeriodTimeStamps_type& ScenarioAutoSerializationData::
        PeriodTimeStamps ()
        {
          return this->PeriodTimeStamps_.get ();
        }

        void ScenarioAutoSerializationData::
        PeriodTimeStamps (const PeriodTimeStamps_type& x)
        {
          this->PeriodTimeStamps_.set (x);
        }

        void ScenarioAutoSerializationData::
        PeriodTimeStamps (::std::unique_ptr< PeriodTimeStamps_type > x)
        {
          this->PeriodTimeStamps_.set (std::move (x));
        }

        const ScenarioAutoSerializationData::ReloadState_type& ScenarioAutoSerializationData::
        ReloadState () const
        {
          return this->ReloadState_.get ();
        }

        ScenarioAutoSerializationData::ReloadState_type& ScenarioAutoSerializationData::
        ReloadState ()
        {
          return this->ReloadState_.get ();
        }

        void ScenarioAutoSerializationData::
        ReloadState (const ReloadState_type& x)
        {
          this->ReloadState_.set (x);
        }

        void ScenarioAutoSerializationData::
        ReloadState (::std::unique_ptr< ReloadState_type > x)
        {
          this->ReloadState_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ScenarioAutoSerializationData
        //

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (this),
          FileName_ (this),
          AfterActions_ (this),
          Period_ (this),
          PeriodTimeStamps_ (this),
          ReloadState_ (this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const Directory_type& Directory,
                                       const FileName_type& FileName,
                                       const AfterActions_type& AfterActions,
                                       const Period_type& Period,
                                       const PeriodTimeStamps_type& PeriodTimeStamps,
                                       const ReloadState_type& ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (Directory, this),
          FileName_ (FileName, this),
          AfterActions_ (AfterActions, this),
          Period_ (Period, this),
          PeriodTimeStamps_ (PeriodTimeStamps, this),
          ReloadState_ (ReloadState, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const Directory_type& Directory,
                                       const FileName_type& FileName,
                                       const AfterActions_type& AfterActions,
                                       ::std::unique_ptr< Period_type > Period,
                                       const PeriodTimeStamps_type& PeriodTimeStamps,
                                       const ReloadState_type& ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (Directory, this),
          FileName_ (FileName, this),
          AfterActions_ (AfterActions, this),
          Period_ (std::move (Period), this),
          PeriodTimeStamps_ (PeriodTimeStamps, this),
          ReloadState_ (ReloadState, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (::std::unique_ptr< Directory_type > Directory,
                                       ::std::unique_ptr< FileName_type > FileName,
                                       ::std::unique_ptr< AfterActions_type > AfterActions,
                                       ::std::unique_ptr< Period_type > Period,
                                       ::std::unique_ptr< PeriodTimeStamps_type > PeriodTimeStamps,
                                       ::std::unique_ptr< ReloadState_type > ReloadState)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Directory_ (std::move (Directory), this),
          FileName_ (std::move (FileName), this),
          AfterActions_ (std::move (AfterActions), this),
          Period_ (std::move (Period), this),
          PeriodTimeStamps_ (std::move (PeriodTimeStamps), this),
          ReloadState_ (std::move (ReloadState), this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const ScenarioAutoSerializationData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Directory_ (x.Directory_, f, this),
          FileName_ (x.FileName_, f, this),
          AfterActions_ (x.AfterActions_, f, this),
          Period_ (x.Period_, f, this),
          PeriodTimeStamps_ (x.PeriodTimeStamps_, f, this),
          ReloadState_ (x.ReloadState_, f, this)
        {
        }

        ScenarioAutoSerializationData::
        ScenarioAutoSerializationData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Directory_ (this),
          FileName_ (this),
          AfterActions_ (this),
          Period_ (this),
          PeriodTimeStamps_ (this),
          ReloadState_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ScenarioAutoSerializationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Directory
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Directory",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Directory_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Directory_.present ())
                {
                  ::std::unique_ptr< Directory_type > r (
                    dynamic_cast< Directory_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Directory_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FileName
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FileName",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FileName_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FileName_.present ())
                {
                  ::std::unique_ptr< FileName_type > r (
                    dynamic_cast< FileName_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FileName_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AfterActions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AfterActions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AfterActions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AfterActions_.present ())
                {
                  ::std::unique_ptr< AfterActions_type > r (
                    dynamic_cast< AfterActions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AfterActions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Period
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Period_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Period_.present ())
                {
                  ::std::unique_ptr< Period_type > r (
                    dynamic_cast< Period_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Period_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PeriodTimeStamps
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PeriodTimeStamps",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PeriodTimeStamps_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!PeriodTimeStamps_.present ())
                {
                  ::std::unique_ptr< PeriodTimeStamps_type > r (
                    dynamic_cast< PeriodTimeStamps_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PeriodTimeStamps_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReloadState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReloadState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReloadState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ReloadState_.present ())
                {
                  ::std::unique_ptr< ReloadState_type > r (
                    dynamic_cast< ReloadState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReloadState_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Directory_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Directory",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FileName",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!AfterActions_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AfterActions",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Period",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeriodTimeStamps_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeriodTimeStamps",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ReloadState_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ReloadState",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        ScenarioAutoSerializationData* ScenarioAutoSerializationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ScenarioAutoSerializationData (*this, f, c);
        }

        ScenarioAutoSerializationData& ScenarioAutoSerializationData::
        operator= (const ScenarioAutoSerializationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Directory_ = x.Directory_;
            this->FileName_ = x.FileName_;
            this->AfterActions_ = x.AfterActions_;
            this->Period_ = x.Period_;
            this->PeriodTimeStamps_ = x.PeriodTimeStamps_;
            this->ReloadState_ = x.ReloadState_;
          }

          return *this;
        }

        ScenarioAutoSerializationData::
        ~ScenarioAutoSerializationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_type_factory_init (
          "ScenarioAutoSerializationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ScenarioAutoSerializationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Directory: ";
            om.insert (o, i.Directory ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FileName: ";
            om.insert (o, i.FileName ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AfterActions: ";
            om.insert (o, i.AfterActions ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Period: ";
            om.insert (o, i.Period ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "PeriodTimeStamps: ";
            om.insert (o, i.PeriodTimeStamps ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ReloadState: ";
            om.insert (o, i.ReloadState ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ScenarioAutoSerializationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Directory
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::Directory_type& x (i.Directory ());
            if (typeid (ScenarioAutoSerializationData::Directory_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Directory",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Directory",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FileName
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::FileName_type& x (i.FileName ());
            if (typeid (ScenarioAutoSerializationData::FileName_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FileName",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FileName",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // AfterActions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::AfterActions_type& x (i.AfterActions ());
            if (typeid (ScenarioAutoSerializationData::AfterActions_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AfterActions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AfterActions",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Period
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::Period_type& x (i.Period ());
            if (typeid (ScenarioAutoSerializationData::Period_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Period",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Period",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // PeriodTimeStamps
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::PeriodTimeStamps_type& x (i.PeriodTimeStamps ());
            if (typeid (ScenarioAutoSerializationData::PeriodTimeStamps_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "PeriodTimeStamps",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "PeriodTimeStamps",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ReloadState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const ScenarioAutoSerializationData::ReloadState_type& x (i.ReloadState ());
            if (typeid (ScenarioAutoSerializationData::ReloadState_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ReloadState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ReloadState",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ScenarioAutoSerializationData >
        _xsd_ScenarioAutoSerializationData_type_serializer_init (
          "ScenarioAutoSerializationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


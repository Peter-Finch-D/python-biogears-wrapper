// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SubstancePharmacodynamicsData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarData.hxx"

#include "PupillaryResponseData.hxx"

#include "ScalarFrequencyData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstancePharmacodynamicsData
        // 

        const SubstancePharmacodynamicsData::Bronchodilation_type& SubstancePharmacodynamicsData::
        Bronchodilation () const
        {
          return this->Bronchodilation_.get ();
        }

        SubstancePharmacodynamicsData::Bronchodilation_type& SubstancePharmacodynamicsData::
        Bronchodilation ()
        {
          return this->Bronchodilation_.get ();
        }

        void SubstancePharmacodynamicsData::
        Bronchodilation (const Bronchodilation_type& x)
        {
          this->Bronchodilation_.set (x);
        }

        void SubstancePharmacodynamicsData::
        Bronchodilation (::std::unique_ptr< Bronchodilation_type > x)
        {
          this->Bronchodilation_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::DiastolicPressureModifier_type& SubstancePharmacodynamicsData::
        DiastolicPressureModifier () const
        {
          return this->DiastolicPressureModifier_.get ();
        }

        SubstancePharmacodynamicsData::DiastolicPressureModifier_type& SubstancePharmacodynamicsData::
        DiastolicPressureModifier ()
        {
          return this->DiastolicPressureModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        DiastolicPressureModifier (const DiastolicPressureModifier_type& x)
        {
          this->DiastolicPressureModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        DiastolicPressureModifier (::std::unique_ptr< DiastolicPressureModifier_type > x)
        {
          this->DiastolicPressureModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::EC50_type& SubstancePharmacodynamicsData::
        EC50 () const
        {
          return this->EC50_.get ();
        }

        SubstancePharmacodynamicsData::EC50_type& SubstancePharmacodynamicsData::
        EC50 ()
        {
          return this->EC50_.get ();
        }

        void SubstancePharmacodynamicsData::
        EC50 (const EC50_type& x)
        {
          this->EC50_.set (x);
        }

        void SubstancePharmacodynamicsData::
        EC50 (::std::unique_ptr< EC50_type > x)
        {
          this->EC50_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::EMaxShapeParameter_type& SubstancePharmacodynamicsData::
        EMaxShapeParameter () const
        {
          return this->EMaxShapeParameter_.get ();
        }

        SubstancePharmacodynamicsData::EMaxShapeParameter_type& SubstancePharmacodynamicsData::
        EMaxShapeParameter ()
        {
          return this->EMaxShapeParameter_.get ();
        }

        void SubstancePharmacodynamicsData::
        EMaxShapeParameter (const EMaxShapeParameter_type& x)
        {
          this->EMaxShapeParameter_.set (x);
        }

        void SubstancePharmacodynamicsData::
        EMaxShapeParameter (::std::unique_ptr< EMaxShapeParameter_type > x)
        {
          this->EMaxShapeParameter_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::HeartRateModifier_type& SubstancePharmacodynamicsData::
        HeartRateModifier () const
        {
          return this->HeartRateModifier_.get ();
        }

        SubstancePharmacodynamicsData::HeartRateModifier_type& SubstancePharmacodynamicsData::
        HeartRateModifier ()
        {
          return this->HeartRateModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        HeartRateModifier (const HeartRateModifier_type& x)
        {
          this->HeartRateModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        HeartRateModifier (::std::unique_ptr< HeartRateModifier_type > x)
        {
          this->HeartRateModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::NeuromuscularBlock_type& SubstancePharmacodynamicsData::
        NeuromuscularBlock () const
        {
          return this->NeuromuscularBlock_.get ();
        }

        SubstancePharmacodynamicsData::NeuromuscularBlock_type& SubstancePharmacodynamicsData::
        NeuromuscularBlock ()
        {
          return this->NeuromuscularBlock_.get ();
        }

        void SubstancePharmacodynamicsData::
        NeuromuscularBlock (const NeuromuscularBlock_type& x)
        {
          this->NeuromuscularBlock_.set (x);
        }

        void SubstancePharmacodynamicsData::
        NeuromuscularBlock (::std::unique_ptr< NeuromuscularBlock_type > x)
        {
          this->NeuromuscularBlock_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::PupillaryResponse_type& SubstancePharmacodynamicsData::
        PupillaryResponse () const
        {
          return this->PupillaryResponse_.get ();
        }

        SubstancePharmacodynamicsData::PupillaryResponse_type& SubstancePharmacodynamicsData::
        PupillaryResponse ()
        {
          return this->PupillaryResponse_.get ();
        }

        void SubstancePharmacodynamicsData::
        PupillaryResponse (const PupillaryResponse_type& x)
        {
          this->PupillaryResponse_.set (x);
        }

        void SubstancePharmacodynamicsData::
        PupillaryResponse (::std::unique_ptr< PupillaryResponse_type > x)
        {
          this->PupillaryResponse_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::RespirationRateModifier_type& SubstancePharmacodynamicsData::
        RespirationRateModifier () const
        {
          return this->RespirationRateModifier_.get ();
        }

        SubstancePharmacodynamicsData::RespirationRateModifier_type& SubstancePharmacodynamicsData::
        RespirationRateModifier ()
        {
          return this->RespirationRateModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        RespirationRateModifier (const RespirationRateModifier_type& x)
        {
          this->RespirationRateModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        RespirationRateModifier (::std::unique_ptr< RespirationRateModifier_type > x)
        {
          this->RespirationRateModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::Sedation_type& SubstancePharmacodynamicsData::
        Sedation () const
        {
          return this->Sedation_.get ();
        }

        SubstancePharmacodynamicsData::Sedation_type& SubstancePharmacodynamicsData::
        Sedation ()
        {
          return this->Sedation_.get ();
        }

        void SubstancePharmacodynamicsData::
        Sedation (const Sedation_type& x)
        {
          this->Sedation_.set (x);
        }

        void SubstancePharmacodynamicsData::
        Sedation (::std::unique_ptr< Sedation_type > x)
        {
          this->Sedation_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::SystolicPressureModifier_type& SubstancePharmacodynamicsData::
        SystolicPressureModifier () const
        {
          return this->SystolicPressureModifier_.get ();
        }

        SubstancePharmacodynamicsData::SystolicPressureModifier_type& SubstancePharmacodynamicsData::
        SystolicPressureModifier ()
        {
          return this->SystolicPressureModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        SystolicPressureModifier (const SystolicPressureModifier_type& x)
        {
          this->SystolicPressureModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        SystolicPressureModifier (::std::unique_ptr< SystolicPressureModifier_type > x)
        {
          this->SystolicPressureModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::TidalVolumeModifier_type& SubstancePharmacodynamicsData::
        TidalVolumeModifier () const
        {
          return this->TidalVolumeModifier_.get ();
        }

        SubstancePharmacodynamicsData::TidalVolumeModifier_type& SubstancePharmacodynamicsData::
        TidalVolumeModifier ()
        {
          return this->TidalVolumeModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        TidalVolumeModifier (const TidalVolumeModifier_type& x)
        {
          this->TidalVolumeModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        TidalVolumeModifier (::std::unique_ptr< TidalVolumeModifier_type > x)
        {
          this->TidalVolumeModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::TubularPermeabilityModifier_type& SubstancePharmacodynamicsData::
        TubularPermeabilityModifier () const
        {
          return this->TubularPermeabilityModifier_.get ();
        }

        SubstancePharmacodynamicsData::TubularPermeabilityModifier_type& SubstancePharmacodynamicsData::
        TubularPermeabilityModifier ()
        {
          return this->TubularPermeabilityModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        TubularPermeabilityModifier (const TubularPermeabilityModifier_type& x)
        {
          this->TubularPermeabilityModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        TubularPermeabilityModifier (::std::unique_ptr< TubularPermeabilityModifier_type > x)
        {
          this->TubularPermeabilityModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::CentralNervousModifier_type& SubstancePharmacodynamicsData::
        CentralNervousModifier () const
        {
          return this->CentralNervousModifier_.get ();
        }

        SubstancePharmacodynamicsData::CentralNervousModifier_type& SubstancePharmacodynamicsData::
        CentralNervousModifier ()
        {
          return this->CentralNervousModifier_.get ();
        }

        void SubstancePharmacodynamicsData::
        CentralNervousModifier (const CentralNervousModifier_type& x)
        {
          this->CentralNervousModifier_.set (x);
        }

        void SubstancePharmacodynamicsData::
        CentralNervousModifier (::std::unique_ptr< CentralNervousModifier_type > x)
        {
          this->CentralNervousModifier_.set (std::move (x));
        }

        const SubstancePharmacodynamicsData::EffectSiteRateConstant_type& SubstancePharmacodynamicsData::
        EffectSiteRateConstant () const
        {
          return this->EffectSiteRateConstant_.get ();
        }

        SubstancePharmacodynamicsData::EffectSiteRateConstant_type& SubstancePharmacodynamicsData::
        EffectSiteRateConstant ()
        {
          return this->EffectSiteRateConstant_.get ();
        }

        void SubstancePharmacodynamicsData::
        EffectSiteRateConstant (const EffectSiteRateConstant_type& x)
        {
          this->EffectSiteRateConstant_.set (x);
        }

        void SubstancePharmacodynamicsData::
        EffectSiteRateConstant (::std::unique_ptr< EffectSiteRateConstant_type > x)
        {
          this->EffectSiteRateConstant_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstancePharmacodynamicsData
        //

        SubstancePharmacodynamicsData::
        SubstancePharmacodynamicsData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Bronchodilation_ (this),
          DiastolicPressureModifier_ (this),
          EC50_ (this),
          EMaxShapeParameter_ (this),
          HeartRateModifier_ (this),
          NeuromuscularBlock_ (this),
          PupillaryResponse_ (this),
          RespirationRateModifier_ (this),
          Sedation_ (this),
          SystolicPressureModifier_ (this),
          TidalVolumeModifier_ (this),
          TubularPermeabilityModifier_ (this),
          CentralNervousModifier_ (this),
          EffectSiteRateConstant_ (this)
        {
        }

        SubstancePharmacodynamicsData::
        SubstancePharmacodynamicsData (const Bronchodilation_type& Bronchodilation,
                                       const DiastolicPressureModifier_type& DiastolicPressureModifier,
                                       const EC50_type& EC50,
                                       const EMaxShapeParameter_type& EMaxShapeParameter,
                                       const HeartRateModifier_type& HeartRateModifier,
                                       const NeuromuscularBlock_type& NeuromuscularBlock,
                                       const PupillaryResponse_type& PupillaryResponse,
                                       const RespirationRateModifier_type& RespirationRateModifier,
                                       const Sedation_type& Sedation,
                                       const SystolicPressureModifier_type& SystolicPressureModifier,
                                       const TidalVolumeModifier_type& TidalVolumeModifier,
                                       const TubularPermeabilityModifier_type& TubularPermeabilityModifier,
                                       const CentralNervousModifier_type& CentralNervousModifier,
                                       const EffectSiteRateConstant_type& EffectSiteRateConstant)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Bronchodilation_ (Bronchodilation, this),
          DiastolicPressureModifier_ (DiastolicPressureModifier, this),
          EC50_ (EC50, this),
          EMaxShapeParameter_ (EMaxShapeParameter, this),
          HeartRateModifier_ (HeartRateModifier, this),
          NeuromuscularBlock_ (NeuromuscularBlock, this),
          PupillaryResponse_ (PupillaryResponse, this),
          RespirationRateModifier_ (RespirationRateModifier, this),
          Sedation_ (Sedation, this),
          SystolicPressureModifier_ (SystolicPressureModifier, this),
          TidalVolumeModifier_ (TidalVolumeModifier, this),
          TubularPermeabilityModifier_ (TubularPermeabilityModifier, this),
          CentralNervousModifier_ (CentralNervousModifier, this),
          EffectSiteRateConstant_ (EffectSiteRateConstant, this)
        {
        }

        SubstancePharmacodynamicsData::
        SubstancePharmacodynamicsData (::std::unique_ptr< Bronchodilation_type > Bronchodilation,
                                       ::std::unique_ptr< DiastolicPressureModifier_type > DiastolicPressureModifier,
                                       ::std::unique_ptr< EC50_type > EC50,
                                       ::std::unique_ptr< EMaxShapeParameter_type > EMaxShapeParameter,
                                       ::std::unique_ptr< HeartRateModifier_type > HeartRateModifier,
                                       ::std::unique_ptr< NeuromuscularBlock_type > NeuromuscularBlock,
                                       ::std::unique_ptr< PupillaryResponse_type > PupillaryResponse,
                                       ::std::unique_ptr< RespirationRateModifier_type > RespirationRateModifier,
                                       ::std::unique_ptr< Sedation_type > Sedation,
                                       ::std::unique_ptr< SystolicPressureModifier_type > SystolicPressureModifier,
                                       ::std::unique_ptr< TidalVolumeModifier_type > TidalVolumeModifier,
                                       ::std::unique_ptr< TubularPermeabilityModifier_type > TubularPermeabilityModifier,
                                       ::std::unique_ptr< CentralNervousModifier_type > CentralNervousModifier,
                                       ::std::unique_ptr< EffectSiteRateConstant_type > EffectSiteRateConstant)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Bronchodilation_ (std::move (Bronchodilation), this),
          DiastolicPressureModifier_ (std::move (DiastolicPressureModifier), this),
          EC50_ (std::move (EC50), this),
          EMaxShapeParameter_ (std::move (EMaxShapeParameter), this),
          HeartRateModifier_ (std::move (HeartRateModifier), this),
          NeuromuscularBlock_ (std::move (NeuromuscularBlock), this),
          PupillaryResponse_ (std::move (PupillaryResponse), this),
          RespirationRateModifier_ (std::move (RespirationRateModifier), this),
          Sedation_ (std::move (Sedation), this),
          SystolicPressureModifier_ (std::move (SystolicPressureModifier), this),
          TidalVolumeModifier_ (std::move (TidalVolumeModifier), this),
          TubularPermeabilityModifier_ (std::move (TubularPermeabilityModifier), this),
          CentralNervousModifier_ (std::move (CentralNervousModifier), this),
          EffectSiteRateConstant_ (std::move (EffectSiteRateConstant), this)
        {
        }

        SubstancePharmacodynamicsData::
        SubstancePharmacodynamicsData (const SubstancePharmacodynamicsData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Bronchodilation_ (x.Bronchodilation_, f, this),
          DiastolicPressureModifier_ (x.DiastolicPressureModifier_, f, this),
          EC50_ (x.EC50_, f, this),
          EMaxShapeParameter_ (x.EMaxShapeParameter_, f, this),
          HeartRateModifier_ (x.HeartRateModifier_, f, this),
          NeuromuscularBlock_ (x.NeuromuscularBlock_, f, this),
          PupillaryResponse_ (x.PupillaryResponse_, f, this),
          RespirationRateModifier_ (x.RespirationRateModifier_, f, this),
          Sedation_ (x.Sedation_, f, this),
          SystolicPressureModifier_ (x.SystolicPressureModifier_, f, this),
          TidalVolumeModifier_ (x.TidalVolumeModifier_, f, this),
          TubularPermeabilityModifier_ (x.TubularPermeabilityModifier_, f, this),
          CentralNervousModifier_ (x.CentralNervousModifier_, f, this),
          EffectSiteRateConstant_ (x.EffectSiteRateConstant_, f, this)
        {
        }

        SubstancePharmacodynamicsData::
        SubstancePharmacodynamicsData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Bronchodilation_ (this),
          DiastolicPressureModifier_ (this),
          EC50_ (this),
          EMaxShapeParameter_ (this),
          HeartRateModifier_ (this),
          NeuromuscularBlock_ (this),
          PupillaryResponse_ (this),
          RespirationRateModifier_ (this),
          Sedation_ (this),
          SystolicPressureModifier_ (this),
          TidalVolumeModifier_ (this),
          TubularPermeabilityModifier_ (this),
          CentralNervousModifier_ (this),
          EffectSiteRateConstant_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstancePharmacodynamicsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Bronchodilation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Bronchodilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Bronchodilation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Bronchodilation_.present ())
                {
                  ::std::unique_ptr< Bronchodilation_type > r (
                    dynamic_cast< Bronchodilation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Bronchodilation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DiastolicPressureModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DiastolicPressureModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DiastolicPressureModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!DiastolicPressureModifier_.present ())
                {
                  ::std::unique_ptr< DiastolicPressureModifier_type > r (
                    dynamic_cast< DiastolicPressureModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DiastolicPressureModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EC50
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EC50",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EC50_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!EC50_.present ())
                {
                  ::std::unique_ptr< EC50_type > r (
                    dynamic_cast< EC50_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EC50_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EMaxShapeParameter
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EMaxShapeParameter",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EMaxShapeParameter_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!EMaxShapeParameter_.present ())
                {
                  ::std::unique_ptr< EMaxShapeParameter_type > r (
                    dynamic_cast< EMaxShapeParameter_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EMaxShapeParameter_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRateModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!HeartRateModifier_.present ())
                {
                  ::std::unique_ptr< HeartRateModifier_type > r (
                    dynamic_cast< HeartRateModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeuromuscularBlock
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeuromuscularBlock",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeuromuscularBlock_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!NeuromuscularBlock_.present ())
                {
                  ::std::unique_ptr< NeuromuscularBlock_type > r (
                    dynamic_cast< NeuromuscularBlock_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeuromuscularBlock_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!PupillaryResponse_.present ())
                {
                  ::std::unique_ptr< PupillaryResponse_type > r (
                    dynamic_cast< PupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRateModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRateModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRateModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RespirationRateModifier_.present ())
                {
                  ::std::unique_ptr< RespirationRateModifier_type > r (
                    dynamic_cast< RespirationRateModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRateModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Sedation
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Sedation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Sedation_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Sedation_.present ())
                {
                  ::std::unique_ptr< Sedation_type > r (
                    dynamic_cast< Sedation_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Sedation_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystolicPressureModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystolicPressureModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystolicPressureModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SystolicPressureModifier_.present ())
                {
                  ::std::unique_ptr< SystolicPressureModifier_type > r (
                    dynamic_cast< SystolicPressureModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystolicPressureModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolumeModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolumeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolumeModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TidalVolumeModifier_.present ())
                {
                  ::std::unique_ptr< TidalVolumeModifier_type > r (
                    dynamic_cast< TidalVolumeModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolumeModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TubularPermeabilityModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TubularPermeabilityModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TubularPermeabilityModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!TubularPermeabilityModifier_.present ())
                {
                  ::std::unique_ptr< TubularPermeabilityModifier_type > r (
                    dynamic_cast< TubularPermeabilityModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TubularPermeabilityModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralNervousModifier
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralNervousModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralNervousModifier_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CentralNervousModifier_.present ())
                {
                  ::std::unique_ptr< CentralNervousModifier_type > r (
                    dynamic_cast< CentralNervousModifier_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralNervousModifier_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EffectSiteRateConstant
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EffectSiteRateConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EffectSiteRateConstant_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!EffectSiteRateConstant_.present ())
                {
                  ::std::unique_ptr< EffectSiteRateConstant_type > r (
                    dynamic_cast< EffectSiteRateConstant_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EffectSiteRateConstant_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Bronchodilation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Bronchodilation",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DiastolicPressureModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DiastolicPressureModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!EC50_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EC50",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!EMaxShapeParameter_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EMaxShapeParameter",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!HeartRateModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HeartRateModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NeuromuscularBlock_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NeuromuscularBlock",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PupillaryResponse_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PupillaryResponse",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RespirationRateModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RespirationRateModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Sedation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Sedation",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SystolicPressureModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SystolicPressureModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TidalVolumeModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TidalVolumeModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TubularPermeabilityModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TubularPermeabilityModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CentralNervousModifier_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CentralNervousModifier",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!EffectSiteRateConstant_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EffectSiteRateConstant",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstancePharmacodynamicsData* SubstancePharmacodynamicsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstancePharmacodynamicsData (*this, f, c);
        }

        SubstancePharmacodynamicsData& SubstancePharmacodynamicsData::
        operator= (const SubstancePharmacodynamicsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Bronchodilation_ = x.Bronchodilation_;
            this->DiastolicPressureModifier_ = x.DiastolicPressureModifier_;
            this->EC50_ = x.EC50_;
            this->EMaxShapeParameter_ = x.EMaxShapeParameter_;
            this->HeartRateModifier_ = x.HeartRateModifier_;
            this->NeuromuscularBlock_ = x.NeuromuscularBlock_;
            this->PupillaryResponse_ = x.PupillaryResponse_;
            this->RespirationRateModifier_ = x.RespirationRateModifier_;
            this->Sedation_ = x.Sedation_;
            this->SystolicPressureModifier_ = x.SystolicPressureModifier_;
            this->TidalVolumeModifier_ = x.TidalVolumeModifier_;
            this->TubularPermeabilityModifier_ = x.TubularPermeabilityModifier_;
            this->CentralNervousModifier_ = x.CentralNervousModifier_;
            this->EffectSiteRateConstant_ = x.EffectSiteRateConstant_;
          }

          return *this;
        }

        SubstancePharmacodynamicsData::
        ~SubstancePharmacodynamicsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstancePharmacodynamicsData >
        _xsd_SubstancePharmacodynamicsData_type_factory_init (
          "SubstancePharmacodynamicsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const SubstancePharmacodynamicsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Bronchodilation: ";
            om.insert (o, i.Bronchodilation ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "DiastolicPressureModifier: ";
            om.insert (o, i.DiastolicPressureModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "EC50: ";
            om.insert (o, i.EC50 ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "EMaxShapeParameter: ";
            om.insert (o, i.EMaxShapeParameter ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "HeartRateModifier: ";
            om.insert (o, i.HeartRateModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "NeuromuscularBlock: ";
            om.insert (o, i.NeuromuscularBlock ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "PupillaryResponse: ";
            om.insert (o, i.PupillaryResponse ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RespirationRateModifier: ";
            om.insert (o, i.RespirationRateModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Sedation: ";
            om.insert (o, i.Sedation ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SystolicPressureModifier: ";
            om.insert (o, i.SystolicPressureModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TidalVolumeModifier: ";
            om.insert (o, i.TidalVolumeModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "TubularPermeabilityModifier: ";
            om.insert (o, i.TubularPermeabilityModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CentralNervousModifier: ";
            om.insert (o, i.CentralNervousModifier ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "EffectSiteRateConstant: ";
            om.insert (o, i.EffectSiteRateConstant ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstancePharmacodynamicsData >
        _xsd_SubstancePharmacodynamicsData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const SubstancePharmacodynamicsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Bronchodilation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::Bronchodilation_type& x (i.Bronchodilation ());
            if (typeid (SubstancePharmacodynamicsData::Bronchodilation_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Bronchodilation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Bronchodilation",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // DiastolicPressureModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::DiastolicPressureModifier_type& x (i.DiastolicPressureModifier ());
            if (typeid (SubstancePharmacodynamicsData::DiastolicPressureModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "DiastolicPressureModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "DiastolicPressureModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // EC50
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::EC50_type& x (i.EC50 ());
            if (typeid (SubstancePharmacodynamicsData::EC50_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "EC50",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "EC50",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // EMaxShapeParameter
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::EMaxShapeParameter_type& x (i.EMaxShapeParameter ());
            if (typeid (SubstancePharmacodynamicsData::EMaxShapeParameter_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "EMaxShapeParameter",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "EMaxShapeParameter",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // HeartRateModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::HeartRateModifier_type& x (i.HeartRateModifier ());
            if (typeid (SubstancePharmacodynamicsData::HeartRateModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "HeartRateModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "HeartRateModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // NeuromuscularBlock
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::NeuromuscularBlock_type& x (i.NeuromuscularBlock ());
            if (typeid (SubstancePharmacodynamicsData::NeuromuscularBlock_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "NeuromuscularBlock",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "NeuromuscularBlock",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // PupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::PupillaryResponse_type& x (i.PupillaryResponse ());
            if (typeid (SubstancePharmacodynamicsData::PupillaryResponse_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "PupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "PupillaryResponse",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RespirationRateModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::RespirationRateModifier_type& x (i.RespirationRateModifier ());
            if (typeid (SubstancePharmacodynamicsData::RespirationRateModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RespirationRateModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RespirationRateModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Sedation
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::Sedation_type& x (i.Sedation ());
            if (typeid (SubstancePharmacodynamicsData::Sedation_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Sedation",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Sedation",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SystolicPressureModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::SystolicPressureModifier_type& x (i.SystolicPressureModifier ());
            if (typeid (SubstancePharmacodynamicsData::SystolicPressureModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SystolicPressureModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SystolicPressureModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TidalVolumeModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::TidalVolumeModifier_type& x (i.TidalVolumeModifier ());
            if (typeid (SubstancePharmacodynamicsData::TidalVolumeModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TidalVolumeModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TidalVolumeModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // TubularPermeabilityModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::TubularPermeabilityModifier_type& x (i.TubularPermeabilityModifier ());
            if (typeid (SubstancePharmacodynamicsData::TubularPermeabilityModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "TubularPermeabilityModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "TubularPermeabilityModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CentralNervousModifier
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::CentralNervousModifier_type& x (i.CentralNervousModifier ());
            if (typeid (SubstancePharmacodynamicsData::CentralNervousModifier_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CentralNervousModifier",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CentralNervousModifier",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // EffectSiteRateConstant
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePharmacodynamicsData::EffectSiteRateConstant_type& x (i.EffectSiteRateConstant ());
            if (typeid (SubstancePharmacodynamicsData::EffectSiteRateConstant_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "EffectSiteRateConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "EffectSiteRateConstant",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstancePharmacodynamicsData >
        _xsd_SubstancePharmacodynamicsData_type_serializer_init (
          "SubstancePharmacodynamicsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


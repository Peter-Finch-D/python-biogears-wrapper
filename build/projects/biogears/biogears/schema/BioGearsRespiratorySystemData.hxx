// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BioGearsRespiratorySystemData.xsd.
 */

#ifndef BIO_GEARS_RESPIRATORY_SYSTEM_DATA_HXX
#define BIO_GEARS_RESPIRATORY_SYSTEM_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BioGearsRespiratorySystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "RespiratorySystemData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class RunningAverageData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BioGearsRespiratorySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsRespiratorySystemData: public ::mil::tatrc::physiology::datamodel::RespiratorySystemData
        {
          public:
          /**
           * @name InitialExpiratoryReserveVolume_L
           *
           * @brief Accessor and modifier functions for the %InitialExpiratoryReserveVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialExpiratoryReserveVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialExpiratoryReserveVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialExpiratoryReserveVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialExpiratoryReserveVolume_L_type&
          InitialExpiratoryReserveVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialExpiratoryReserveVolume_L_type&
          InitialExpiratoryReserveVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialExpiratoryReserveVolume_L (const InitialExpiratoryReserveVolume_L_type& x);

          //@}

          /**
           * @name InitialFunctionalResidualCapacity_L
           *
           * @brief Accessor and modifier functions for the %InitialFunctionalResidualCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialFunctionalResidualCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialFunctionalResidualCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialFunctionalResidualCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialFunctionalResidualCapacity_L_type&
          InitialFunctionalResidualCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialFunctionalResidualCapacity_L_type&
          InitialFunctionalResidualCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialFunctionalResidualCapacity_L (const InitialFunctionalResidualCapacity_L_type& x);

          //@}

          /**
           * @name InitialInspiratoryCapacity_L
           *
           * @brief Accessor and modifier functions for the %InitialInspiratoryCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialInspiratoryCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialInspiratoryCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialInspiratoryCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialInspiratoryCapacity_L_type&
          InitialInspiratoryCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialInspiratoryCapacity_L_type&
          InitialInspiratoryCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialInspiratoryCapacity_L (const InitialInspiratoryCapacity_L_type& x);

          //@}

          /**
           * @name InitialResidualVolume_L
           *
           * @brief Accessor and modifier functions for the %InitialResidualVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InitialResidualVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InitialResidualVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InitialResidualVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InitialResidualVolume_L_type&
          InitialResidualVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InitialResidualVolume_L_type&
          InitialResidualVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InitialResidualVolume_L (const InitialResidualVolume_L_type& x);

          //@}

          /**
           * @name NotBreathing
           *
           * @brief Accessor and modifier functions for the %NotBreathing
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean NotBreathing_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NotBreathing_type, char > NotBreathing_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NotBreathing_type&
          NotBreathing () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NotBreathing_type&
          NotBreathing ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NotBreathing (const NotBreathing_type& x);

          //@}

          /**
           * @name TopBreathTotalVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathTotalVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathTotalVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathTotalVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathTotalVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathTotalVolume_L_type&
          TopBreathTotalVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathTotalVolume_L_type&
          TopBreathTotalVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathTotalVolume_L (const TopBreathTotalVolume_L_type& x);

          //@}

          /**
           * @name TopBreathAlveoliVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathAlveoliVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathAlveoliVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathAlveoliVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathAlveoliVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathAlveoliVolume_L_type&
          TopBreathAlveoliVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathAlveoliVolume_L_type&
          TopBreathAlveoliVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathAlveoliVolume_L (const TopBreathAlveoliVolume_L_type& x);

          //@}

          /**
           * @name TopBreathDeadSpaceVolume_L
           *
           * @brief Accessor and modifier functions for the %TopBreathDeadSpaceVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathDeadSpaceVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathDeadSpaceVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathDeadSpaceVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathDeadSpaceVolume_L_type&
          TopBreathDeadSpaceVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathDeadSpaceVolume_L_type&
          TopBreathDeadSpaceVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathDeadSpaceVolume_L (const TopBreathDeadSpaceVolume_L_type& x);

          //@}

          /**
           * @name TopBreathPleuralPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %TopBreathPleuralPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ TopBreathPleuralPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TopBreathPleuralPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > TopBreathPleuralPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TopBreathPleuralPressure_cmH2O_type&
          TopBreathPleuralPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TopBreathPleuralPressure_cmH2O_type&
          TopBreathPleuralPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TopBreathPleuralPressure_cmH2O (const TopBreathPleuralPressure_cmH2O_type& x);

          //@}

          /**
           * @name LastCardiacCycleBloodPH
           *
           * @brief Accessor and modifier functions for the %LastCardiacCycleBloodPH
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LastCardiacCycleBloodPH_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LastCardiacCycleBloodPH_type, char, ::xsd::cxx::tree::schema_type::double_ > LastCardiacCycleBloodPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LastCardiacCycleBloodPH_type&
          LastCardiacCycleBloodPH () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LastCardiacCycleBloodPH_type&
          LastCardiacCycleBloodPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LastCardiacCycleBloodPH (const LastCardiacCycleBloodPH_type& x);

          //@}

          /**
           * @name PreviousTotalLungVolume_L
           *
           * @brief Accessor and modifier functions for the %PreviousTotalLungVolume_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PreviousTotalLungVolume_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PreviousTotalLungVolume_L_type, char, ::xsd::cxx::tree::schema_type::double_ > PreviousTotalLungVolume_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PreviousTotalLungVolume_L_type&
          PreviousTotalLungVolume_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PreviousTotalLungVolume_L_type&
          PreviousTotalLungVolume_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PreviousTotalLungVolume_L (const PreviousTotalLungVolume_L_type& x);

          //@}

          /**
           * @name BloodPHRunningAverage
           *
           * @brief Accessor and modifier functions for the %BloodPHRunningAverage
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData BloodPHRunningAverage_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodPHRunningAverage_type, char > BloodPHRunningAverage_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BloodPHRunningAverage_type&
          BloodPHRunningAverage () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BloodPHRunningAverage_type&
          BloodPHRunningAverage ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodPHRunningAverage (const BloodPHRunningAverage_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          BloodPHRunningAverage (::std::unique_ptr< BloodPHRunningAverage_type > p);

          //@}

          /**
           * @name BreathingCycle
           *
           * @brief Accessor and modifier functions for the %BreathingCycle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean BreathingCycle_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathingCycle_type, char > BreathingCycle_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathingCycle_type&
          BreathingCycle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathingCycle_type&
          BreathingCycle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathingCycle (const BreathingCycle_type& x);

          //@}

          /**
           * @name ArterialO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialO2PartialPressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialO2PartialPressure_mmHg_type&
          ArterialO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialO2PartialPressure_mmHg_type&
          ArterialO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialO2PartialPressure_mmHg (const ArterialO2PartialPressure_mmHg_type& x);

          //@}

          /**
           * @name ArterialCO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ArterialCO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCO2PartialPressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > ArterialCO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCO2PartialPressure_mmHg_type&
          ArterialCO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCO2PartialPressure_mmHg_type&
          ArterialCO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCO2PartialPressure_mmHg (const ArterialCO2PartialPressure_mmHg_type& x);

          //@}

          /**
           * @name BreathingCycleTime_s
           *
           * @brief Accessor and modifier functions for the %BreathingCycleTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ BreathingCycleTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathingCycleTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > BreathingCycleTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathingCycleTime_s_type&
          BreathingCycleTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathingCycleTime_s_type&
          BreathingCycleTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathingCycleTime_s (const BreathingCycleTime_s_type& x);

          //@}

          /**
           * @name BreathTimeExhale_min
           *
           * @brief Accessor and modifier functions for the %BreathTimeExhale_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ BreathTimeExhale_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BreathTimeExhale_min_type, char, ::xsd::cxx::tree::schema_type::double_ > BreathTimeExhale_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BreathTimeExhale_min_type&
          BreathTimeExhale_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BreathTimeExhale_min_type&
          BreathTimeExhale_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BreathTimeExhale_min (const BreathTimeExhale_min_type& x);

          //@}

          /**
           * @name DefaultDrivePressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %DefaultDrivePressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DefaultDrivePressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultDrivePressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DefaultDrivePressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DefaultDrivePressure_cmH2O_type&
          DefaultDrivePressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DefaultDrivePressure_cmH2O_type&
          DefaultDrivePressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DefaultDrivePressure_cmH2O (const DefaultDrivePressure_cmH2O_type& x);

          //@}

          /**
           * @name DriverPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %DriverPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DriverPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DriverPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DriverPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DriverPressure_cmH2O_type&
          DriverPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DriverPressure_cmH2O_type&
          DriverPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DriverPressure_cmH2O (const DriverPressure_cmH2O_type& x);

          //@}

          /**
           * @name DriverPressureMin_cmH2O
           *
           * @brief Accessor and modifier functions for the %DriverPressureMin_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ DriverPressureMin_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DriverPressureMin_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > DriverPressureMin_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DriverPressureMin_cmH2O_type&
          DriverPressureMin_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DriverPressureMin_cmH2O_type&
          DriverPressureMin_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DriverPressureMin_cmH2O (const DriverPressureMin_cmH2O_type& x);

          //@}

          /**
           * @name ElapsedBreathingCycleTime_min
           *
           * @brief Accessor and modifier functions for the %ElapsedBreathingCycleTime_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ElapsedBreathingCycleTime_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElapsedBreathingCycleTime_min_type, char, ::xsd::cxx::tree::schema_type::double_ > ElapsedBreathingCycleTime_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElapsedBreathingCycleTime_min_type&
          ElapsedBreathingCycleTime_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElapsedBreathingCycleTime_min_type&
          ElapsedBreathingCycleTime_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ElapsedBreathingCycleTime_min (const ElapsedBreathingCycleTime_min_type& x);

          //@}

          /**
           * @name IEscaleFactor
           *
           * @brief Accessor and modifier functions for the %IEscaleFactor
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ IEscaleFactor_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IEscaleFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > IEscaleFactor_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IEscaleFactor_type&
          IEscaleFactor () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IEscaleFactor_type&
          IEscaleFactor ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          IEscaleFactor (const IEscaleFactor_type& x);

          //@}

          /**
           * @name InstantaneousFunctionalResidualCapacity_L
           *
           * @brief Accessor and modifier functions for the %InstantaneousFunctionalResidualCapacity_L
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InstantaneousFunctionalResidualCapacity_L_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InstantaneousFunctionalResidualCapacity_L_type, char, ::xsd::cxx::tree::schema_type::double_ > InstantaneousFunctionalResidualCapacity_L_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InstantaneousFunctionalResidualCapacity_L_type&
          InstantaneousFunctionalResidualCapacity_L () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InstantaneousFunctionalResidualCapacity_L_type&
          InstantaneousFunctionalResidualCapacity_L ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InstantaneousFunctionalResidualCapacity_L (const InstantaneousFunctionalResidualCapacity_L_type& x);

          //@}

          /**
           * @name MaxDriverPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %MaxDriverPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ MaxDriverPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaxDriverPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > MaxDriverPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MaxDriverPressure_cmH2O_type&
          MaxDriverPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MaxDriverPressure_cmH2O_type&
          MaxDriverPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaxDriverPressure_cmH2O (const MaxDriverPressure_cmH2O_type& x);

          //@}

          /**
           * @name PeakRespiratoryDrivePressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %PeakRespiratoryDrivePressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PeakRespiratoryDrivePressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeakRespiratoryDrivePressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > PeakRespiratoryDrivePressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PeakRespiratoryDrivePressure_cmH2O_type&
          PeakRespiratoryDrivePressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PeakRespiratoryDrivePressure_cmH2O_type&
          PeakRespiratoryDrivePressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PeakRespiratoryDrivePressure_cmH2O (const PeakRespiratoryDrivePressure_cmH2O_type& x);

          //@}

          /**
           * @name PreviousTargetAlveolarVentilation_L_Per_min
           *
           * @brief Accessor and modifier functions for the %PreviousTargetAlveolarVentilation_L_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ PreviousTargetAlveolarVentilation_L_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PreviousTargetAlveolarVentilation_L_Per_min_type, char, ::xsd::cxx::tree::schema_type::double_ > PreviousTargetAlveolarVentilation_L_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PreviousTargetAlveolarVentilation_L_Per_min_type&
          PreviousTargetAlveolarVentilation_L_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PreviousTargetAlveolarVentilation_L_Per_min_type&
          PreviousTargetAlveolarVentilation_L_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PreviousTargetAlveolarVentilation_L_Per_min (const PreviousTargetAlveolarVentilation_L_Per_min_type& x);

          //@}

          /**
           * @name VentilationFrequency_Per_min
           *
           * @brief Accessor and modifier functions for the %VentilationFrequency_Per_min
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ VentilationFrequency_Per_min_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilationFrequency_Per_min_type, char, ::xsd::cxx::tree::schema_type::double_ > VentilationFrequency_Per_min_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VentilationFrequency_Per_min_type&
          VentilationFrequency_Per_min () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VentilationFrequency_Per_min_type&
          VentilationFrequency_Per_min ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilationFrequency_Per_min (const VentilationFrequency_Per_min_type& x);

          //@}

          /**
           * @name VentilationToTidalVolumeSlope
           *
           * @brief Accessor and modifier functions for the %VentilationToTidalVolumeSlope
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ VentilationToTidalVolumeSlope_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VentilationToTidalVolumeSlope_type, char, ::xsd::cxx::tree::schema_type::double_ > VentilationToTidalVolumeSlope_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VentilationToTidalVolumeSlope_type&
          VentilationToTidalVolumeSlope () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VentilationToTidalVolumeSlope_type&
          VentilationToTidalVolumeSlope ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VentilationToTidalVolumeSlope (const VentilationToTidalVolumeSlope_type& x);

          //@}

          /**
           * @name ArterialO2RunningAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialO2RunningAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialO2RunningAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialO2RunningAverage_mmHg_type, char > ArterialO2RunningAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialO2RunningAverage_mmHg_type&
          ArterialO2RunningAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialO2RunningAverage_mmHg_type&
          ArterialO2RunningAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialO2RunningAverage_mmHg (const ArterialO2RunningAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialO2RunningAverage_mmHg (::std::unique_ptr< ArterialO2RunningAverage_mmHg_type > p);

          //@}

          /**
           * @name ArterialCO2RunningAverage_mmHg
           *
           * @brief Accessor and modifier functions for the %ArterialCO2RunningAverage_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData ArterialCO2RunningAverage_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCO2RunningAverage_mmHg_type, char > ArterialCO2RunningAverage_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ArterialCO2RunningAverage_mmHg_type&
          ArterialCO2RunningAverage_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ArterialCO2RunningAverage_mmHg_type&
          ArterialCO2RunningAverage_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCO2RunningAverage_mmHg (const ArterialCO2RunningAverage_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          ArterialCO2RunningAverage_mmHg (::std::unique_ptr< ArterialCO2RunningAverage_mmHg_type > p);

          //@}

          /**
           * @name ConsciousBreathing
           *
           * @brief Accessor and modifier functions for the %ConsciousBreathing
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean ConsciousBreathing_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousBreathing_type, char > ConsciousBreathing_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousBreathing_type&
          ConsciousBreathing () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousBreathing_type&
          ConsciousBreathing ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousBreathing (const ConsciousBreathing_type& x);

          //@}

          /**
           * @name ConsciousRespirationPeriod_s
           *
           * @brief Accessor and modifier functions for the %ConsciousRespirationPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousRespirationPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousRespirationPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousRespirationPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousRespirationPeriod_s_type&
          ConsciousRespirationPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousRespirationPeriod_s_type&
          ConsciousRespirationPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousRespirationPeriod_s (const ConsciousRespirationPeriod_s_type& x);

          //@}

          /**
           * @name ConsciousRespirationRemainingPeriod_s
           *
           * @brief Accessor and modifier functions for the %ConsciousRespirationRemainingPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousRespirationRemainingPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousRespirationRemainingPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousRespirationRemainingPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousRespirationRemainingPeriod_s_type&
          ConsciousRespirationRemainingPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousRespirationRemainingPeriod_s_type&
          ConsciousRespirationRemainingPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousRespirationRemainingPeriod_s (const ConsciousRespirationRemainingPeriod_s_type& x);

          //@}

          /**
           * @name ExpiratoryReserveVolumeFraction
           *
           * @brief Accessor and modifier functions for the %ExpiratoryReserveVolumeFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ExpiratoryReserveVolumeFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExpiratoryReserveVolumeFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > ExpiratoryReserveVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExpiratoryReserveVolumeFraction_type&
          ExpiratoryReserveVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x);

          //@}

          /**
           * @name InspiratoryCapacityFraction
           *
           * @brief Accessor and modifier functions for the %InspiratoryCapacityFraction
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ InspiratoryCapacityFraction_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InspiratoryCapacityFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > InspiratoryCapacityFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InspiratoryCapacityFraction_type&
          InspiratoryCapacityFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x);

          //@}

          /**
           * @name ConsciousStartPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %ConsciousStartPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousStartPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousStartPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousStartPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousStartPressure_cmH2O_type&
          ConsciousStartPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousStartPressure_cmH2O_type&
          ConsciousStartPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousStartPressure_cmH2O (const ConsciousStartPressure_cmH2O_type& x);

          //@}

          /**
           * @name ConsciousEndPressure_cmH2O
           *
           * @brief Accessor and modifier functions for the %ConsciousEndPressure_cmH2O
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ ConsciousEndPressure_cmH2O_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConsciousEndPressure_cmH2O_type, char, ::xsd::cxx::tree::schema_type::double_ > ConsciousEndPressure_cmH2O_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConsciousEndPressure_cmH2O_type&
          ConsciousEndPressure_cmH2O () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConsciousEndPressure_cmH2O_type&
          ConsciousEndPressure_cmH2O ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ConsciousEndPressure_cmH2O (const ConsciousEndPressure_cmH2O_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsRespiratorySystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type&,
                                         const InitialFunctionalResidualCapacity_L_type&,
                                         const InitialInspiratoryCapacity_L_type&,
                                         const InitialResidualVolume_L_type&,
                                         const NotBreathing_type&,
                                         const TopBreathTotalVolume_L_type&,
                                         const TopBreathAlveoliVolume_L_type&,
                                         const TopBreathDeadSpaceVolume_L_type&,
                                         const TopBreathPleuralPressure_cmH2O_type&,
                                         const LastCardiacCycleBloodPH_type&,
                                         const PreviousTotalLungVolume_L_type&,
                                         const BloodPHRunningAverage_type&,
                                         const BreathingCycle_type&,
                                         const ArterialO2PartialPressure_mmHg_type&,
                                         const ArterialCO2PartialPressure_mmHg_type&,
                                         const BreathingCycleTime_s_type&,
                                         const BreathTimeExhale_min_type&,
                                         const DefaultDrivePressure_cmH2O_type&,
                                         const DriverPressure_cmH2O_type&,
                                         const DriverPressureMin_cmH2O_type&,
                                         const ElapsedBreathingCycleTime_min_type&,
                                         const IEscaleFactor_type&,
                                         const InstantaneousFunctionalResidualCapacity_L_type&,
                                         const MaxDriverPressure_cmH2O_type&,
                                         const PeakRespiratoryDrivePressure_cmH2O_type&,
                                         const PreviousTargetAlveolarVentilation_L_Per_min_type&,
                                         const VentilationFrequency_Per_min_type&,
                                         const VentilationToTidalVolumeSlope_type&,
                                         const ArterialO2RunningAverage_mmHg_type&,
                                         const ArterialCO2RunningAverage_mmHg_type&,
                                         const ConsciousBreathing_type&,
                                         const ConsciousRespirationPeriod_s_type&,
                                         const ConsciousRespirationRemainingPeriod_s_type&,
                                         const ExpiratoryReserveVolumeFraction_type&,
                                         const InspiratoryCapacityFraction_type&,
                                         const ConsciousStartPressure_cmH2O_type&,
                                         const ConsciousEndPressure_cmH2O_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type&,
                                         const InitialFunctionalResidualCapacity_L_type&,
                                         const InitialInspiratoryCapacity_L_type&,
                                         const InitialResidualVolume_L_type&,
                                         const NotBreathing_type&,
                                         const TopBreathTotalVolume_L_type&,
                                         const TopBreathAlveoliVolume_L_type&,
                                         const TopBreathDeadSpaceVolume_L_type&,
                                         const TopBreathPleuralPressure_cmH2O_type&,
                                         const LastCardiacCycleBloodPH_type&,
                                         const PreviousTotalLungVolume_L_type&,
                                         ::std::unique_ptr< BloodPHRunningAverage_type >,
                                         const BreathingCycle_type&,
                                         const ArterialO2PartialPressure_mmHg_type&,
                                         const ArterialCO2PartialPressure_mmHg_type&,
                                         const BreathingCycleTime_s_type&,
                                         const BreathTimeExhale_min_type&,
                                         const DefaultDrivePressure_cmH2O_type&,
                                         const DriverPressure_cmH2O_type&,
                                         const DriverPressureMin_cmH2O_type&,
                                         const ElapsedBreathingCycleTime_min_type&,
                                         const IEscaleFactor_type&,
                                         const InstantaneousFunctionalResidualCapacity_L_type&,
                                         const MaxDriverPressure_cmH2O_type&,
                                         const PeakRespiratoryDrivePressure_cmH2O_type&,
                                         const PreviousTargetAlveolarVentilation_L_Per_min_type&,
                                         const VentilationFrequency_Per_min_type&,
                                         const VentilationToTidalVolumeSlope_type&,
                                         ::std::unique_ptr< ArterialO2RunningAverage_mmHg_type >,
                                         ::std::unique_ptr< ArterialCO2RunningAverage_mmHg_type >,
                                         const ConsciousBreathing_type&,
                                         const ConsciousRespirationPeriod_s_type&,
                                         const ConsciousRespirationRemainingPeriod_s_type&,
                                         const ExpiratoryReserveVolumeFraction_type&,
                                         const InspiratoryCapacityFraction_type&,
                                         const ConsciousStartPressure_cmH2O_type&,
                                         const ConsciousEndPressure_cmH2O_type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsRespiratorySystemData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRespiratorySystemData (const BioGearsRespiratorySystemData& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsRespiratorySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsRespiratorySystemData&
          operator= (const BioGearsRespiratorySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsRespiratorySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< InitialExpiratoryReserveVolume_L_type > InitialExpiratoryReserveVolume_L_;
          ::xsd::cxx::tree::one< InitialFunctionalResidualCapacity_L_type > InitialFunctionalResidualCapacity_L_;
          ::xsd::cxx::tree::one< InitialInspiratoryCapacity_L_type > InitialInspiratoryCapacity_L_;
          ::xsd::cxx::tree::one< InitialResidualVolume_L_type > InitialResidualVolume_L_;
          ::xsd::cxx::tree::one< NotBreathing_type > NotBreathing_;
          ::xsd::cxx::tree::one< TopBreathTotalVolume_L_type > TopBreathTotalVolume_L_;
          ::xsd::cxx::tree::one< TopBreathAlveoliVolume_L_type > TopBreathAlveoliVolume_L_;
          ::xsd::cxx::tree::one< TopBreathDeadSpaceVolume_L_type > TopBreathDeadSpaceVolume_L_;
          ::xsd::cxx::tree::one< TopBreathPleuralPressure_cmH2O_type > TopBreathPleuralPressure_cmH2O_;
          ::xsd::cxx::tree::one< LastCardiacCycleBloodPH_type > LastCardiacCycleBloodPH_;
          ::xsd::cxx::tree::one< PreviousTotalLungVolume_L_type > PreviousTotalLungVolume_L_;
          ::xsd::cxx::tree::one< BloodPHRunningAverage_type > BloodPHRunningAverage_;
          ::xsd::cxx::tree::one< BreathingCycle_type > BreathingCycle_;
          ::xsd::cxx::tree::one< ArterialO2PartialPressure_mmHg_type > ArterialO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< ArterialCO2PartialPressure_mmHg_type > ArterialCO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< BreathingCycleTime_s_type > BreathingCycleTime_s_;
          ::xsd::cxx::tree::one< BreathTimeExhale_min_type > BreathTimeExhale_min_;
          ::xsd::cxx::tree::one< DefaultDrivePressure_cmH2O_type > DefaultDrivePressure_cmH2O_;
          ::xsd::cxx::tree::one< DriverPressure_cmH2O_type > DriverPressure_cmH2O_;
          ::xsd::cxx::tree::one< DriverPressureMin_cmH2O_type > DriverPressureMin_cmH2O_;
          ::xsd::cxx::tree::one< ElapsedBreathingCycleTime_min_type > ElapsedBreathingCycleTime_min_;
          ::xsd::cxx::tree::one< IEscaleFactor_type > IEscaleFactor_;
          ::xsd::cxx::tree::one< InstantaneousFunctionalResidualCapacity_L_type > InstantaneousFunctionalResidualCapacity_L_;
          ::xsd::cxx::tree::one< MaxDriverPressure_cmH2O_type > MaxDriverPressure_cmH2O_;
          ::xsd::cxx::tree::one< PeakRespiratoryDrivePressure_cmH2O_type > PeakRespiratoryDrivePressure_cmH2O_;
          ::xsd::cxx::tree::one< PreviousTargetAlveolarVentilation_L_Per_min_type > PreviousTargetAlveolarVentilation_L_Per_min_;
          ::xsd::cxx::tree::one< VentilationFrequency_Per_min_type > VentilationFrequency_Per_min_;
          ::xsd::cxx::tree::one< VentilationToTidalVolumeSlope_type > VentilationToTidalVolumeSlope_;
          ::xsd::cxx::tree::one< ArterialO2RunningAverage_mmHg_type > ArterialO2RunningAverage_mmHg_;
          ::xsd::cxx::tree::one< ArterialCO2RunningAverage_mmHg_type > ArterialCO2RunningAverage_mmHg_;
          ::xsd::cxx::tree::one< ConsciousBreathing_type > ConsciousBreathing_;
          ::xsd::cxx::tree::one< ConsciousRespirationPeriod_s_type > ConsciousRespirationPeriod_s_;
          ::xsd::cxx::tree::one< ConsciousRespirationRemainingPeriod_s_type > ConsciousRespirationRemainingPeriod_s_;
          ::xsd::cxx::tree::one< ExpiratoryReserveVolumeFraction_type > ExpiratoryReserveVolumeFraction_;
          ::xsd::cxx::tree::one< InspiratoryCapacityFraction_type > InspiratoryCapacityFraction_;
          ::xsd::cxx::tree::one< ConsciousStartPressure_cmH2O_type > ConsciousStartPressure_cmH2O_;
          ::xsd::cxx::tree::one< ConsciousEndPressure_cmH2O_type > ConsciousEndPressure_cmH2O_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsRespiratorySystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsRespiratorySystemData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BIO_GEARS_RESPIRATORY_SYSTEM_DATA_HXX

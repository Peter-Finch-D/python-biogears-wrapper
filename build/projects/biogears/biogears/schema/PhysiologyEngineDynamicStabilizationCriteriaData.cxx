// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PhysiologyEngineDynamicStabilizationCriteriaData.hxx"

#include "ScalarTimeData.hxx"

#include "PhysiologyEngineDynamicStabilizationCriteriaPropertyData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineDynamicStabilizationCriteriaData
        // 

        const PhysiologyEngineDynamicStabilizationCriteriaData::ConvergenceTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        ConvergenceTime () const
        {
          return this->ConvergenceTime_.get ();
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::ConvergenceTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        ConvergenceTime ()
        {
          return this->ConvergenceTime_.get ();
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        ConvergenceTime (const ConvergenceTime_type& x)
        {
          this->ConvergenceTime_.set (x);
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        ConvergenceTime (::std::unique_ptr< ConvergenceTime_type > x)
        {
          this->ConvergenceTime_.set (std::move (x));
        }

        const PhysiologyEngineDynamicStabilizationCriteriaData::MinimumReactionTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        MinimumReactionTime () const
        {
          return this->MinimumReactionTime_.get ();
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::MinimumReactionTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        MinimumReactionTime ()
        {
          return this->MinimumReactionTime_.get ();
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        MinimumReactionTime (const MinimumReactionTime_type& x)
        {
          this->MinimumReactionTime_.set (x);
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        MinimumReactionTime (::std::unique_ptr< MinimumReactionTime_type > x)
        {
          this->MinimumReactionTime_.set (std::move (x));
        }

        const PhysiologyEngineDynamicStabilizationCriteriaData::MaximumAllowedStabilizationTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        MaximumAllowedStabilizationTime () const
        {
          return this->MaximumAllowedStabilizationTime_.get ();
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::MaximumAllowedStabilizationTime_type& PhysiologyEngineDynamicStabilizationCriteriaData::
        MaximumAllowedStabilizationTime ()
        {
          return this->MaximumAllowedStabilizationTime_.get ();
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        MaximumAllowedStabilizationTime (const MaximumAllowedStabilizationTime_type& x)
        {
          this->MaximumAllowedStabilizationTime_.set (x);
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        MaximumAllowedStabilizationTime (::std::unique_ptr< MaximumAllowedStabilizationTime_type > x)
        {
          this->MaximumAllowedStabilizationTime_.set (std::move (x));
        }

        const PhysiologyEngineDynamicStabilizationCriteriaData::PropertyConvergence_sequence& PhysiologyEngineDynamicStabilizationCriteriaData::
        PropertyConvergence () const
        {
          return this->PropertyConvergence_;
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::PropertyConvergence_sequence& PhysiologyEngineDynamicStabilizationCriteriaData::
        PropertyConvergence ()
        {
          return this->PropertyConvergence_;
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        PropertyConvergence (const PropertyConvergence_sequence& s)
        {
          this->PropertyConvergence_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineDynamicStabilizationCriteriaData
        //

        PhysiologyEngineDynamicStabilizationCriteriaData::
        PhysiologyEngineDynamicStabilizationCriteriaData ()
        : ::xml_schema::type (),
          ConvergenceTime_ (this),
          MinimumReactionTime_ (this),
          MaximumAllowedStabilizationTime_ (this),
          PropertyConvergence_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::
        PhysiologyEngineDynamicStabilizationCriteriaData (const ConvergenceTime_type& ConvergenceTime,
                                                          const MinimumReactionTime_type& MinimumReactionTime,
                                                          const MaximumAllowedStabilizationTime_type& MaximumAllowedStabilizationTime)
        : ::xml_schema::type (),
          ConvergenceTime_ (ConvergenceTime, this),
          MinimumReactionTime_ (MinimumReactionTime, this),
          MaximumAllowedStabilizationTime_ (MaximumAllowedStabilizationTime, this),
          PropertyConvergence_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::
        PhysiologyEngineDynamicStabilizationCriteriaData (::std::unique_ptr< ConvergenceTime_type > ConvergenceTime,
                                                          ::std::unique_ptr< MinimumReactionTime_type > MinimumReactionTime,
                                                          ::std::unique_ptr< MaximumAllowedStabilizationTime_type > MaximumAllowedStabilizationTime)
        : ::xml_schema::type (),
          ConvergenceTime_ (std::move (ConvergenceTime), this),
          MinimumReactionTime_ (std::move (MinimumReactionTime), this),
          MaximumAllowedStabilizationTime_ (std::move (MaximumAllowedStabilizationTime), this),
          PropertyConvergence_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::
        PhysiologyEngineDynamicStabilizationCriteriaData (const PhysiologyEngineDynamicStabilizationCriteriaData& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          ConvergenceTime_ (x.ConvergenceTime_, f, this),
          MinimumReactionTime_ (x.MinimumReactionTime_, f, this),
          MaximumAllowedStabilizationTime_ (x.MaximumAllowedStabilizationTime_, f, this),
          PropertyConvergence_ (x.PropertyConvergence_, f, this)
        {
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::
        PhysiologyEngineDynamicStabilizationCriteriaData (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          ConvergenceTime_ (this),
          MinimumReactionTime_ (this),
          MaximumAllowedStabilizationTime_ (this),
          PropertyConvergence_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void PhysiologyEngineDynamicStabilizationCriteriaData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ConvergenceTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConvergenceTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConvergenceTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ConvergenceTime_.present ())
                {
                  ::std::unique_ptr< ConvergenceTime_type > r (
                    dynamic_cast< ConvergenceTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConvergenceTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MinimumReactionTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumReactionTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MinimumReactionTime_.present ())
                {
                  ::std::unique_ptr< MinimumReactionTime_type > r (
                    dynamic_cast< MinimumReactionTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumReactionTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MaximumAllowedStabilizationTime
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MaximumAllowedStabilizationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MaximumAllowedStabilizationTime_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!MaximumAllowedStabilizationTime_.present ())
                {
                  ::std::unique_ptr< MaximumAllowedStabilizationTime_type > r (
                    dynamic_cast< MaximumAllowedStabilizationTime_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MaximumAllowedStabilizationTime_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PropertyConvergence
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PropertyConvergence",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PropertyConvergence_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< PropertyConvergence_type > r (
                  dynamic_cast< PropertyConvergence_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->PropertyConvergence_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!ConvergenceTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConvergenceTime",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MinimumReactionTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MinimumReactionTime",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MaximumAllowedStabilizationTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MaximumAllowedStabilizationTime",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        PhysiologyEngineDynamicStabilizationCriteriaData* PhysiologyEngineDynamicStabilizationCriteriaData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PhysiologyEngineDynamicStabilizationCriteriaData (*this, f, c);
        }

        PhysiologyEngineDynamicStabilizationCriteriaData& PhysiologyEngineDynamicStabilizationCriteriaData::
        operator= (const PhysiologyEngineDynamicStabilizationCriteriaData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->ConvergenceTime_ = x.ConvergenceTime_;
            this->MinimumReactionTime_ = x.MinimumReactionTime_;
            this->MaximumAllowedStabilizationTime_ = x.MaximumAllowedStabilizationTime_;
            this->PropertyConvergence_ = x.PropertyConvergence_;
          }

          return *this;
        }

        PhysiologyEngineDynamicStabilizationCriteriaData::
        ~PhysiologyEngineDynamicStabilizationCriteriaData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PhysiologyEngineDynamicStabilizationCriteriaData >
        _xsd_PhysiologyEngineDynamicStabilizationCriteriaData_type_factory_init (
          "PhysiologyEngineDynamicStabilizationCriteriaData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PhysiologyEngineDynamicStabilizationCriteriaData& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ConvergenceTime: ";
            om.insert (o, i.ConvergenceTime ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MinimumReactionTime: ";
            om.insert (o, i.MinimumReactionTime ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "MaximumAllowedStabilizationTime: ";
            om.insert (o, i.MaximumAllowedStabilizationTime ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineDynamicStabilizationCriteriaData::PropertyConvergence_const_iterator
                 b (i.PropertyConvergence ().begin ()), e (i.PropertyConvergence ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "PropertyConvergence: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PhysiologyEngineDynamicStabilizationCriteriaData >
        _xsd_PhysiologyEngineDynamicStabilizationCriteriaData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PhysiologyEngineDynamicStabilizationCriteriaData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // ConvergenceTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PhysiologyEngineDynamicStabilizationCriteriaData::ConvergenceTime_type& x (i.ConvergenceTime ());
            if (typeid (PhysiologyEngineDynamicStabilizationCriteriaData::ConvergenceTime_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ConvergenceTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ConvergenceTime",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // MinimumReactionTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PhysiologyEngineDynamicStabilizationCriteriaData::MinimumReactionTime_type& x (i.MinimumReactionTime ());
            if (typeid (PhysiologyEngineDynamicStabilizationCriteriaData::MinimumReactionTime_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MinimumReactionTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MinimumReactionTime",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // MaximumAllowedStabilizationTime
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PhysiologyEngineDynamicStabilizationCriteriaData::MaximumAllowedStabilizationTime_type& x (i.MaximumAllowedStabilizationTime ());
            if (typeid (PhysiologyEngineDynamicStabilizationCriteriaData::MaximumAllowedStabilizationTime_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "MaximumAllowedStabilizationTime",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "MaximumAllowedStabilizationTime",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // PropertyConvergence
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineDynamicStabilizationCriteriaData::PropertyConvergence_const_iterator
                 b (i.PropertyConvergence ().begin ()), n (i.PropertyConvergence ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineDynamicStabilizationCriteriaData::PropertyConvergence_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PropertyConvergence",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "PropertyConvergence",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PhysiologyEngineDynamicStabilizationCriteriaData >
        _xsd_PhysiologyEngineDynamicStabilizationCriteriaData_type_serializer_init (
          "PhysiologyEngineDynamicStabilizationCriteriaData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


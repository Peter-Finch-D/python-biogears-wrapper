// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ErrorData.hxx"

#include "enumErrorType.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ErrorData
        // 

        const ErrorData::value_type& ErrorData::
        value () const
        {
          return this->value_.get ();
        }

        ErrorData::value_type& ErrorData::
        value ()
        {
          return this->value_.get ();
        }

        void ErrorData::
        value (const value_type& x)
        {
          this->value_.set (x);
        }

        const ErrorData::type_type& ErrorData::
        type () const
        {
          return this->type_.get ();
        }

        ErrorData::type_type& ErrorData::
        type ()
        {
          return this->type_.get ();
        }

        void ErrorData::
        type (const type_type& x)
        {
          this->type_.set (x);
        }

        void ErrorData::
        type (::std::unique_ptr< type_type > x)
        {
          this->type_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ErrorData
        //

        ErrorData::
        ErrorData ()
        : ::xml_schema::type (),
          value_ (this),
          type_ (this)
        {
        }

        ErrorData::
        ErrorData (const value_type& value,
                   const type_type& type)
        : ::xml_schema::type (),
          value_ (value, this),
          type_ (type, this)
        {
        }

        ErrorData::
        ErrorData (const ErrorData& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          value_ (x.value_, f, this),
          type_ (x.type_, f, this)
        {
        }

        ErrorData::
        ErrorData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          value_ (this),
          type_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
            this->parse (p, f);
          }
        }

        void ErrorData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "value" && n.namespace_ ().empty ())
            {
              this->value_.set (value_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              this->type_.set (type_traits::create (i, f, this));
              continue;
            }
          }

          if (!value_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "value",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }
        }

        ErrorData* ErrorData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ErrorData (*this, f, c);
        }

        ErrorData& ErrorData::
        operator= (const ErrorData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->value_ = x.value_;
            this->type_ = x.type_;
          }

          return *this;
        }

        ErrorData::
        ~ErrorData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ErrorData >
        _xsd_ErrorData_type_factory_init (
          "ErrorData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ErrorData& i)
        {
          o << ::std::endl << "value: " << i.value ();
          o << ::std::endl << "type: " << i.type ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ErrorData >
        _xsd_ErrorData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ErrorData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // value
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "value",
                e));

            a << ::xml_schema::as_double(i.value ());
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.type ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ErrorData >
        _xsd_ErrorData_type_serializer_init (
          "ErrorData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


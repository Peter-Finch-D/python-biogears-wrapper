// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "MechanicalVentilationData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "SubstanceFractionData.hxx"

#include "enumOnOff.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // MechanicalVentilationData
        // 

        const MechanicalVentilationData::Pressure_optional& MechanicalVentilationData::
        Pressure () const
        {
          return this->Pressure_;
        }

        MechanicalVentilationData::Pressure_optional& MechanicalVentilationData::
        Pressure ()
        {
          return this->Pressure_;
        }

        void MechanicalVentilationData::
        Pressure (const Pressure_type& x)
        {
          this->Pressure_.set (x);
        }

        void MechanicalVentilationData::
        Pressure (const Pressure_optional& x)
        {
          this->Pressure_ = x;
        }

        void MechanicalVentilationData::
        Pressure (::std::unique_ptr< Pressure_type > x)
        {
          this->Pressure_.set (std::move (x));
        }

        const MechanicalVentilationData::Flow_optional& MechanicalVentilationData::
        Flow () const
        {
          return this->Flow_;
        }

        MechanicalVentilationData::Flow_optional& MechanicalVentilationData::
        Flow ()
        {
          return this->Flow_;
        }

        void MechanicalVentilationData::
        Flow (const Flow_type& x)
        {
          this->Flow_.set (x);
        }

        void MechanicalVentilationData::
        Flow (const Flow_optional& x)
        {
          this->Flow_ = x;
        }

        void MechanicalVentilationData::
        Flow (::std::unique_ptr< Flow_type > x)
        {
          this->Flow_.set (std::move (x));
        }

        const MechanicalVentilationData::GasFraction_sequence& MechanicalVentilationData::
        GasFraction () const
        {
          return this->GasFraction_;
        }

        MechanicalVentilationData::GasFraction_sequence& MechanicalVentilationData::
        GasFraction ()
        {
          return this->GasFraction_;
        }

        void MechanicalVentilationData::
        GasFraction (const GasFraction_sequence& s)
        {
          this->GasFraction_ = s;
        }

        const MechanicalVentilationData::State_type& MechanicalVentilationData::
        State () const
        {
          return this->State_.get ();
        }

        MechanicalVentilationData::State_type& MechanicalVentilationData::
        State ()
        {
          return this->State_.get ();
        }

        void MechanicalVentilationData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void MechanicalVentilationData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // MechanicalVentilationData
        //

        MechanicalVentilationData::
        MechanicalVentilationData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const State_type& State)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (State, this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const MechanicalVentilationData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          Pressure_ (x.Pressure_, f, this),
          Flow_ (x.Flow_, f, this),
          GasFraction_ (x.GasFraction_, f, this),
          State_ (x.State_, f, this)
        {
        }

        MechanicalVentilationData::
        MechanicalVentilationData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          Pressure_ (this),
          Flow_ (this),
          GasFraction_ (this),
          State_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void MechanicalVentilationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Pressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pressure_)
                {
                  ::std::unique_ptr< Pressure_type > r (
                    dynamic_cast< Pressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Flow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Flow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Flow_)
                {
                  ::std::unique_ptr< Flow_type > r (
                    dynamic_cast< Flow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Flow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GasFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasFraction_type > r (
                  dynamic_cast< GasFraction_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasFraction_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }
        }

        MechanicalVentilationData* MechanicalVentilationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class MechanicalVentilationData (*this, f, c);
        }

        MechanicalVentilationData& MechanicalVentilationData::
        operator= (const MechanicalVentilationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->Pressure_ = x.Pressure_;
            this->Flow_ = x.Flow_;
            this->GasFraction_ = x.GasFraction_;
            this->State_ = x.State_;
          }

          return *this;
        }

        MechanicalVentilationData::
        ~MechanicalVentilationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_type_factory_init (
          "MechanicalVentilationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const MechanicalVentilationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              o << ::std::endl << "Pressure: ";
              om.insert (o, *i.Pressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Flow ())
            {
              o << ::std::endl << "Flow: ";
              om.insert (o, *i.Flow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (MechanicalVentilationData::GasFraction_const_iterator
                 b (i.GasFraction ().begin ()), e (i.GasFraction ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasFraction: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "State: " << i.State ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const MechanicalVentilationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // Pressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              const MechanicalVentilationData::Pressure_type& x (*i.Pressure ());
              if (typeid (MechanicalVentilationData::Pressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Flow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Flow ())
            {
              const MechanicalVentilationData::Flow_type& x (*i.Flow ());
              if (typeid (MechanicalVentilationData::Flow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Flow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Flow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GasFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (MechanicalVentilationData::GasFraction_const_iterator
                 b (i.GasFraction ().begin ()), n (i.GasFraction ().end ());
                 b != n; ++b)
            {
              if (typeid (MechanicalVentilationData::GasFraction_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, MechanicalVentilationData >
        _xsd_MechanicalVentilationData_type_serializer_init (
          "MechanicalVentilationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


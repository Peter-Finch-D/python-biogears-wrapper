// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BioGearsTissueSystemData.hxx"

#include "RunningAverageData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsTissueSystemData
        // 

        const BioGearsTissueSystemData::RestingPatientMass_kg_type& BioGearsTissueSystemData::
        RestingPatientMass_kg () const
        {
          return this->RestingPatientMass_kg_.get ();
        }

        BioGearsTissueSystemData::RestingPatientMass_kg_type& BioGearsTissueSystemData::
        RestingPatientMass_kg ()
        {
          return this->RestingPatientMass_kg_.get ();
        }

        void BioGearsTissueSystemData::
        RestingPatientMass_kg (const RestingPatientMass_kg_type& x)
        {
          this->RestingPatientMass_kg_.set (x);
        }

        const BioGearsTissueSystemData::RestingFluidMass_kg_type& BioGearsTissueSystemData::
        RestingFluidMass_kg () const
        {
          return this->RestingFluidMass_kg_.get ();
        }

        BioGearsTissueSystemData::RestingFluidMass_kg_type& BioGearsTissueSystemData::
        RestingFluidMass_kg ()
        {
          return this->RestingFluidMass_kg_.get ();
        }

        void BioGearsTissueSystemData::
        RestingFluidMass_kg (const RestingFluidMass_kg_type& x)
        {
          this->RestingFluidMass_kg_.set (x);
        }

        const BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s () const
        {
          return this->O2ConsumedRunningAverage_mL_Per_s_.get ();
        }

        BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s ()
        {
          return this->O2ConsumedRunningAverage_mL_Per_s_.get ();
        }

        void BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s (const O2ConsumedRunningAverage_mL_Per_s_type& x)
        {
          this->O2ConsumedRunningAverage_mL_Per_s_.set (x);
        }

        void BioGearsTissueSystemData::
        O2ConsumedRunningAverage_mL_Per_s (::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > x)
        {
          this->O2ConsumedRunningAverage_mL_Per_s_.set (std::move (x));
        }

        const BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s () const
        {
          return this->CO2ProducedRunningAverage_mL_Per_s_.get ();
        }

        BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s ()
        {
          return this->CO2ProducedRunningAverage_mL_Per_s_.get ();
        }

        void BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s (const CO2ProducedRunningAverage_mL_Per_s_type& x)
        {
          this->CO2ProducedRunningAverage_mL_Per_s_.set (x);
        }

        void BioGearsTissueSystemData::
        CO2ProducedRunningAverage_mL_Per_s (::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > x)
        {
          this->CO2ProducedRunningAverage_mL_Per_s_.set (std::move (x));
        }

        const BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage () const
        {
          return this->RespiratoryQuotientRunningAverage_.get ();
        }

        BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage ()
        {
          return this->RespiratoryQuotientRunningAverage_.get ();
        }

        void BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage (const RespiratoryQuotientRunningAverage_type& x)
        {
          this->RespiratoryQuotientRunningAverage_.set (x);
        }

        void BioGearsTissueSystemData::
        RespiratoryQuotientRunningAverage (::std::unique_ptr< RespiratoryQuotientRunningAverage_type > x)
        {
          this->RespiratoryQuotientRunningAverage_.set (std::move (x));
        }

        const BioGearsTissueSystemData::FatigueRunningAverage_type& BioGearsTissueSystemData::
        FatigueRunningAverage () const
        {
          return this->FatigueRunningAverage_.get ();
        }

        BioGearsTissueSystemData::FatigueRunningAverage_type& BioGearsTissueSystemData::
        FatigueRunningAverage ()
        {
          return this->FatigueRunningAverage_.get ();
        }

        void BioGearsTissueSystemData::
        FatigueRunningAverage (const FatigueRunningAverage_type& x)
        {
          this->FatigueRunningAverage_.set (x);
        }

        void BioGearsTissueSystemData::
        FatigueRunningAverage (::std::unique_ptr< FatigueRunningAverage_type > x)
        {
          this->FatigueRunningAverage_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsTissueSystemData
        //

        BioGearsTissueSystemData::
        BioGearsTissueSystemData ()
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (this),
          RestingFluidMass_kg_ (this),
          O2ConsumedRunningAverage_mL_Per_s_ (this),
          CO2ProducedRunningAverage_mL_Per_s_ (this),
          RespiratoryQuotientRunningAverage_ (this),
          FatigueRunningAverage_ (this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const RestingPatientMass_kg_type& RestingPatientMass_kg,
                                  const RestingFluidMass_kg_type& RestingFluidMass_kg,
                                  const O2ConsumedRunningAverage_mL_Per_s_type& O2ConsumedRunningAverage_mL_Per_s,
                                  const CO2ProducedRunningAverage_mL_Per_s_type& CO2ProducedRunningAverage_mL_Per_s,
                                  const RespiratoryQuotientRunningAverage_type& RespiratoryQuotientRunningAverage,
                                  const FatigueRunningAverage_type& FatigueRunningAverage)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (RestingPatientMass_kg, this),
          RestingFluidMass_kg_ (RestingFluidMass_kg, this),
          O2ConsumedRunningAverage_mL_Per_s_ (O2ConsumedRunningAverage_mL_Per_s, this),
          CO2ProducedRunningAverage_mL_Per_s_ (CO2ProducedRunningAverage_mL_Per_s, this),
          RespiratoryQuotientRunningAverage_ (RespiratoryQuotientRunningAverage, this),
          FatigueRunningAverage_ (FatigueRunningAverage, this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const RestingPatientMass_kg_type& RestingPatientMass_kg,
                                  const RestingFluidMass_kg_type& RestingFluidMass_kg,
                                  ::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > O2ConsumedRunningAverage_mL_Per_s,
                                  ::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > CO2ProducedRunningAverage_mL_Per_s,
                                  ::std::unique_ptr< RespiratoryQuotientRunningAverage_type > RespiratoryQuotientRunningAverage,
                                  ::std::unique_ptr< FatigueRunningAverage_type > FatigueRunningAverage)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (),
          RestingPatientMass_kg_ (RestingPatientMass_kg, this),
          RestingFluidMass_kg_ (RestingFluidMass_kg, this),
          O2ConsumedRunningAverage_mL_Per_s_ (std::move (O2ConsumedRunningAverage_mL_Per_s), this),
          CO2ProducedRunningAverage_mL_Per_s_ (std::move (CO2ProducedRunningAverage_mL_Per_s), this),
          RespiratoryQuotientRunningAverage_ (std::move (RespiratoryQuotientRunningAverage), this),
          FatigueRunningAverage_ (std::move (FatigueRunningAverage), this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const BioGearsTissueSystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (x, f, c),
          RestingPatientMass_kg_ (x.RestingPatientMass_kg_, f, this),
          RestingFluidMass_kg_ (x.RestingFluidMass_kg_, f, this),
          O2ConsumedRunningAverage_mL_Per_s_ (x.O2ConsumedRunningAverage_mL_Per_s_, f, this),
          CO2ProducedRunningAverage_mL_Per_s_ (x.CO2ProducedRunningAverage_mL_Per_s_, f, this),
          RespiratoryQuotientRunningAverage_ (x.RespiratoryQuotientRunningAverage_, f, this),
          FatigueRunningAverage_ (x.FatigueRunningAverage_, f, this)
        {
        }

        BioGearsTissueSystemData::
        BioGearsTissueSystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::TissueSystemData (e, f | ::xml_schema::flags::base, c),
          RestingPatientMass_kg_ (this),
          RestingFluidMass_kg_ (this),
          O2ConsumedRunningAverage_mL_Per_s_ (this),
          CO2ProducedRunningAverage_mL_Per_s_ (this),
          RespiratoryQuotientRunningAverage_ (this),
          FatigueRunningAverage_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsTissueSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::TissueSystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RestingPatientMass_kg
            //
            if (n.name () == "RestingPatientMass_kg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RestingPatientMass_kg_.present ())
              {
                this->RestingPatientMass_kg_.set (RestingPatientMass_kg_traits::create (i, f, this));
                continue;
              }
            }

            // RestingFluidMass_kg
            //
            if (n.name () == "RestingFluidMass_kg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!RestingFluidMass_kg_.present ())
              {
                this->RestingFluidMass_kg_.set (RestingFluidMass_kg_traits::create (i, f, this));
                continue;
              }
            }

            // O2ConsumedRunningAverage_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "O2ConsumedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< O2ConsumedRunningAverage_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!O2ConsumedRunningAverage_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< O2ConsumedRunningAverage_mL_Per_s_type > r (
                    dynamic_cast< O2ConsumedRunningAverage_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->O2ConsumedRunningAverage_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CO2ProducedRunningAverage_mL_Per_s
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CO2ProducedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CO2ProducedRunningAverage_mL_Per_s_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!CO2ProducedRunningAverage_mL_Per_s_.present ())
                {
                  ::std::unique_ptr< CO2ProducedRunningAverage_mL_Per_s_type > r (
                    dynamic_cast< CO2ProducedRunningAverage_mL_Per_s_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CO2ProducedRunningAverage_mL_Per_s_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryQuotientRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryQuotientRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryQuotientRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RespiratoryQuotientRunningAverage_.present ())
                {
                  ::std::unique_ptr< RespiratoryQuotientRunningAverage_type > r (
                    dynamic_cast< RespiratoryQuotientRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryQuotientRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatigueRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatigueRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatigueRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FatigueRunningAverage_.present ())
                {
                  ::std::unique_ptr< FatigueRunningAverage_type > r (
                    dynamic_cast< FatigueRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatigueRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!RestingPatientMass_kg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RestingPatientMass_kg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RestingFluidMass_kg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RestingFluidMass_kg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!O2ConsumedRunningAverage_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "O2ConsumedRunningAverage_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!CO2ProducedRunningAverage_mL_Per_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CO2ProducedRunningAverage_mL_Per_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RespiratoryQuotientRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RespiratoryQuotientRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FatigueRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FatigueRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsTissueSystemData* BioGearsTissueSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsTissueSystemData (*this, f, c);
        }

        BioGearsTissueSystemData& BioGearsTissueSystemData::
        operator= (const BioGearsTissueSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::TissueSystemData& > (*this) = x;
            this->RestingPatientMass_kg_ = x.RestingPatientMass_kg_;
            this->RestingFluidMass_kg_ = x.RestingFluidMass_kg_;
            this->O2ConsumedRunningAverage_mL_Per_s_ = x.O2ConsumedRunningAverage_mL_Per_s_;
            this->CO2ProducedRunningAverage_mL_Per_s_ = x.CO2ProducedRunningAverage_mL_Per_s_;
            this->RespiratoryQuotientRunningAverage_ = x.RespiratoryQuotientRunningAverage_;
            this->FatigueRunningAverage_ = x.FatigueRunningAverage_;
          }

          return *this;
        }

        BioGearsTissueSystemData::
        ~BioGearsTissueSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_type_factory_init (
          "BioGearsTissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsTissueSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::TissueSystemData& > (i);

          o << ::std::endl << "RestingPatientMass_kg: " << i.RestingPatientMass_kg ();
          o << ::std::endl << "RestingFluidMass_kg: " << i.RestingFluidMass_kg ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "O2ConsumedRunningAverage_mL_Per_s: ";
            om.insert (o, i.O2ConsumedRunningAverage_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "CO2ProducedRunningAverage_mL_Per_s: ";
            om.insert (o, i.CO2ProducedRunningAverage_mL_Per_s ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RespiratoryQuotientRunningAverage: ";
            om.insert (o, i.RespiratoryQuotientRunningAverage ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FatigueRunningAverage: ";
            om.insert (o, i.FatigueRunningAverage ());
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const BioGearsTissueSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::TissueSystemData& > (i);

          // RestingPatientMass_kg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RestingPatientMass_kg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RestingPatientMass_kg ());
          }

          // RestingFluidMass_kg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RestingFluidMass_kg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.RestingFluidMass_kg ());
          }

          // O2ConsumedRunningAverage_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type& x (i.O2ConsumedRunningAverage_mL_Per_s ());
            if (typeid (BioGearsTissueSystemData::O2ConsumedRunningAverage_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "O2ConsumedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "O2ConsumedRunningAverage_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // CO2ProducedRunningAverage_mL_Per_s
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type& x (i.CO2ProducedRunningAverage_mL_Per_s ());
            if (typeid (BioGearsTissueSystemData::CO2ProducedRunningAverage_mL_Per_s_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "CO2ProducedRunningAverage_mL_Per_s",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "CO2ProducedRunningAverage_mL_Per_s",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RespiratoryQuotientRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type& x (i.RespiratoryQuotientRunningAverage ());
            if (typeid (BioGearsTissueSystemData::RespiratoryQuotientRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RespiratoryQuotientRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RespiratoryQuotientRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FatigueRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsTissueSystemData::FatigueRunningAverage_type& x (i.FatigueRunningAverage ());
            if (typeid (BioGearsTissueSystemData::FatigueRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FatigueRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FatigueRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsTissueSystemData >
        _xsd_BioGearsTissueSystemData_type_serializer_init (
          "BioGearsTissueSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


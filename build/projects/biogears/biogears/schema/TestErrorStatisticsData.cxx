// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "TestErrorStatisticsData.hxx"

#include "FunctionData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TestErrorStatisticsData
        // 

        const TestErrorStatisticsData::MinimumError_optional& TestErrorStatisticsData::
        MinimumError () const
        {
          return this->MinimumError_;
        }

        TestErrorStatisticsData::MinimumError_optional& TestErrorStatisticsData::
        MinimumError ()
        {
          return this->MinimumError_;
        }

        void TestErrorStatisticsData::
        MinimumError (const MinimumError_type& x)
        {
          this->MinimumError_.set (x);
        }

        void TestErrorStatisticsData::
        MinimumError (const MinimumError_optional& x)
        {
          this->MinimumError_ = x;
        }

        const TestErrorStatisticsData::MaximumError_optional& TestErrorStatisticsData::
        MaximumError () const
        {
          return this->MaximumError_;
        }

        TestErrorStatisticsData::MaximumError_optional& TestErrorStatisticsData::
        MaximumError ()
        {
          return this->MaximumError_;
        }

        void TestErrorStatisticsData::
        MaximumError (const MaximumError_type& x)
        {
          this->MaximumError_.set (x);
        }

        void TestErrorStatisticsData::
        MaximumError (const MaximumError_optional& x)
        {
          this->MaximumError_ = x;
        }

        const TestErrorStatisticsData::AverageError_optional& TestErrorStatisticsData::
        AverageError () const
        {
          return this->AverageError_;
        }

        TestErrorStatisticsData::AverageError_optional& TestErrorStatisticsData::
        AverageError ()
        {
          return this->AverageError_;
        }

        void TestErrorStatisticsData::
        AverageError (const AverageError_type& x)
        {
          this->AverageError_.set (x);
        }

        void TestErrorStatisticsData::
        AverageError (const AverageError_optional& x)
        {
          this->AverageError_ = x;
        }

        const TestErrorStatisticsData::StandardDeviation_optional& TestErrorStatisticsData::
        StandardDeviation () const
        {
          return this->StandardDeviation_;
        }

        TestErrorStatisticsData::StandardDeviation_optional& TestErrorStatisticsData::
        StandardDeviation ()
        {
          return this->StandardDeviation_;
        }

        void TestErrorStatisticsData::
        StandardDeviation (const StandardDeviation_type& x)
        {
          this->StandardDeviation_.set (x);
        }

        void TestErrorStatisticsData::
        StandardDeviation (const StandardDeviation_optional& x)
        {
          this->StandardDeviation_ = x;
        }

        const TestErrorStatisticsData::PercentToleranceVsNumErrors_optional& TestErrorStatisticsData::
        PercentToleranceVsNumErrors () const
        {
          return this->PercentToleranceVsNumErrors_;
        }

        TestErrorStatisticsData::PercentToleranceVsNumErrors_optional& TestErrorStatisticsData::
        PercentToleranceVsNumErrors ()
        {
          return this->PercentToleranceVsNumErrors_;
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (const PercentToleranceVsNumErrors_type& x)
        {
          this->PercentToleranceVsNumErrors_.set (x);
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (const PercentToleranceVsNumErrors_optional& x)
        {
          this->PercentToleranceVsNumErrors_ = x;
        }

        void TestErrorStatisticsData::
        PercentToleranceVsNumErrors (::std::unique_ptr< PercentToleranceVsNumErrors_type > x)
        {
          this->PercentToleranceVsNumErrors_.set (std::move (x));
        }

        const TestErrorStatisticsData::Differences_sequence& TestErrorStatisticsData::
        Differences () const
        {
          return this->Differences_;
        }

        TestErrorStatisticsData::Differences_sequence& TestErrorStatisticsData::
        Differences ()
        {
          return this->Differences_;
        }

        void TestErrorStatisticsData::
        Differences (const Differences_sequence& s)
        {
          this->Differences_ = s;
        }

        const TestErrorStatisticsData::ComputedPropertyID_type& TestErrorStatisticsData::
        ComputedPropertyID () const
        {
          return this->ComputedPropertyID_.get ();
        }

        TestErrorStatisticsData::ComputedPropertyID_type& TestErrorStatisticsData::
        ComputedPropertyID ()
        {
          return this->ComputedPropertyID_.get ();
        }

        void TestErrorStatisticsData::
        ComputedPropertyID (const ComputedPropertyID_type& x)
        {
          this->ComputedPropertyID_.set (x);
        }

        void TestErrorStatisticsData::
        ComputedPropertyID (::std::unique_ptr< ComputedPropertyID_type > x)
        {
          this->ComputedPropertyID_.set (std::move (x));
        }

        const TestErrorStatisticsData::ExpectedPropertyID_type& TestErrorStatisticsData::
        ExpectedPropertyID () const
        {
          return this->ExpectedPropertyID_.get ();
        }

        TestErrorStatisticsData::ExpectedPropertyID_type& TestErrorStatisticsData::
        ExpectedPropertyID ()
        {
          return this->ExpectedPropertyID_.get ();
        }

        void TestErrorStatisticsData::
        ExpectedPropertyID (const ExpectedPropertyID_type& x)
        {
          this->ExpectedPropertyID_.set (x);
        }

        void TestErrorStatisticsData::
        ExpectedPropertyID (::std::unique_ptr< ExpectedPropertyID_type > x)
        {
          this->ExpectedPropertyID_.set (std::move (x));
        }

        const TestErrorStatisticsData::NumberOfErrors_optional& TestErrorStatisticsData::
        NumberOfErrors () const
        {
          return this->NumberOfErrors_;
        }

        TestErrorStatisticsData::NumberOfErrors_optional& TestErrorStatisticsData::
        NumberOfErrors ()
        {
          return this->NumberOfErrors_;
        }

        void TestErrorStatisticsData::
        NumberOfErrors (const NumberOfErrors_type& x)
        {
          this->NumberOfErrors_.set (x);
        }

        void TestErrorStatisticsData::
        NumberOfErrors (const NumberOfErrors_optional& x)
        {
          this->NumberOfErrors_ = x;
        }

        const TestErrorStatisticsData::PercentTolerance_type& TestErrorStatisticsData::
        PercentTolerance () const
        {
          return this->PercentTolerance_.get ();
        }

        TestErrorStatisticsData::PercentTolerance_type& TestErrorStatisticsData::
        PercentTolerance ()
        {
          return this->PercentTolerance_.get ();
        }

        void TestErrorStatisticsData::
        PercentTolerance (const PercentTolerance_type& x)
        {
          this->PercentTolerance_.set (x);
        }

        const TestErrorStatisticsData::PropertyName_type& TestErrorStatisticsData::
        PropertyName () const
        {
          return this->PropertyName_.get ();
        }

        TestErrorStatisticsData::PropertyName_type& TestErrorStatisticsData::
        PropertyName ()
        {
          return this->PropertyName_.get ();
        }

        void TestErrorStatisticsData::
        PropertyName (const PropertyName_type& x)
        {
          this->PropertyName_.set (x);
        }

        void TestErrorStatisticsData::
        PropertyName (::std::unique_ptr< PropertyName_type > x)
        {
          this->PropertyName_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TestErrorStatisticsData
        //

        TestErrorStatisticsData::
        TestErrorStatisticsData ()
        : ::xml_schema::type (),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (this),
          ExpectedPropertyID_ (this),
          NumberOfErrors_ (this),
          PercentTolerance_ (this),
          PropertyName_ (this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const ComputedPropertyID_type& ComputedPropertyID,
                                 const ExpectedPropertyID_type& ExpectedPropertyID,
                                 const PercentTolerance_type& PercentTolerance,
                                 const PropertyName_type& PropertyName)
        : ::xml_schema::type (),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (ComputedPropertyID, this),
          ExpectedPropertyID_ (ExpectedPropertyID, this),
          NumberOfErrors_ (this),
          PercentTolerance_ (PercentTolerance, this),
          PropertyName_ (PropertyName, this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const TestErrorStatisticsData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          MinimumError_ (x.MinimumError_, f, this),
          MaximumError_ (x.MaximumError_, f, this),
          AverageError_ (x.AverageError_, f, this),
          StandardDeviation_ (x.StandardDeviation_, f, this),
          PercentToleranceVsNumErrors_ (x.PercentToleranceVsNumErrors_, f, this),
          Differences_ (x.Differences_, f, this),
          ComputedPropertyID_ (x.ComputedPropertyID_, f, this),
          ExpectedPropertyID_ (x.ExpectedPropertyID_, f, this),
          NumberOfErrors_ (x.NumberOfErrors_, f, this),
          PercentTolerance_ (x.PercentTolerance_, f, this),
          PropertyName_ (x.PropertyName_, f, this)
        {
        }

        TestErrorStatisticsData::
        TestErrorStatisticsData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          MinimumError_ (this),
          MaximumError_ (this),
          AverageError_ (this),
          StandardDeviation_ (this),
          PercentToleranceVsNumErrors_ (this),
          Differences_ (this),
          ComputedPropertyID_ (this),
          ExpectedPropertyID_ (this),
          NumberOfErrors_ (this),
          PercentTolerance_ (this),
          PropertyName_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TestErrorStatisticsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MinimumError
            //
            if (n.name () == "MinimumError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->MinimumError_)
              {
                this->MinimumError_.set (MinimumError_traits::create (i, f, this));
                continue;
              }
            }

            // MaximumError
            //
            if (n.name () == "MaximumError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->MaximumError_)
              {
                this->MaximumError_.set (MaximumError_traits::create (i, f, this));
                continue;
              }
            }

            // AverageError
            //
            if (n.name () == "AverageError" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->AverageError_)
              {
                this->AverageError_.set (AverageError_traits::create (i, f, this));
                continue;
              }
            }

            // StandardDeviation
            //
            if (n.name () == "StandardDeviation" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!this->StandardDeviation_)
              {
                this->StandardDeviation_.set (StandardDeviation_traits::create (i, f, this));
                continue;
              }
            }

            // PercentToleranceVsNumErrors
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PercentToleranceVsNumErrors",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PercentToleranceVsNumErrors_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PercentToleranceVsNumErrors_)
                {
                  ::std::unique_ptr< PercentToleranceVsNumErrors_type > r (
                    dynamic_cast< PercentToleranceVsNumErrors_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PercentToleranceVsNumErrors_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Differences
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Differences",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Differences_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Differences_type > r (
                  dynamic_cast< Differences_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Differences_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "ComputedPropertyID" && n.namespace_ ().empty ())
            {
              this->ComputedPropertyID_.set (ComputedPropertyID_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "ExpectedPropertyID" && n.namespace_ ().empty ())
            {
              this->ExpectedPropertyID_.set (ExpectedPropertyID_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "NumberOfErrors" && n.namespace_ ().empty ())
            {
              this->NumberOfErrors_.set (NumberOfErrors_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "PercentTolerance" && n.namespace_ ().empty ())
            {
              this->PercentTolerance_.set (PercentTolerance_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "PropertyName" && n.namespace_ ().empty ())
            {
              this->PropertyName_.set (PropertyName_traits::create (i, f, this));
              continue;
            }
          }

          if (!ComputedPropertyID_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ComputedPropertyID",
              "");
          }

          if (!ExpectedPropertyID_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ExpectedPropertyID",
              "");
          }

          if (!PercentTolerance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PercentTolerance",
              "");
          }

          if (!PropertyName_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PropertyName",
              "");
          }
        }

        TestErrorStatisticsData* TestErrorStatisticsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TestErrorStatisticsData (*this, f, c);
        }

        TestErrorStatisticsData& TestErrorStatisticsData::
        operator= (const TestErrorStatisticsData& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->MinimumError_ = x.MinimumError_;
            this->MaximumError_ = x.MaximumError_;
            this->AverageError_ = x.AverageError_;
            this->StandardDeviation_ = x.StandardDeviation_;
            this->PercentToleranceVsNumErrors_ = x.PercentToleranceVsNumErrors_;
            this->Differences_ = x.Differences_;
            this->ComputedPropertyID_ = x.ComputedPropertyID_;
            this->ExpectedPropertyID_ = x.ExpectedPropertyID_;
            this->NumberOfErrors_ = x.NumberOfErrors_;
            this->PercentTolerance_ = x.PercentTolerance_;
            this->PropertyName_ = x.PropertyName_;
          }

          return *this;
        }

        TestErrorStatisticsData::
        ~TestErrorStatisticsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_type_factory_init (
          "TestErrorStatisticsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const TestErrorStatisticsData& i)
        {
          if (i.MinimumError ())
          {
            o << ::std::endl << "MinimumError: " << *i.MinimumError ();
          }

          if (i.MaximumError ())
          {
            o << ::std::endl << "MaximumError: " << *i.MaximumError ();
          }

          if (i.AverageError ())
          {
            o << ::std::endl << "AverageError: " << *i.AverageError ();
          }

          if (i.StandardDeviation ())
          {
            o << ::std::endl << "StandardDeviation: " << *i.StandardDeviation ();
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PercentToleranceVsNumErrors ())
            {
              o << ::std::endl << "PercentToleranceVsNumErrors: ";
              om.insert (o, *i.PercentToleranceVsNumErrors ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (TestErrorStatisticsData::Differences_const_iterator
                 b (i.Differences ().begin ()), e (i.Differences ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Differences: ";
              om.insert (o, *b);
            }
          }

          o << ::std::endl << "ComputedPropertyID: " << i.ComputedPropertyID ();
          o << ::std::endl << "ExpectedPropertyID: " << i.ExpectedPropertyID ();
          if (i.NumberOfErrors ())
          {
            o << ::std::endl << "NumberOfErrors: " << *i.NumberOfErrors ();
          }

          o << ::std::endl << "PercentTolerance: " << i.PercentTolerance ();
          o << ::std::endl << "PropertyName: " << i.PropertyName ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const TestErrorStatisticsData& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // MinimumError
          //
          if (i.MinimumError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MinimumError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.MinimumError ());
          }

          // MaximumError
          //
          if (i.MaximumError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MaximumError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.MaximumError ());
          }

          // AverageError
          //
          if (i.AverageError ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AverageError",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.AverageError ());
          }

          // StandardDeviation
          //
          if (i.StandardDeviation ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StandardDeviation",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(*i.StandardDeviation ());
          }

          // PercentToleranceVsNumErrors
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PercentToleranceVsNumErrors ())
            {
              const TestErrorStatisticsData::PercentToleranceVsNumErrors_type& x (*i.PercentToleranceVsNumErrors ());
              if (typeid (TestErrorStatisticsData::PercentToleranceVsNumErrors_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PercentToleranceVsNumErrors",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PercentToleranceVsNumErrors",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Differences
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (TestErrorStatisticsData::Differences_const_iterator
                 b (i.Differences ().begin ()), n (i.Differences ().end ());
                 b != n; ++b)
            {
              if (typeid (TestErrorStatisticsData::Differences_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Differences",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Differences",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ComputedPropertyID
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ComputedPropertyID",
                e));

            a << i.ComputedPropertyID ();
          }

          // ExpectedPropertyID
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ExpectedPropertyID",
                e));

            a << i.ExpectedPropertyID ();
          }

          // NumberOfErrors
          //
          if (i.NumberOfErrors ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "NumberOfErrors",
                e));

            a << *i.NumberOfErrors ();
          }

          // PercentTolerance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PercentTolerance",
                e));

            a << ::xml_schema::as_double(i.PercentTolerance ());
          }

          // PropertyName
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PropertyName",
                e));

            a << i.PropertyName ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TestErrorStatisticsData >
        _xsd_TestErrorStatisticsData_type_serializer_init (
          "TestErrorStatisticsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


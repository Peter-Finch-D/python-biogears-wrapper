// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CircuitManagerData.hxx"

#include "ElectricalCircuitNodeData.hxx"

#include "ElectricalCircuitPathData.hxx"

#include "ElectricalCircuitData.hxx"

#include "FluidCircuitNodeData.hxx"

#include "FluidCircuitPathData.hxx"

#include "FluidCircuitData.hxx"

#include "ThermalCircuitNodeData.hxx"

#include "ThermalCircuitPathData.hxx"

#include "ThermalCircuitData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CircuitManagerData
        // 

        const CircuitManagerData::ElectricalNode_sequence& CircuitManagerData::
        ElectricalNode () const
        {
          return this->ElectricalNode_;
        }

        CircuitManagerData::ElectricalNode_sequence& CircuitManagerData::
        ElectricalNode ()
        {
          return this->ElectricalNode_;
        }

        void CircuitManagerData::
        ElectricalNode (const ElectricalNode_sequence& s)
        {
          this->ElectricalNode_ = s;
        }

        const CircuitManagerData::ElectricalPath_sequence& CircuitManagerData::
        ElectricalPath () const
        {
          return this->ElectricalPath_;
        }

        CircuitManagerData::ElectricalPath_sequence& CircuitManagerData::
        ElectricalPath ()
        {
          return this->ElectricalPath_;
        }

        void CircuitManagerData::
        ElectricalPath (const ElectricalPath_sequence& s)
        {
          this->ElectricalPath_ = s;
        }

        const CircuitManagerData::ElectricalCircuit_sequence& CircuitManagerData::
        ElectricalCircuit () const
        {
          return this->ElectricalCircuit_;
        }

        CircuitManagerData::ElectricalCircuit_sequence& CircuitManagerData::
        ElectricalCircuit ()
        {
          return this->ElectricalCircuit_;
        }

        void CircuitManagerData::
        ElectricalCircuit (const ElectricalCircuit_sequence& s)
        {
          this->ElectricalCircuit_ = s;
        }

        const CircuitManagerData::FluidNode_sequence& CircuitManagerData::
        FluidNode () const
        {
          return this->FluidNode_;
        }

        CircuitManagerData::FluidNode_sequence& CircuitManagerData::
        FluidNode ()
        {
          return this->FluidNode_;
        }

        void CircuitManagerData::
        FluidNode (const FluidNode_sequence& s)
        {
          this->FluidNode_ = s;
        }

        const CircuitManagerData::FluidPath_sequence& CircuitManagerData::
        FluidPath () const
        {
          return this->FluidPath_;
        }

        CircuitManagerData::FluidPath_sequence& CircuitManagerData::
        FluidPath ()
        {
          return this->FluidPath_;
        }

        void CircuitManagerData::
        FluidPath (const FluidPath_sequence& s)
        {
          this->FluidPath_ = s;
        }

        const CircuitManagerData::FluidCircuit_sequence& CircuitManagerData::
        FluidCircuit () const
        {
          return this->FluidCircuit_;
        }

        CircuitManagerData::FluidCircuit_sequence& CircuitManagerData::
        FluidCircuit ()
        {
          return this->FluidCircuit_;
        }

        void CircuitManagerData::
        FluidCircuit (const FluidCircuit_sequence& s)
        {
          this->FluidCircuit_ = s;
        }

        const CircuitManagerData::ThermalNode_sequence& CircuitManagerData::
        ThermalNode () const
        {
          return this->ThermalNode_;
        }

        CircuitManagerData::ThermalNode_sequence& CircuitManagerData::
        ThermalNode ()
        {
          return this->ThermalNode_;
        }

        void CircuitManagerData::
        ThermalNode (const ThermalNode_sequence& s)
        {
          this->ThermalNode_ = s;
        }

        const CircuitManagerData::ThermalPath_sequence& CircuitManagerData::
        ThermalPath () const
        {
          return this->ThermalPath_;
        }

        CircuitManagerData::ThermalPath_sequence& CircuitManagerData::
        ThermalPath ()
        {
          return this->ThermalPath_;
        }

        void CircuitManagerData::
        ThermalPath (const ThermalPath_sequence& s)
        {
          this->ThermalPath_ = s;
        }

        const CircuitManagerData::ThermalCircuit_sequence& CircuitManagerData::
        ThermalCircuit () const
        {
          return this->ThermalCircuit_;
        }

        CircuitManagerData::ThermalCircuit_sequence& CircuitManagerData::
        ThermalCircuit ()
        {
          return this->ThermalCircuit_;
        }

        void CircuitManagerData::
        ThermalCircuit (const ThermalCircuit_sequence& s)
        {
          this->ThermalCircuit_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CircuitManagerData
        //

        CircuitManagerData::
        CircuitManagerData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          ElectricalNode_ (this),
          ElectricalPath_ (this),
          ElectricalCircuit_ (this),
          FluidNode_ (this),
          FluidPath_ (this),
          FluidCircuit_ (this),
          ThermalNode_ (this),
          ThermalPath_ (this),
          ThermalCircuit_ (this)
        {
        }

        CircuitManagerData::
        CircuitManagerData (const CircuitManagerData& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          ElectricalNode_ (x.ElectricalNode_, f, this),
          ElectricalPath_ (x.ElectricalPath_, f, this),
          ElectricalCircuit_ (x.ElectricalCircuit_, f, this),
          FluidNode_ (x.FluidNode_, f, this),
          FluidPath_ (x.FluidPath_, f, this),
          FluidCircuit_ (x.FluidCircuit_, f, this),
          ThermalNode_ (x.ThermalNode_, f, this),
          ThermalPath_ (x.ThermalPath_, f, this),
          ThermalCircuit_ (x.ThermalCircuit_, f, this)
        {
        }

        CircuitManagerData::
        CircuitManagerData (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          ElectricalNode_ (this),
          ElectricalPath_ (this),
          ElectricalCircuit_ (this),
          FluidNode_ (this),
          FluidPath_ (this),
          FluidCircuit_ (this),
          ThermalNode_ (this),
          ThermalPath_ (this),
          ThermalCircuit_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CircuitManagerData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ElectricalNode
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalNode_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalNode_type > r (
                  dynamic_cast< ElectricalNode_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalNode_.push_back (::std::move (r));
                continue;
              }
            }

            // ElectricalPath
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalPath_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalPath_type > r (
                  dynamic_cast< ElectricalPath_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalPath_.push_back (::std::move (r));
                continue;
              }
            }

            // ElectricalCircuit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalCircuit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalCircuit_type > r (
                  dynamic_cast< ElectricalCircuit_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalCircuit_.push_back (::std::move (r));
                continue;
              }
            }

            // FluidNode
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FluidNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FluidNode_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< FluidNode_type > r (
                  dynamic_cast< FluidNode_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->FluidNode_.push_back (::std::move (r));
                continue;
              }
            }

            // FluidPath
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FluidPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FluidPath_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< FluidPath_type > r (
                  dynamic_cast< FluidPath_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->FluidPath_.push_back (::std::move (r));
                continue;
              }
            }

            // FluidCircuit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FluidCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FluidCircuit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< FluidCircuit_type > r (
                  dynamic_cast< FluidCircuit_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->FluidCircuit_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalNode
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalNode_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalNode_type > r (
                  dynamic_cast< ThermalNode_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalNode_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalPath
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalPath_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalPath_type > r (
                  dynamic_cast< ThermalPath_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalPath_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalCircuit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalCircuit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalCircuit_type > r (
                  dynamic_cast< ThermalCircuit_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalCircuit_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        CircuitManagerData* CircuitManagerData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CircuitManagerData (*this, f, c);
        }

        CircuitManagerData& CircuitManagerData::
        operator= (const CircuitManagerData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->ElectricalNode_ = x.ElectricalNode_;
            this->ElectricalPath_ = x.ElectricalPath_;
            this->ElectricalCircuit_ = x.ElectricalCircuit_;
            this->FluidNode_ = x.FluidNode_;
            this->FluidPath_ = x.FluidPath_;
            this->FluidCircuit_ = x.FluidCircuit_;
            this->ThermalNode_ = x.ThermalNode_;
            this->ThermalPath_ = x.ThermalPath_;
            this->ThermalCircuit_ = x.ThermalCircuit_;
          }

          return *this;
        }

        CircuitManagerData::
        ~CircuitManagerData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CircuitManagerData >
        _xsd_CircuitManagerData_type_factory_init (
          "CircuitManagerData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CircuitManagerData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalNode_const_iterator
                 b (i.ElectricalNode ().begin ()), e (i.ElectricalNode ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalNode: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalPath_const_iterator
                 b (i.ElectricalPath ().begin ()), e (i.ElectricalPath ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalPath: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalCircuit_const_iterator
                 b (i.ElectricalCircuit ().begin ()), e (i.ElectricalCircuit ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalCircuit: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::FluidNode_const_iterator
                 b (i.FluidNode ().begin ()), e (i.FluidNode ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "FluidNode: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::FluidPath_const_iterator
                 b (i.FluidPath ().begin ()), e (i.FluidPath ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "FluidPath: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::FluidCircuit_const_iterator
                 b (i.FluidCircuit ().begin ()), e (i.FluidCircuit ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "FluidCircuit: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalNode_const_iterator
                 b (i.ThermalNode ().begin ()), e (i.ThermalNode ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalNode: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalPath_const_iterator
                 b (i.ThermalPath ().begin ()), e (i.ThermalPath ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalPath: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalCircuit_const_iterator
                 b (i.ThermalCircuit ().begin ()), e (i.ThermalCircuit ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalCircuit: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CircuitManagerData >
        _xsd_CircuitManagerData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CircuitManagerData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // ElectricalNode
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalNode_const_iterator
                 b (i.ElectricalNode ().begin ()), n (i.ElectricalNode ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ElectricalNode_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalNode",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ElectricalPath
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalPath_const_iterator
                 b (i.ElectricalPath ().begin ()), n (i.ElectricalPath ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ElectricalPath_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalPath",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ElectricalCircuit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ElectricalCircuit_const_iterator
                 b (i.ElectricalCircuit ().begin ()), n (i.ElectricalCircuit ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ElectricalCircuit_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalCircuit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // FluidNode
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::FluidNode_const_iterator
                 b (i.FluidNode ().begin ()), n (i.FluidNode ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::FluidNode_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FluidNode",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "FluidNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // FluidPath
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::FluidPath_const_iterator
                 b (i.FluidPath ().begin ()), n (i.FluidPath ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::FluidPath_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FluidPath",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "FluidPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // FluidCircuit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::FluidCircuit_const_iterator
                 b (i.FluidCircuit ().begin ()), n (i.FluidCircuit ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::FluidCircuit_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FluidCircuit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "FluidCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalNode
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalNode_const_iterator
                 b (i.ThermalNode ().begin ()), n (i.ThermalNode ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ThermalNode_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalNode",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalNode",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalPath
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalPath_const_iterator
                 b (i.ThermalPath ().begin ()), n (i.ThermalPath ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ThermalPath_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalPath",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalPath",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalCircuit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CircuitManagerData::ThermalCircuit_const_iterator
                 b (i.ThermalCircuit ().begin ()), n (i.ThermalCircuit ().end ());
                 b != n; ++b)
            {
              if (typeid (CircuitManagerData::ThermalCircuit_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalCircuit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalCircuit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CircuitManagerData >
        _xsd_CircuitManagerData_type_serializer_init (
          "CircuitManagerData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


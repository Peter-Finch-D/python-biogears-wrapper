// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RespiratoryConfigurationData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarData.hxx"

#include "ScalarInverseVolumeData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarVolumeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RespiratoryConfigurationData
        // 

        const RespiratoryConfigurationData::CentralControllerCO2PressureSetPoint_optional& RespiratoryConfigurationData::
        CentralControllerCO2PressureSetPoint () const
        {
          return this->CentralControllerCO2PressureSetPoint_;
        }

        RespiratoryConfigurationData::CentralControllerCO2PressureSetPoint_optional& RespiratoryConfigurationData::
        CentralControllerCO2PressureSetPoint ()
        {
          return this->CentralControllerCO2PressureSetPoint_;
        }

        void RespiratoryConfigurationData::
        CentralControllerCO2PressureSetPoint (const CentralControllerCO2PressureSetPoint_type& x)
        {
          this->CentralControllerCO2PressureSetPoint_.set (x);
        }

        void RespiratoryConfigurationData::
        CentralControllerCO2PressureSetPoint (const CentralControllerCO2PressureSetPoint_optional& x)
        {
          this->CentralControllerCO2PressureSetPoint_ = x;
        }

        void RespiratoryConfigurationData::
        CentralControllerCO2PressureSetPoint (::std::unique_ptr< CentralControllerCO2PressureSetPoint_type > x)
        {
          this->CentralControllerCO2PressureSetPoint_.set (std::move (x));
        }

        const RespiratoryConfigurationData::CentralVentilatoryControllerGain_optional& RespiratoryConfigurationData::
        CentralVentilatoryControllerGain () const
        {
          return this->CentralVentilatoryControllerGain_;
        }

        RespiratoryConfigurationData::CentralVentilatoryControllerGain_optional& RespiratoryConfigurationData::
        CentralVentilatoryControllerGain ()
        {
          return this->CentralVentilatoryControllerGain_;
        }

        void RespiratoryConfigurationData::
        CentralVentilatoryControllerGain (const CentralVentilatoryControllerGain_type& x)
        {
          this->CentralVentilatoryControllerGain_.set (x);
        }

        void RespiratoryConfigurationData::
        CentralVentilatoryControllerGain (const CentralVentilatoryControllerGain_optional& x)
        {
          this->CentralVentilatoryControllerGain_ = x;
        }

        void RespiratoryConfigurationData::
        CentralVentilatoryControllerGain (::std::unique_ptr< CentralVentilatoryControllerGain_type > x)
        {
          this->CentralVentilatoryControllerGain_.set (std::move (x));
        }

        const RespiratoryConfigurationData::PeripheralControllerCO2PressureSetPoint_optional& RespiratoryConfigurationData::
        PeripheralControllerCO2PressureSetPoint () const
        {
          return this->PeripheralControllerCO2PressureSetPoint_;
        }

        RespiratoryConfigurationData::PeripheralControllerCO2PressureSetPoint_optional& RespiratoryConfigurationData::
        PeripheralControllerCO2PressureSetPoint ()
        {
          return this->PeripheralControllerCO2PressureSetPoint_;
        }

        void RespiratoryConfigurationData::
        PeripheralControllerCO2PressureSetPoint (const PeripheralControllerCO2PressureSetPoint_type& x)
        {
          this->PeripheralControllerCO2PressureSetPoint_.set (x);
        }

        void RespiratoryConfigurationData::
        PeripheralControllerCO2PressureSetPoint (const PeripheralControllerCO2PressureSetPoint_optional& x)
        {
          this->PeripheralControllerCO2PressureSetPoint_ = x;
        }

        void RespiratoryConfigurationData::
        PeripheralControllerCO2PressureSetPoint (::std::unique_ptr< PeripheralControllerCO2PressureSetPoint_type > x)
        {
          this->PeripheralControllerCO2PressureSetPoint_.set (std::move (x));
        }

        const RespiratoryConfigurationData::PeripheralVentilatoryControllerGain_optional& RespiratoryConfigurationData::
        PeripheralVentilatoryControllerGain () const
        {
          return this->PeripheralVentilatoryControllerGain_;
        }

        RespiratoryConfigurationData::PeripheralVentilatoryControllerGain_optional& RespiratoryConfigurationData::
        PeripheralVentilatoryControllerGain ()
        {
          return this->PeripheralVentilatoryControllerGain_;
        }

        void RespiratoryConfigurationData::
        PeripheralVentilatoryControllerGain (const PeripheralVentilatoryControllerGain_type& x)
        {
          this->PeripheralVentilatoryControllerGain_.set (x);
        }

        void RespiratoryConfigurationData::
        PeripheralVentilatoryControllerGain (const PeripheralVentilatoryControllerGain_optional& x)
        {
          this->PeripheralVentilatoryControllerGain_ = x;
        }

        void RespiratoryConfigurationData::
        PeripheralVentilatoryControllerGain (::std::unique_ptr< PeripheralVentilatoryControllerGain_type > x)
        {
          this->PeripheralVentilatoryControllerGain_.set (std::move (x));
        }

        const RespiratoryConfigurationData::PleuralComplianceSensitivity_optional& RespiratoryConfigurationData::
        PleuralComplianceSensitivity () const
        {
          return this->PleuralComplianceSensitivity_;
        }

        RespiratoryConfigurationData::PleuralComplianceSensitivity_optional& RespiratoryConfigurationData::
        PleuralComplianceSensitivity ()
        {
          return this->PleuralComplianceSensitivity_;
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (const PleuralComplianceSensitivity_type& x)
        {
          this->PleuralComplianceSensitivity_.set (x);
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (const PleuralComplianceSensitivity_optional& x)
        {
          this->PleuralComplianceSensitivity_ = x;
        }

        void RespiratoryConfigurationData::
        PleuralComplianceSensitivity (::std::unique_ptr< PleuralComplianceSensitivity_type > x)
        {
          this->PleuralComplianceSensitivity_.set (std::move (x));
        }

        const RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_optional& RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum () const
        {
          return this->PulmonaryVentilationRateMaximum_;
        }

        RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_optional& RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum ()
        {
          return this->PulmonaryVentilationRateMaximum_;
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_type& x)
        {
          this->PulmonaryVentilationRateMaximum_.set (x);
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (const PulmonaryVentilationRateMaximum_optional& x)
        {
          this->PulmonaryVentilationRateMaximum_ = x;
        }

        void RespiratoryConfigurationData::
        PulmonaryVentilationRateMaximum (::std::unique_ptr< PulmonaryVentilationRateMaximum_type > x)
        {
          this->PulmonaryVentilationRateMaximum_.set (std::move (x));
        }

        const RespiratoryConfigurationData::VentilationTidalVolumeIntercept_optional& RespiratoryConfigurationData::
        VentilationTidalVolumeIntercept () const
        {
          return this->VentilationTidalVolumeIntercept_;
        }

        RespiratoryConfigurationData::VentilationTidalVolumeIntercept_optional& RespiratoryConfigurationData::
        VentilationTidalVolumeIntercept ()
        {
          return this->VentilationTidalVolumeIntercept_;
        }

        void RespiratoryConfigurationData::
        VentilationTidalVolumeIntercept (const VentilationTidalVolumeIntercept_type& x)
        {
          this->VentilationTidalVolumeIntercept_.set (x);
        }

        void RespiratoryConfigurationData::
        VentilationTidalVolumeIntercept (const VentilationTidalVolumeIntercept_optional& x)
        {
          this->VentilationTidalVolumeIntercept_ = x;
        }

        void RespiratoryConfigurationData::
        VentilationTidalVolumeIntercept (::std::unique_ptr< VentilationTidalVolumeIntercept_type > x)
        {
          this->VentilationTidalVolumeIntercept_.set (std::move (x));
        }

        const RespiratoryConfigurationData::VentilatoryOcclusionPressure_optional& RespiratoryConfigurationData::
        VentilatoryOcclusionPressure () const
        {
          return this->VentilatoryOcclusionPressure_;
        }

        RespiratoryConfigurationData::VentilatoryOcclusionPressure_optional& RespiratoryConfigurationData::
        VentilatoryOcclusionPressure ()
        {
          return this->VentilatoryOcclusionPressure_;
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_type& x)
        {
          this->VentilatoryOcclusionPressure_.set (x);
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (const VentilatoryOcclusionPressure_optional& x)
        {
          this->VentilatoryOcclusionPressure_ = x;
        }

        void RespiratoryConfigurationData::
        VentilatoryOcclusionPressure (::std::unique_ptr< VentilatoryOcclusionPressure_type > x)
        {
          this->VentilatoryOcclusionPressure_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RespiratoryConfigurationData
        //

        RespiratoryConfigurationData::
        RespiratoryConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          CentralControllerCO2PressureSetPoint_ (this),
          CentralVentilatoryControllerGain_ (this),
          PeripheralControllerCO2PressureSetPoint_ (this),
          PeripheralVentilatoryControllerGain_ (this),
          PleuralComplianceSensitivity_ (this),
          PulmonaryVentilationRateMaximum_ (this),
          VentilationTidalVolumeIntercept_ (this),
          VentilatoryOcclusionPressure_ (this)
        {
        }

        RespiratoryConfigurationData::
        RespiratoryConfigurationData (const RespiratoryConfigurationData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          CentralControllerCO2PressureSetPoint_ (x.CentralControllerCO2PressureSetPoint_, f, this),
          CentralVentilatoryControllerGain_ (x.CentralVentilatoryControllerGain_, f, this),
          PeripheralControllerCO2PressureSetPoint_ (x.PeripheralControllerCO2PressureSetPoint_, f, this),
          PeripheralVentilatoryControllerGain_ (x.PeripheralVentilatoryControllerGain_, f, this),
          PleuralComplianceSensitivity_ (x.PleuralComplianceSensitivity_, f, this),
          PulmonaryVentilationRateMaximum_ (x.PulmonaryVentilationRateMaximum_, f, this),
          VentilationTidalVolumeIntercept_ (x.VentilationTidalVolumeIntercept_, f, this),
          VentilatoryOcclusionPressure_ (x.VentilatoryOcclusionPressure_, f, this)
        {
        }

        RespiratoryConfigurationData::
        RespiratoryConfigurationData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          CentralControllerCO2PressureSetPoint_ (this),
          CentralVentilatoryControllerGain_ (this),
          PeripheralControllerCO2PressureSetPoint_ (this),
          PeripheralVentilatoryControllerGain_ (this),
          PleuralComplianceSensitivity_ (this),
          PulmonaryVentilationRateMaximum_ (this),
          VentilationTidalVolumeIntercept_ (this),
          VentilatoryOcclusionPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void RespiratoryConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CentralControllerCO2PressureSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralControllerCO2PressureSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralControllerCO2PressureSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralControllerCO2PressureSetPoint_)
                {
                  ::std::unique_ptr< CentralControllerCO2PressureSetPoint_type > r (
                    dynamic_cast< CentralControllerCO2PressureSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralControllerCO2PressureSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralVentilatoryControllerGain
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralVentilatoryControllerGain",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralVentilatoryControllerGain_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralVentilatoryControllerGain_)
                {
                  ::std::unique_ptr< CentralVentilatoryControllerGain_type > r (
                    dynamic_cast< CentralVentilatoryControllerGain_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralVentilatoryControllerGain_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PeripheralControllerCO2PressureSetPoint
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PeripheralControllerCO2PressureSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PeripheralControllerCO2PressureSetPoint_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PeripheralControllerCO2PressureSetPoint_)
                {
                  ::std::unique_ptr< PeripheralControllerCO2PressureSetPoint_type > r (
                    dynamic_cast< PeripheralControllerCO2PressureSetPoint_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PeripheralControllerCO2PressureSetPoint_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PeripheralVentilatoryControllerGain
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PeripheralVentilatoryControllerGain",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PeripheralVentilatoryControllerGain_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PeripheralVentilatoryControllerGain_)
                {
                  ::std::unique_ptr< PeripheralVentilatoryControllerGain_type > r (
                    dynamic_cast< PeripheralVentilatoryControllerGain_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PeripheralVentilatoryControllerGain_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PleuralComplianceSensitivity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PleuralComplianceSensitivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PleuralComplianceSensitivity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PleuralComplianceSensitivity_)
                {
                  ::std::unique_ptr< PleuralComplianceSensitivity_type > r (
                    dynamic_cast< PleuralComplianceSensitivity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PleuralComplianceSensitivity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVentilationRateMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVentilationRateMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVentilationRateMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVentilationRateMaximum_)
                {
                  ::std::unique_ptr< PulmonaryVentilationRateMaximum_type > r (
                    dynamic_cast< PulmonaryVentilationRateMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVentilationRateMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VentilationTidalVolumeIntercept
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VentilationTidalVolumeIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VentilationTidalVolumeIntercept_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VentilationTidalVolumeIntercept_)
                {
                  ::std::unique_ptr< VentilationTidalVolumeIntercept_type > r (
                    dynamic_cast< VentilationTidalVolumeIntercept_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VentilationTidalVolumeIntercept_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VentilatoryOcclusionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VentilatoryOcclusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VentilatoryOcclusionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VentilatoryOcclusionPressure_)
                {
                  ::std::unique_ptr< VentilatoryOcclusionPressure_type > r (
                    dynamic_cast< VentilatoryOcclusionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VentilatoryOcclusionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RespiratoryConfigurationData* RespiratoryConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RespiratoryConfigurationData (*this, f, c);
        }

        RespiratoryConfigurationData& RespiratoryConfigurationData::
        operator= (const RespiratoryConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->CentralControllerCO2PressureSetPoint_ = x.CentralControllerCO2PressureSetPoint_;
            this->CentralVentilatoryControllerGain_ = x.CentralVentilatoryControllerGain_;
            this->PeripheralControllerCO2PressureSetPoint_ = x.PeripheralControllerCO2PressureSetPoint_;
            this->PeripheralVentilatoryControllerGain_ = x.PeripheralVentilatoryControllerGain_;
            this->PleuralComplianceSensitivity_ = x.PleuralComplianceSensitivity_;
            this->PulmonaryVentilationRateMaximum_ = x.PulmonaryVentilationRateMaximum_;
            this->VentilationTidalVolumeIntercept_ = x.VentilationTidalVolumeIntercept_;
            this->VentilatoryOcclusionPressure_ = x.VentilatoryOcclusionPressure_;
          }

          return *this;
        }

        RespiratoryConfigurationData::
        ~RespiratoryConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_type_factory_init (
          "RespiratoryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const RespiratoryConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralControllerCO2PressureSetPoint ())
            {
              o << ::std::endl << "CentralControllerCO2PressureSetPoint: ";
              om.insert (o, *i.CentralControllerCO2PressureSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralVentilatoryControllerGain ())
            {
              o << ::std::endl << "CentralVentilatoryControllerGain: ";
              om.insert (o, *i.CentralVentilatoryControllerGain ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PeripheralControllerCO2PressureSetPoint ())
            {
              o << ::std::endl << "PeripheralControllerCO2PressureSetPoint: ";
              om.insert (o, *i.PeripheralControllerCO2PressureSetPoint ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PeripheralVentilatoryControllerGain ())
            {
              o << ::std::endl << "PeripheralVentilatoryControllerGain: ";
              om.insert (o, *i.PeripheralVentilatoryControllerGain ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PleuralComplianceSensitivity ())
            {
              o << ::std::endl << "PleuralComplianceSensitivity: ";
              om.insert (o, *i.PleuralComplianceSensitivity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVentilationRateMaximum ())
            {
              o << ::std::endl << "PulmonaryVentilationRateMaximum: ";
              om.insert (o, *i.PulmonaryVentilationRateMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VentilationTidalVolumeIntercept ())
            {
              o << ::std::endl << "VentilationTidalVolumeIntercept: ";
              om.insert (o, *i.VentilationTidalVolumeIntercept ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VentilatoryOcclusionPressure ())
            {
              o << ::std::endl << "VentilatoryOcclusionPressure: ";
              om.insert (o, *i.VentilatoryOcclusionPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const RespiratoryConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // CentralControllerCO2PressureSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralControllerCO2PressureSetPoint ())
            {
              const RespiratoryConfigurationData::CentralControllerCO2PressureSetPoint_type& x (*i.CentralControllerCO2PressureSetPoint ());
              if (typeid (RespiratoryConfigurationData::CentralControllerCO2PressureSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralControllerCO2PressureSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralControllerCO2PressureSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CentralVentilatoryControllerGain
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralVentilatoryControllerGain ())
            {
              const RespiratoryConfigurationData::CentralVentilatoryControllerGain_type& x (*i.CentralVentilatoryControllerGain ());
              if (typeid (RespiratoryConfigurationData::CentralVentilatoryControllerGain_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralVentilatoryControllerGain",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralVentilatoryControllerGain",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PeripheralControllerCO2PressureSetPoint
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PeripheralControllerCO2PressureSetPoint ())
            {
              const RespiratoryConfigurationData::PeripheralControllerCO2PressureSetPoint_type& x (*i.PeripheralControllerCO2PressureSetPoint ());
              if (typeid (RespiratoryConfigurationData::PeripheralControllerCO2PressureSetPoint_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PeripheralControllerCO2PressureSetPoint",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PeripheralControllerCO2PressureSetPoint",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PeripheralVentilatoryControllerGain
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PeripheralVentilatoryControllerGain ())
            {
              const RespiratoryConfigurationData::PeripheralVentilatoryControllerGain_type& x (*i.PeripheralVentilatoryControllerGain ());
              if (typeid (RespiratoryConfigurationData::PeripheralVentilatoryControllerGain_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PeripheralVentilatoryControllerGain",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PeripheralVentilatoryControllerGain",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PleuralComplianceSensitivity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PleuralComplianceSensitivity ())
            {
              const RespiratoryConfigurationData::PleuralComplianceSensitivity_type& x (*i.PleuralComplianceSensitivity ());
              if (typeid (RespiratoryConfigurationData::PleuralComplianceSensitivity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PleuralComplianceSensitivity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PleuralComplianceSensitivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVentilationRateMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVentilationRateMaximum ())
            {
              const RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_type& x (*i.PulmonaryVentilationRateMaximum ());
              if (typeid (RespiratoryConfigurationData::PulmonaryVentilationRateMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVentilationRateMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVentilationRateMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VentilationTidalVolumeIntercept
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VentilationTidalVolumeIntercept ())
            {
              const RespiratoryConfigurationData::VentilationTidalVolumeIntercept_type& x (*i.VentilationTidalVolumeIntercept ());
              if (typeid (RespiratoryConfigurationData::VentilationTidalVolumeIntercept_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VentilationTidalVolumeIntercept",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VentilationTidalVolumeIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VentilatoryOcclusionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VentilatoryOcclusionPressure ())
            {
              const RespiratoryConfigurationData::VentilatoryOcclusionPressure_type& x (*i.VentilatoryOcclusionPressure ());
              if (typeid (RespiratoryConfigurationData::VentilatoryOcclusionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VentilatoryOcclusionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VentilatoryOcclusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RespiratoryConfigurationData >
        _xsd_RespiratoryConfigurationData_type_serializer_init (
          "RespiratoryConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


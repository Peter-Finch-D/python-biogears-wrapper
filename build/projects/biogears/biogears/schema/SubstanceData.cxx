// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SubstanceData.hxx"

#include "enumSubstanceClass.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarMassPerAmountData.hxx"

#include "enumSubstanceState.hxx"

#include "ScalarMassPerAreaTimeData.hxx"

#include "ScalarData.hxx"

#include "ScalarElectricResistanceData.hxx"

#include "SubstanceAerosolizationData.hxx"

#include "ScalarMassData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarVolumePerTimePressureData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarInversePressureData.hxx"

#include "SubstanceClearanceData.hxx"

#include "SubstancePharmacokineticsData.hxx"

#include "SubstancePharmacodynamicsData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstanceData
        // 

        const SubstanceData::Name_type& SubstanceData::
        Name () const
        {
          return this->Name_.get ();
        }

        SubstanceData::Name_type& SubstanceData::
        Name ()
        {
          return this->Name_.get ();
        }

        void SubstanceData::
        Name (const Name_type& x)
        {
          this->Name_.set (x);
        }

        void SubstanceData::
        Name (::std::unique_ptr< Name_type > x)
        {
          this->Name_.set (std::move (x));
        }

        const SubstanceData::Classification_optional& SubstanceData::
        Classification () const
        {
          return this->Classification_;
        }

        SubstanceData::Classification_optional& SubstanceData::
        Classification ()
        {
          return this->Classification_;
        }

        void SubstanceData::
        Classification (const Classification_type& x)
        {
          this->Classification_.set (x);
        }

        void SubstanceData::
        Classification (const Classification_optional& x)
        {
          this->Classification_ = x;
        }

        void SubstanceData::
        Classification (::std::unique_ptr< Classification_type > x)
        {
          this->Classification_.set (std::move (x));
        }

        const SubstanceData::Density_optional& SubstanceData::
        Density () const
        {
          return this->Density_;
        }

        SubstanceData::Density_optional& SubstanceData::
        Density ()
        {
          return this->Density_;
        }

        void SubstanceData::
        Density (const Density_type& x)
        {
          this->Density_.set (x);
        }

        void SubstanceData::
        Density (const Density_optional& x)
        {
          this->Density_ = x;
        }

        void SubstanceData::
        Density (::std::unique_ptr< Density_type > x)
        {
          this->Density_.set (std::move (x));
        }

        const SubstanceData::MolarMass_optional& SubstanceData::
        MolarMass () const
        {
          return this->MolarMass_;
        }

        SubstanceData::MolarMass_optional& SubstanceData::
        MolarMass ()
        {
          return this->MolarMass_;
        }

        void SubstanceData::
        MolarMass (const MolarMass_type& x)
        {
          this->MolarMass_.set (x);
        }

        void SubstanceData::
        MolarMass (const MolarMass_optional& x)
        {
          this->MolarMass_ = x;
        }

        void SubstanceData::
        MolarMass (::std::unique_ptr< MolarMass_type > x)
        {
          this->MolarMass_.set (std::move (x));
        }

        const SubstanceData::State_optional& SubstanceData::
        State () const
        {
          return this->State_;
        }

        SubstanceData::State_optional& SubstanceData::
        State ()
        {
          return this->State_;
        }

        void SubstanceData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void SubstanceData::
        State (const State_optional& x)
        {
          this->State_ = x;
        }

        void SubstanceData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const SubstanceData::MaximumDiffusionFlux_optional& SubstanceData::
        MaximumDiffusionFlux () const
        {
          return this->MaximumDiffusionFlux_;
        }

        SubstanceData::MaximumDiffusionFlux_optional& SubstanceData::
        MaximumDiffusionFlux ()
        {
          return this->MaximumDiffusionFlux_;
        }

        void SubstanceData::
        MaximumDiffusionFlux (const MaximumDiffusionFlux_type& x)
        {
          this->MaximumDiffusionFlux_.set (x);
        }

        void SubstanceData::
        MaximumDiffusionFlux (const MaximumDiffusionFlux_optional& x)
        {
          this->MaximumDiffusionFlux_ = x;
        }

        void SubstanceData::
        MaximumDiffusionFlux (::std::unique_ptr< MaximumDiffusionFlux_type > x)
        {
          this->MaximumDiffusionFlux_.set (std::move (x));
        }

        const SubstanceData::MichaelisCoefficient_optional& SubstanceData::
        MichaelisCoefficient () const
        {
          return this->MichaelisCoefficient_;
        }

        SubstanceData::MichaelisCoefficient_optional& SubstanceData::
        MichaelisCoefficient ()
        {
          return this->MichaelisCoefficient_;
        }

        void SubstanceData::
        MichaelisCoefficient (const MichaelisCoefficient_type& x)
        {
          this->MichaelisCoefficient_.set (x);
        }

        void SubstanceData::
        MichaelisCoefficient (const MichaelisCoefficient_optional& x)
        {
          this->MichaelisCoefficient_ = x;
        }

        void SubstanceData::
        MichaelisCoefficient (::std::unique_ptr< MichaelisCoefficient_type > x)
        {
          this->MichaelisCoefficient_.set (std::move (x));
        }

        const SubstanceData::MembraneResistance_optional& SubstanceData::
        MembraneResistance () const
        {
          return this->MembraneResistance_;
        }

        SubstanceData::MembraneResistance_optional& SubstanceData::
        MembraneResistance ()
        {
          return this->MembraneResistance_;
        }

        void SubstanceData::
        MembraneResistance (const MembraneResistance_type& x)
        {
          this->MembraneResistance_.set (x);
        }

        void SubstanceData::
        MembraneResistance (const MembraneResistance_optional& x)
        {
          this->MembraneResistance_ = x;
        }

        void SubstanceData::
        MembraneResistance (::std::unique_ptr< MembraneResistance_type > x)
        {
          this->MembraneResistance_.set (std::move (x));
        }

        const SubstanceData::Aerosolization_optional& SubstanceData::
        Aerosolization () const
        {
          return this->Aerosolization_;
        }

        SubstanceData::Aerosolization_optional& SubstanceData::
        Aerosolization ()
        {
          return this->Aerosolization_;
        }

        void SubstanceData::
        Aerosolization (const Aerosolization_type& x)
        {
          this->Aerosolization_.set (x);
        }

        void SubstanceData::
        Aerosolization (const Aerosolization_optional& x)
        {
          this->Aerosolization_ = x;
        }

        void SubstanceData::
        Aerosolization (::std::unique_ptr< Aerosolization_type > x)
        {
          this->Aerosolization_.set (std::move (x));
        }

        const SubstanceData::BloodConcentration_optional& SubstanceData::
        BloodConcentration () const
        {
          return this->BloodConcentration_;
        }

        SubstanceData::BloodConcentration_optional& SubstanceData::
        BloodConcentration ()
        {
          return this->BloodConcentration_;
        }

        void SubstanceData::
        BloodConcentration (const BloodConcentration_type& x)
        {
          this->BloodConcentration_.set (x);
        }

        void SubstanceData::
        BloodConcentration (const BloodConcentration_optional& x)
        {
          this->BloodConcentration_ = x;
        }

        void SubstanceData::
        BloodConcentration (::std::unique_ptr< BloodConcentration_type > x)
        {
          this->BloodConcentration_.set (std::move (x));
        }

        const SubstanceData::MassInBody_optional& SubstanceData::
        MassInBody () const
        {
          return this->MassInBody_;
        }

        SubstanceData::MassInBody_optional& SubstanceData::
        MassInBody ()
        {
          return this->MassInBody_;
        }

        void SubstanceData::
        MassInBody (const MassInBody_type& x)
        {
          this->MassInBody_.set (x);
        }

        void SubstanceData::
        MassInBody (const MassInBody_optional& x)
        {
          this->MassInBody_ = x;
        }

        void SubstanceData::
        MassInBody (::std::unique_ptr< MassInBody_type > x)
        {
          this->MassInBody_.set (std::move (x));
        }

        const SubstanceData::MassInBlood_optional& SubstanceData::
        MassInBlood () const
        {
          return this->MassInBlood_;
        }

        SubstanceData::MassInBlood_optional& SubstanceData::
        MassInBlood ()
        {
          return this->MassInBlood_;
        }

        void SubstanceData::
        MassInBlood (const MassInBlood_type& x)
        {
          this->MassInBlood_.set (x);
        }

        void SubstanceData::
        MassInBlood (const MassInBlood_optional& x)
        {
          this->MassInBlood_ = x;
        }

        void SubstanceData::
        MassInBlood (::std::unique_ptr< MassInBlood_type > x)
        {
          this->MassInBlood_.set (std::move (x));
        }

        const SubstanceData::MassInTissue_optional& SubstanceData::
        MassInTissue () const
        {
          return this->MassInTissue_;
        }

        SubstanceData::MassInTissue_optional& SubstanceData::
        MassInTissue ()
        {
          return this->MassInTissue_;
        }

        void SubstanceData::
        MassInTissue (const MassInTissue_type& x)
        {
          this->MassInTissue_.set (x);
        }

        void SubstanceData::
        MassInTissue (const MassInTissue_optional& x)
        {
          this->MassInTissue_ = x;
        }

        void SubstanceData::
        MassInTissue (::std::unique_ptr< MassInTissue_type > x)
        {
          this->MassInTissue_.set (std::move (x));
        }

        const SubstanceData::PlasmaConcentration_optional& SubstanceData::
        PlasmaConcentration () const
        {
          return this->PlasmaConcentration_;
        }

        SubstanceData::PlasmaConcentration_optional& SubstanceData::
        PlasmaConcentration ()
        {
          return this->PlasmaConcentration_;
        }

        void SubstanceData::
        PlasmaConcentration (const PlasmaConcentration_type& x)
        {
          this->PlasmaConcentration_.set (x);
        }

        void SubstanceData::
        PlasmaConcentration (const PlasmaConcentration_optional& x)
        {
          this->PlasmaConcentration_ = x;
        }

        void SubstanceData::
        PlasmaConcentration (::std::unique_ptr< PlasmaConcentration_type > x)
        {
          this->PlasmaConcentration_.set (std::move (x));
        }

        const SubstanceData::SystemicMassCleared_optional& SubstanceData::
        SystemicMassCleared () const
        {
          return this->SystemicMassCleared_;
        }

        SubstanceData::SystemicMassCleared_optional& SubstanceData::
        SystemicMassCleared ()
        {
          return this->SystemicMassCleared_;
        }

        void SubstanceData::
        SystemicMassCleared (const SystemicMassCleared_type& x)
        {
          this->SystemicMassCleared_.set (x);
        }

        void SubstanceData::
        SystemicMassCleared (const SystemicMassCleared_optional& x)
        {
          this->SystemicMassCleared_ = x;
        }

        void SubstanceData::
        SystemicMassCleared (::std::unique_ptr< SystemicMassCleared_type > x)
        {
          this->SystemicMassCleared_.set (std::move (x));
        }

        const SubstanceData::EffectSiteConcentration_optional& SubstanceData::
        EffectSiteConcentration () const
        {
          return this->EffectSiteConcentration_;
        }

        SubstanceData::EffectSiteConcentration_optional& SubstanceData::
        EffectSiteConcentration ()
        {
          return this->EffectSiteConcentration_;
        }

        void SubstanceData::
        EffectSiteConcentration (const EffectSiteConcentration_type& x)
        {
          this->EffectSiteConcentration_.set (x);
        }

        void SubstanceData::
        EffectSiteConcentration (const EffectSiteConcentration_optional& x)
        {
          this->EffectSiteConcentration_ = x;
        }

        void SubstanceData::
        EffectSiteConcentration (::std::unique_ptr< EffectSiteConcentration_type > x)
        {
          this->EffectSiteConcentration_.set (std::move (x));
        }

        const SubstanceData::TissueConcentration_optional& SubstanceData::
        TissueConcentration () const
        {
          return this->TissueConcentration_;
        }

        SubstanceData::TissueConcentration_optional& SubstanceData::
        TissueConcentration ()
        {
          return this->TissueConcentration_;
        }

        void SubstanceData::
        TissueConcentration (const TissueConcentration_type& x)
        {
          this->TissueConcentration_.set (x);
        }

        void SubstanceData::
        TissueConcentration (const TissueConcentration_optional& x)
        {
          this->TissueConcentration_ = x;
        }

        void SubstanceData::
        TissueConcentration (::std::unique_ptr< TissueConcentration_type > x)
        {
          this->TissueConcentration_.set (std::move (x));
        }

        const SubstanceData::AlveolarTransfer_optional& SubstanceData::
        AlveolarTransfer () const
        {
          return this->AlveolarTransfer_;
        }

        SubstanceData::AlveolarTransfer_optional& SubstanceData::
        AlveolarTransfer ()
        {
          return this->AlveolarTransfer_;
        }

        void SubstanceData::
        AlveolarTransfer (const AlveolarTransfer_type& x)
        {
          this->AlveolarTransfer_.set (x);
        }

        void SubstanceData::
        AlveolarTransfer (const AlveolarTransfer_optional& x)
        {
          this->AlveolarTransfer_ = x;
        }

        void SubstanceData::
        AlveolarTransfer (::std::unique_ptr< AlveolarTransfer_type > x)
        {
          this->AlveolarTransfer_.set (std::move (x));
        }

        const SubstanceData::DiffusingCapacity_optional& SubstanceData::
        DiffusingCapacity () const
        {
          return this->DiffusingCapacity_;
        }

        SubstanceData::DiffusingCapacity_optional& SubstanceData::
        DiffusingCapacity ()
        {
          return this->DiffusingCapacity_;
        }

        void SubstanceData::
        DiffusingCapacity (const DiffusingCapacity_type& x)
        {
          this->DiffusingCapacity_.set (x);
        }

        void SubstanceData::
        DiffusingCapacity (const DiffusingCapacity_optional& x)
        {
          this->DiffusingCapacity_ = x;
        }

        void SubstanceData::
        DiffusingCapacity (::std::unique_ptr< DiffusingCapacity_type > x)
        {
          this->DiffusingCapacity_.set (std::move (x));
        }

        const SubstanceData::EndTidalFraction_optional& SubstanceData::
        EndTidalFraction () const
        {
          return this->EndTidalFraction_;
        }

        SubstanceData::EndTidalFraction_optional& SubstanceData::
        EndTidalFraction ()
        {
          return this->EndTidalFraction_;
        }

        void SubstanceData::
        EndTidalFraction (const EndTidalFraction_type& x)
        {
          this->EndTidalFraction_.set (x);
        }

        void SubstanceData::
        EndTidalFraction (const EndTidalFraction_optional& x)
        {
          this->EndTidalFraction_ = x;
        }

        void SubstanceData::
        EndTidalFraction (::std::unique_ptr< EndTidalFraction_type > x)
        {
          this->EndTidalFraction_.set (std::move (x));
        }

        const SubstanceData::EndTidalPressure_optional& SubstanceData::
        EndTidalPressure () const
        {
          return this->EndTidalPressure_;
        }

        SubstanceData::EndTidalPressure_optional& SubstanceData::
        EndTidalPressure ()
        {
          return this->EndTidalPressure_;
        }

        void SubstanceData::
        EndTidalPressure (const EndTidalPressure_type& x)
        {
          this->EndTidalPressure_.set (x);
        }

        void SubstanceData::
        EndTidalPressure (const EndTidalPressure_optional& x)
        {
          this->EndTidalPressure_ = x;
        }

        void SubstanceData::
        EndTidalPressure (::std::unique_ptr< EndTidalPressure_type > x)
        {
          this->EndTidalPressure_.set (std::move (x));
        }

        const SubstanceData::RelativeDiffusionCoefficient_optional& SubstanceData::
        RelativeDiffusionCoefficient () const
        {
          return this->RelativeDiffusionCoefficient_;
        }

        SubstanceData::RelativeDiffusionCoefficient_optional& SubstanceData::
        RelativeDiffusionCoefficient ()
        {
          return this->RelativeDiffusionCoefficient_;
        }

        void SubstanceData::
        RelativeDiffusionCoefficient (const RelativeDiffusionCoefficient_type& x)
        {
          this->RelativeDiffusionCoefficient_.set (x);
        }

        void SubstanceData::
        RelativeDiffusionCoefficient (const RelativeDiffusionCoefficient_optional& x)
        {
          this->RelativeDiffusionCoefficient_ = x;
        }

        void SubstanceData::
        RelativeDiffusionCoefficient (::std::unique_ptr< RelativeDiffusionCoefficient_type > x)
        {
          this->RelativeDiffusionCoefficient_.set (std::move (x));
        }

        const SubstanceData::SolubilityCoefficient_optional& SubstanceData::
        SolubilityCoefficient () const
        {
          return this->SolubilityCoefficient_;
        }

        SubstanceData::SolubilityCoefficient_optional& SubstanceData::
        SolubilityCoefficient ()
        {
          return this->SolubilityCoefficient_;
        }

        void SubstanceData::
        SolubilityCoefficient (const SolubilityCoefficient_type& x)
        {
          this->SolubilityCoefficient_.set (x);
        }

        void SubstanceData::
        SolubilityCoefficient (const SolubilityCoefficient_optional& x)
        {
          this->SolubilityCoefficient_ = x;
        }

        void SubstanceData::
        SolubilityCoefficient (::std::unique_ptr< SolubilityCoefficient_type > x)
        {
          this->SolubilityCoefficient_.set (std::move (x));
        }

        const SubstanceData::Clearance_optional& SubstanceData::
        Clearance () const
        {
          return this->Clearance_;
        }

        SubstanceData::Clearance_optional& SubstanceData::
        Clearance ()
        {
          return this->Clearance_;
        }

        void SubstanceData::
        Clearance (const Clearance_type& x)
        {
          this->Clearance_.set (x);
        }

        void SubstanceData::
        Clearance (const Clearance_optional& x)
        {
          this->Clearance_ = x;
        }

        void SubstanceData::
        Clearance (::std::unique_ptr< Clearance_type > x)
        {
          this->Clearance_.set (std::move (x));
        }

        const SubstanceData::Pharmacokinetics_optional& SubstanceData::
        Pharmacokinetics () const
        {
          return this->Pharmacokinetics_;
        }

        SubstanceData::Pharmacokinetics_optional& SubstanceData::
        Pharmacokinetics ()
        {
          return this->Pharmacokinetics_;
        }

        void SubstanceData::
        Pharmacokinetics (const Pharmacokinetics_type& x)
        {
          this->Pharmacokinetics_.set (x);
        }

        void SubstanceData::
        Pharmacokinetics (const Pharmacokinetics_optional& x)
        {
          this->Pharmacokinetics_ = x;
        }

        void SubstanceData::
        Pharmacokinetics (::std::unique_ptr< Pharmacokinetics_type > x)
        {
          this->Pharmacokinetics_.set (std::move (x));
        }

        const SubstanceData::Pharmacodynamics_optional& SubstanceData::
        Pharmacodynamics () const
        {
          return this->Pharmacodynamics_;
        }

        SubstanceData::Pharmacodynamics_optional& SubstanceData::
        Pharmacodynamics ()
        {
          return this->Pharmacodynamics_;
        }

        void SubstanceData::
        Pharmacodynamics (const Pharmacodynamics_type& x)
        {
          this->Pharmacodynamics_.set (x);
        }

        void SubstanceData::
        Pharmacodynamics (const Pharmacodynamics_optional& x)
        {
          this->Pharmacodynamics_ = x;
        }

        void SubstanceData::
        Pharmacodynamics (::std::unique_ptr< Pharmacodynamics_type > x)
        {
          this->Pharmacodynamics_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstanceData
        //

        SubstanceData::
        SubstanceData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (this),
          Classification_ (this),
          Density_ (this),
          MolarMass_ (this),
          State_ (this),
          MaximumDiffusionFlux_ (this),
          MichaelisCoefficient_ (this),
          MembraneResistance_ (this),
          Aerosolization_ (this),
          BloodConcentration_ (this),
          MassInBody_ (this),
          MassInBlood_ (this),
          MassInTissue_ (this),
          PlasmaConcentration_ (this),
          SystemicMassCleared_ (this),
          EffectSiteConcentration_ (this),
          TissueConcentration_ (this),
          AlveolarTransfer_ (this),
          DiffusingCapacity_ (this),
          EndTidalFraction_ (this),
          EndTidalPressure_ (this),
          RelativeDiffusionCoefficient_ (this),
          SolubilityCoefficient_ (this),
          Clearance_ (this),
          Pharmacokinetics_ (this),
          Pharmacodynamics_ (this)
        {
        }

        SubstanceData::
        SubstanceData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (Name, this),
          Classification_ (this),
          Density_ (this),
          MolarMass_ (this),
          State_ (this),
          MaximumDiffusionFlux_ (this),
          MichaelisCoefficient_ (this),
          MembraneResistance_ (this),
          Aerosolization_ (this),
          BloodConcentration_ (this),
          MassInBody_ (this),
          MassInBlood_ (this),
          MassInTissue_ (this),
          PlasmaConcentration_ (this),
          SystemicMassCleared_ (this),
          EffectSiteConcentration_ (this),
          TissueConcentration_ (this),
          AlveolarTransfer_ (this),
          DiffusingCapacity_ (this),
          EndTidalFraction_ (this),
          EndTidalPressure_ (this),
          RelativeDiffusionCoefficient_ (this),
          SolubilityCoefficient_ (this),
          Clearance_ (this),
          Pharmacokinetics_ (this),
          Pharmacodynamics_ (this)
        {
        }

        SubstanceData::
        SubstanceData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Name_ (std::move (Name), this),
          Classification_ (this),
          Density_ (this),
          MolarMass_ (this),
          State_ (this),
          MaximumDiffusionFlux_ (this),
          MichaelisCoefficient_ (this),
          MembraneResistance_ (this),
          Aerosolization_ (this),
          BloodConcentration_ (this),
          MassInBody_ (this),
          MassInBlood_ (this),
          MassInTissue_ (this),
          PlasmaConcentration_ (this),
          SystemicMassCleared_ (this),
          EffectSiteConcentration_ (this),
          TissueConcentration_ (this),
          AlveolarTransfer_ (this),
          DiffusingCapacity_ (this),
          EndTidalFraction_ (this),
          EndTidalPressure_ (this),
          RelativeDiffusionCoefficient_ (this),
          SolubilityCoefficient_ (this),
          Clearance_ (this),
          Pharmacokinetics_ (this),
          Pharmacodynamics_ (this)
        {
        }

        SubstanceData::
        SubstanceData (const SubstanceData& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Name_ (x.Name_, f, this),
          Classification_ (x.Classification_, f, this),
          Density_ (x.Density_, f, this),
          MolarMass_ (x.MolarMass_, f, this),
          State_ (x.State_, f, this),
          MaximumDiffusionFlux_ (x.MaximumDiffusionFlux_, f, this),
          MichaelisCoefficient_ (x.MichaelisCoefficient_, f, this),
          MembraneResistance_ (x.MembraneResistance_, f, this),
          Aerosolization_ (x.Aerosolization_, f, this),
          BloodConcentration_ (x.BloodConcentration_, f, this),
          MassInBody_ (x.MassInBody_, f, this),
          MassInBlood_ (x.MassInBlood_, f, this),
          MassInTissue_ (x.MassInTissue_, f, this),
          PlasmaConcentration_ (x.PlasmaConcentration_, f, this),
          SystemicMassCleared_ (x.SystemicMassCleared_, f, this),
          EffectSiteConcentration_ (x.EffectSiteConcentration_, f, this),
          TissueConcentration_ (x.TissueConcentration_, f, this),
          AlveolarTransfer_ (x.AlveolarTransfer_, f, this),
          DiffusingCapacity_ (x.DiffusingCapacity_, f, this),
          EndTidalFraction_ (x.EndTidalFraction_, f, this),
          EndTidalPressure_ (x.EndTidalPressure_, f, this),
          RelativeDiffusionCoefficient_ (x.RelativeDiffusionCoefficient_, f, this),
          SolubilityCoefficient_ (x.SolubilityCoefficient_, f, this),
          Clearance_ (x.Clearance_, f, this),
          Pharmacokinetics_ (x.Pharmacokinetics_, f, this),
          Pharmacodynamics_ (x.Pharmacodynamics_, f, this)
        {
        }

        SubstanceData::
        SubstanceData (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Name_ (this),
          Classification_ (this),
          Density_ (this),
          MolarMass_ (this),
          State_ (this),
          MaximumDiffusionFlux_ (this),
          MichaelisCoefficient_ (this),
          MembraneResistance_ (this),
          Aerosolization_ (this),
          BloodConcentration_ (this),
          MassInBody_ (this),
          MassInBlood_ (this),
          MassInTissue_ (this),
          PlasmaConcentration_ (this),
          SystemicMassCleared_ (this),
          EffectSiteConcentration_ (this),
          TissueConcentration_ (this),
          AlveolarTransfer_ (this),
          DiffusingCapacity_ (this),
          EndTidalFraction_ (this),
          EndTidalPressure_ (this),
          RelativeDiffusionCoefficient_ (this),
          SolubilityCoefficient_ (this),
          Clearance_ (this),
          Pharmacokinetics_ (this),
          Pharmacodynamics_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstanceData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Name
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Name_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Name_.present ())
                {
                  ::std::unique_ptr< Name_type > r (
                    dynamic_cast< Name_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Name_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Classification
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Classification",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Classification_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Classification_)
                {
                  ::std::unique_ptr< Classification_type > r (
                    dynamic_cast< Classification_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Classification_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Density
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Density",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Density_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Density_)
                {
                  ::std::unique_ptr< Density_type > r (
                    dynamic_cast< Density_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Density_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MolarMass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MolarMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MolarMass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MolarMass_)
                {
                  ::std::unique_ptr< MolarMass_type > r (
                    dynamic_cast< MolarMass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MolarMass_.set (::std::move (r));
                  continue;
                }
              }
            }

            // State
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "State",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< State_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->State_)
                {
                  ::std::unique_ptr< State_type > r (
                    dynamic_cast< State_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->State_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MaximumDiffusionFlux
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MaximumDiffusionFlux",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MaximumDiffusionFlux_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MaximumDiffusionFlux_)
                {
                  ::std::unique_ptr< MaximumDiffusionFlux_type > r (
                    dynamic_cast< MaximumDiffusionFlux_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MaximumDiffusionFlux_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MichaelisCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MichaelisCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MichaelisCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MichaelisCoefficient_)
                {
                  ::std::unique_ptr< MichaelisCoefficient_type > r (
                    dynamic_cast< MichaelisCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MichaelisCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MembraneResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MembraneResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MembraneResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MembraneResistance_)
                {
                  ::std::unique_ptr< MembraneResistance_type > r (
                    dynamic_cast< MembraneResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MembraneResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Aerosolization
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Aerosolization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Aerosolization_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Aerosolization_)
                {
                  ::std::unique_ptr< Aerosolization_type > r (
                    dynamic_cast< Aerosolization_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Aerosolization_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodConcentration_)
                {
                  ::std::unique_ptr< BloodConcentration_type > r (
                    dynamic_cast< BloodConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassInBody
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassInBody",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassInBody_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassInBody_)
                {
                  ::std::unique_ptr< MassInBody_type > r (
                    dynamic_cast< MassInBody_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassInBody_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassInBlood
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassInBlood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassInBlood_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassInBlood_)
                {
                  ::std::unique_ptr< MassInBlood_type > r (
                    dynamic_cast< MassInBlood_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassInBlood_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MassInTissue
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MassInTissue",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MassInTissue_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MassInTissue_)
                {
                  ::std::unique_ptr< MassInTissue_type > r (
                    dynamic_cast< MassInTissue_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MassInTissue_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlasmaConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlasmaConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlasmaConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlasmaConcentration_)
                {
                  ::std::unique_ptr< PlasmaConcentration_type > r (
                    dynamic_cast< PlasmaConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlasmaConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystemicMassCleared
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystemicMassCleared",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystemicMassCleared_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystemicMassCleared_)
                {
                  ::std::unique_ptr< SystemicMassCleared_type > r (
                    dynamic_cast< SystemicMassCleared_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystemicMassCleared_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EffectSiteConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EffectSiteConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EffectSiteConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EffectSiteConcentration_)
                {
                  ::std::unique_ptr< EffectSiteConcentration_type > r (
                    dynamic_cast< EffectSiteConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EffectSiteConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueConcentration_)
                {
                  ::std::unique_ptr< TissueConcentration_type > r (
                    dynamic_cast< TissueConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AlveolarTransfer
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AlveolarTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AlveolarTransfer_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AlveolarTransfer_)
                {
                  ::std::unique_ptr< AlveolarTransfer_type > r (
                    dynamic_cast< AlveolarTransfer_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AlveolarTransfer_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DiffusingCapacity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DiffusingCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DiffusingCapacity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DiffusingCapacity_)
                {
                  ::std::unique_ptr< DiffusingCapacity_type > r (
                    dynamic_cast< DiffusingCapacity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DiffusingCapacity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalFraction_)
                {
                  ::std::unique_ptr< EndTidalFraction_type > r (
                    dynamic_cast< EndTidalFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EndTidalPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EndTidalPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EndTidalPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EndTidalPressure_)
                {
                  ::std::unique_ptr< EndTidalPressure_type > r (
                    dynamic_cast< EndTidalPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EndTidalPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RelativeDiffusionCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RelativeDiffusionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RelativeDiffusionCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RelativeDiffusionCoefficient_)
                {
                  ::std::unique_ptr< RelativeDiffusionCoefficient_type > r (
                    dynamic_cast< RelativeDiffusionCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RelativeDiffusionCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SolubilityCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SolubilityCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SolubilityCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SolubilityCoefficient_)
                {
                  ::std::unique_ptr< SolubilityCoefficient_type > r (
                    dynamic_cast< SolubilityCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SolubilityCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Clearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Clearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Clearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Clearance_)
                {
                  ::std::unique_ptr< Clearance_type > r (
                    dynamic_cast< Clearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Clearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Pharmacokinetics
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pharmacokinetics",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pharmacokinetics_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pharmacokinetics_)
                {
                  ::std::unique_ptr< Pharmacokinetics_type > r (
                    dynamic_cast< Pharmacokinetics_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pharmacokinetics_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Pharmacodynamics
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pharmacodynamics",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pharmacodynamics_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pharmacodynamics_)
                {
                  ::std::unique_ptr< Pharmacodynamics_type > r (
                    dynamic_cast< Pharmacodynamics_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pharmacodynamics_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Name",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstanceData* SubstanceData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstanceData (*this, f, c);
        }

        SubstanceData& SubstanceData::
        operator= (const SubstanceData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Name_ = x.Name_;
            this->Classification_ = x.Classification_;
            this->Density_ = x.Density_;
            this->MolarMass_ = x.MolarMass_;
            this->State_ = x.State_;
            this->MaximumDiffusionFlux_ = x.MaximumDiffusionFlux_;
            this->MichaelisCoefficient_ = x.MichaelisCoefficient_;
            this->MembraneResistance_ = x.MembraneResistance_;
            this->Aerosolization_ = x.Aerosolization_;
            this->BloodConcentration_ = x.BloodConcentration_;
            this->MassInBody_ = x.MassInBody_;
            this->MassInBlood_ = x.MassInBlood_;
            this->MassInTissue_ = x.MassInTissue_;
            this->PlasmaConcentration_ = x.PlasmaConcentration_;
            this->SystemicMassCleared_ = x.SystemicMassCleared_;
            this->EffectSiteConcentration_ = x.EffectSiteConcentration_;
            this->TissueConcentration_ = x.TissueConcentration_;
            this->AlveolarTransfer_ = x.AlveolarTransfer_;
            this->DiffusingCapacity_ = x.DiffusingCapacity_;
            this->EndTidalFraction_ = x.EndTidalFraction_;
            this->EndTidalPressure_ = x.EndTidalPressure_;
            this->RelativeDiffusionCoefficient_ = x.RelativeDiffusionCoefficient_;
            this->SolubilityCoefficient_ = x.SolubilityCoefficient_;
            this->Clearance_ = x.Clearance_;
            this->Pharmacokinetics_ = x.Pharmacokinetics_;
            this->Pharmacodynamics_ = x.Pharmacodynamics_;
          }

          return *this;
        }

        SubstanceData::
        ~SubstanceData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstanceData >
        _xsd_SubstanceData_type_factory_init (
          "SubstanceData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const SubstanceData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Name: ";
            om.insert (o, i.Name ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Classification ())
            {
              o << ::std::endl << "Classification: ";
              om.insert (o, *i.Classification ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Density ())
            {
              o << ::std::endl << "Density: ";
              om.insert (o, *i.Density ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MolarMass ())
            {
              o << ::std::endl << "MolarMass: ";
              om.insert (o, *i.MolarMass ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.State ())
            {
              o << ::std::endl << "State: ";
              om.insert (o, *i.State ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MaximumDiffusionFlux ())
            {
              o << ::std::endl << "MaximumDiffusionFlux: ";
              om.insert (o, *i.MaximumDiffusionFlux ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MichaelisCoefficient ())
            {
              o << ::std::endl << "MichaelisCoefficient: ";
              om.insert (o, *i.MichaelisCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MembraneResistance ())
            {
              o << ::std::endl << "MembraneResistance: ";
              om.insert (o, *i.MembraneResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Aerosolization ())
            {
              o << ::std::endl << "Aerosolization: ";
              om.insert (o, *i.Aerosolization ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodConcentration ())
            {
              o << ::std::endl << "BloodConcentration: ";
              om.insert (o, *i.BloodConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassInBody ())
            {
              o << ::std::endl << "MassInBody: ";
              om.insert (o, *i.MassInBody ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassInBlood ())
            {
              o << ::std::endl << "MassInBlood: ";
              om.insert (o, *i.MassInBlood ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MassInTissue ())
            {
              o << ::std::endl << "MassInTissue: ";
              om.insert (o, *i.MassInTissue ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlasmaConcentration ())
            {
              o << ::std::endl << "PlasmaConcentration: ";
              om.insert (o, *i.PlasmaConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystemicMassCleared ())
            {
              o << ::std::endl << "SystemicMassCleared: ";
              om.insert (o, *i.SystemicMassCleared ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EffectSiteConcentration ())
            {
              o << ::std::endl << "EffectSiteConcentration: ";
              om.insert (o, *i.EffectSiteConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueConcentration ())
            {
              o << ::std::endl << "TissueConcentration: ";
              om.insert (o, *i.TissueConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AlveolarTransfer ())
            {
              o << ::std::endl << "AlveolarTransfer: ";
              om.insert (o, *i.AlveolarTransfer ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DiffusingCapacity ())
            {
              o << ::std::endl << "DiffusingCapacity: ";
              om.insert (o, *i.DiffusingCapacity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalFraction ())
            {
              o << ::std::endl << "EndTidalFraction: ";
              om.insert (o, *i.EndTidalFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EndTidalPressure ())
            {
              o << ::std::endl << "EndTidalPressure: ";
              om.insert (o, *i.EndTidalPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RelativeDiffusionCoefficient ())
            {
              o << ::std::endl << "RelativeDiffusionCoefficient: ";
              om.insert (o, *i.RelativeDiffusionCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SolubilityCoefficient ())
            {
              o << ::std::endl << "SolubilityCoefficient: ";
              om.insert (o, *i.SolubilityCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Clearance ())
            {
              o << ::std::endl << "Clearance: ";
              om.insert (o, *i.Clearance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pharmacokinetics ())
            {
              o << ::std::endl << "Pharmacokinetics: ";
              om.insert (o, *i.Pharmacokinetics ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pharmacodynamics ())
            {
              o << ::std::endl << "Pharmacodynamics: ";
              om.insert (o, *i.Pharmacodynamics ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstanceData >
        _xsd_SubstanceData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const SubstanceData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Name
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstanceData::Name_type& x (i.Name ());
            if (typeid (SubstanceData::Name_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Name",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Name",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Classification
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Classification ())
            {
              const SubstanceData::Classification_type& x (*i.Classification ());
              if (typeid (SubstanceData::Classification_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Classification",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Classification",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Density
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Density ())
            {
              const SubstanceData::Density_type& x (*i.Density ());
              if (typeid (SubstanceData::Density_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Density",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Density",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MolarMass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MolarMass ())
            {
              const SubstanceData::MolarMass_type& x (*i.MolarMass ());
              if (typeid (SubstanceData::MolarMass_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MolarMass",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MolarMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // State
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.State ())
            {
              const SubstanceData::State_type& x (*i.State ());
              if (typeid (SubstanceData::State_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "State",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "State",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MaximumDiffusionFlux
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MaximumDiffusionFlux ())
            {
              const SubstanceData::MaximumDiffusionFlux_type& x (*i.MaximumDiffusionFlux ());
              if (typeid (SubstanceData::MaximumDiffusionFlux_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MaximumDiffusionFlux",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MaximumDiffusionFlux",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MichaelisCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MichaelisCoefficient ())
            {
              const SubstanceData::MichaelisCoefficient_type& x (*i.MichaelisCoefficient ());
              if (typeid (SubstanceData::MichaelisCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MichaelisCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MichaelisCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MembraneResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MembraneResistance ())
            {
              const SubstanceData::MembraneResistance_type& x (*i.MembraneResistance ());
              if (typeid (SubstanceData::MembraneResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MembraneResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MembraneResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Aerosolization
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Aerosolization ())
            {
              const SubstanceData::Aerosolization_type& x (*i.Aerosolization ());
              if (typeid (SubstanceData::Aerosolization_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Aerosolization",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Aerosolization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodConcentration ())
            {
              const SubstanceData::BloodConcentration_type& x (*i.BloodConcentration ());
              if (typeid (SubstanceData::BloodConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassInBody
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassInBody ())
            {
              const SubstanceData::MassInBody_type& x (*i.MassInBody ());
              if (typeid (SubstanceData::MassInBody_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassInBody",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassInBody",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassInBlood
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassInBlood ())
            {
              const SubstanceData::MassInBlood_type& x (*i.MassInBlood ());
              if (typeid (SubstanceData::MassInBlood_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassInBlood",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassInBlood",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MassInTissue
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MassInTissue ())
            {
              const SubstanceData::MassInTissue_type& x (*i.MassInTissue ());
              if (typeid (SubstanceData::MassInTissue_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MassInTissue",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MassInTissue",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlasmaConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlasmaConcentration ())
            {
              const SubstanceData::PlasmaConcentration_type& x (*i.PlasmaConcentration ());
              if (typeid (SubstanceData::PlasmaConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlasmaConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlasmaConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystemicMassCleared
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystemicMassCleared ())
            {
              const SubstanceData::SystemicMassCleared_type& x (*i.SystemicMassCleared ());
              if (typeid (SubstanceData::SystemicMassCleared_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystemicMassCleared",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystemicMassCleared",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EffectSiteConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EffectSiteConcentration ())
            {
              const SubstanceData::EffectSiteConcentration_type& x (*i.EffectSiteConcentration ());
              if (typeid (SubstanceData::EffectSiteConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EffectSiteConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EffectSiteConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueConcentration ())
            {
              const SubstanceData::TissueConcentration_type& x (*i.TissueConcentration ());
              if (typeid (SubstanceData::TissueConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AlveolarTransfer
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AlveolarTransfer ())
            {
              const SubstanceData::AlveolarTransfer_type& x (*i.AlveolarTransfer ());
              if (typeid (SubstanceData::AlveolarTransfer_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AlveolarTransfer",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AlveolarTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DiffusingCapacity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DiffusingCapacity ())
            {
              const SubstanceData::DiffusingCapacity_type& x (*i.DiffusingCapacity ());
              if (typeid (SubstanceData::DiffusingCapacity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DiffusingCapacity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DiffusingCapacity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalFraction ())
            {
              const SubstanceData::EndTidalFraction_type& x (*i.EndTidalFraction ());
              if (typeid (SubstanceData::EndTidalFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EndTidalPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EndTidalPressure ())
            {
              const SubstanceData::EndTidalPressure_type& x (*i.EndTidalPressure ());
              if (typeid (SubstanceData::EndTidalPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EndTidalPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EndTidalPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RelativeDiffusionCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RelativeDiffusionCoefficient ())
            {
              const SubstanceData::RelativeDiffusionCoefficient_type& x (*i.RelativeDiffusionCoefficient ());
              if (typeid (SubstanceData::RelativeDiffusionCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RelativeDiffusionCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RelativeDiffusionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SolubilityCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SolubilityCoefficient ())
            {
              const SubstanceData::SolubilityCoefficient_type& x (*i.SolubilityCoefficient ());
              if (typeid (SubstanceData::SolubilityCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SolubilityCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SolubilityCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Clearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Clearance ())
            {
              const SubstanceData::Clearance_type& x (*i.Clearance ());
              if (typeid (SubstanceData::Clearance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Clearance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Clearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Pharmacokinetics
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pharmacokinetics ())
            {
              const SubstanceData::Pharmacokinetics_type& x (*i.Pharmacokinetics ());
              if (typeid (SubstanceData::Pharmacokinetics_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pharmacokinetics",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pharmacokinetics",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Pharmacodynamics
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pharmacodynamics ())
            {
              const SubstanceData::Pharmacodynamics_type& x (*i.Pharmacodynamics ());
              if (typeid (SubstanceData::Pharmacodynamics_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pharmacodynamics",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pharmacodynamics",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstanceData >
        _xsd_SubstanceData_type_serializer_init (
          "SubstanceData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


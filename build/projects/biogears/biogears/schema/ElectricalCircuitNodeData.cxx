// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ElectricalCircuitNodeData.hxx"

#include "ScalarElectricPotentialData.hxx"

#include "ScalarElectricChargeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ElectricalCircuitNodeData
        // 

        const ElectricalCircuitNodeData::Voltage_optional& ElectricalCircuitNodeData::
        Voltage () const
        {
          return this->Voltage_;
        }

        ElectricalCircuitNodeData::Voltage_optional& ElectricalCircuitNodeData::
        Voltage ()
        {
          return this->Voltage_;
        }

        void ElectricalCircuitNodeData::
        Voltage (const Voltage_type& x)
        {
          this->Voltage_.set (x);
        }

        void ElectricalCircuitNodeData::
        Voltage (const Voltage_optional& x)
        {
          this->Voltage_ = x;
        }

        void ElectricalCircuitNodeData::
        Voltage (::std::unique_ptr< Voltage_type > x)
        {
          this->Voltage_.set (std::move (x));
        }

        const ElectricalCircuitNodeData::NextVoltage_optional& ElectricalCircuitNodeData::
        NextVoltage () const
        {
          return this->NextVoltage_;
        }

        ElectricalCircuitNodeData::NextVoltage_optional& ElectricalCircuitNodeData::
        NextVoltage ()
        {
          return this->NextVoltage_;
        }

        void ElectricalCircuitNodeData::
        NextVoltage (const NextVoltage_type& x)
        {
          this->NextVoltage_.set (x);
        }

        void ElectricalCircuitNodeData::
        NextVoltage (const NextVoltage_optional& x)
        {
          this->NextVoltage_ = x;
        }

        void ElectricalCircuitNodeData::
        NextVoltage (::std::unique_ptr< NextVoltage_type > x)
        {
          this->NextVoltage_.set (std::move (x));
        }

        const ElectricalCircuitNodeData::Charge_optional& ElectricalCircuitNodeData::
        Charge () const
        {
          return this->Charge_;
        }

        ElectricalCircuitNodeData::Charge_optional& ElectricalCircuitNodeData::
        Charge ()
        {
          return this->Charge_;
        }

        void ElectricalCircuitNodeData::
        Charge (const Charge_type& x)
        {
          this->Charge_.set (x);
        }

        void ElectricalCircuitNodeData::
        Charge (const Charge_optional& x)
        {
          this->Charge_ = x;
        }

        void ElectricalCircuitNodeData::
        Charge (::std::unique_ptr< Charge_type > x)
        {
          this->Charge_.set (std::move (x));
        }

        const ElectricalCircuitNodeData::NextCharge_optional& ElectricalCircuitNodeData::
        NextCharge () const
        {
          return this->NextCharge_;
        }

        ElectricalCircuitNodeData::NextCharge_optional& ElectricalCircuitNodeData::
        NextCharge ()
        {
          return this->NextCharge_;
        }

        void ElectricalCircuitNodeData::
        NextCharge (const NextCharge_type& x)
        {
          this->NextCharge_.set (x);
        }

        void ElectricalCircuitNodeData::
        NextCharge (const NextCharge_optional& x)
        {
          this->NextCharge_ = x;
        }

        void ElectricalCircuitNodeData::
        NextCharge (::std::unique_ptr< NextCharge_type > x)
        {
          this->NextCharge_.set (std::move (x));
        }

        const ElectricalCircuitNodeData::ChargeBaseline_optional& ElectricalCircuitNodeData::
        ChargeBaseline () const
        {
          return this->ChargeBaseline_;
        }

        ElectricalCircuitNodeData::ChargeBaseline_optional& ElectricalCircuitNodeData::
        ChargeBaseline ()
        {
          return this->ChargeBaseline_;
        }

        void ElectricalCircuitNodeData::
        ChargeBaseline (const ChargeBaseline_type& x)
        {
          this->ChargeBaseline_.set (x);
        }

        void ElectricalCircuitNodeData::
        ChargeBaseline (const ChargeBaseline_optional& x)
        {
          this->ChargeBaseline_ = x;
        }

        void ElectricalCircuitNodeData::
        ChargeBaseline (::std::unique_ptr< ChargeBaseline_type > x)
        {
          this->ChargeBaseline_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ElectricalCircuitNodeData
        //

        ElectricalCircuitNodeData::
        ElectricalCircuitNodeData ()
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (),
          Voltage_ (this),
          NextVoltage_ (this),
          Charge_ (this),
          NextCharge_ (this),
          ChargeBaseline_ (this)
        {
        }

        ElectricalCircuitNodeData::
        ElectricalCircuitNodeData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (Name),
          Voltage_ (this),
          NextVoltage_ (this),
          Charge_ (this),
          NextCharge_ (this),
          ChargeBaseline_ (this)
        {
        }

        ElectricalCircuitNodeData::
        ElectricalCircuitNodeData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (std::move (Name)),
          Voltage_ (this),
          NextVoltage_ (this),
          Charge_ (this),
          NextCharge_ (this),
          ChargeBaseline_ (this)
        {
        }

        ElectricalCircuitNodeData::
        ElectricalCircuitNodeData (const ElectricalCircuitNodeData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (x, f, c),
          Voltage_ (x.Voltage_, f, this),
          NextVoltage_ (x.NextVoltage_, f, this),
          Charge_ (x.Charge_, f, this),
          NextCharge_ (x.NextCharge_, f, this),
          ChargeBaseline_ (x.ChargeBaseline_, f, this)
        {
        }

        ElectricalCircuitNodeData::
        ElectricalCircuitNodeData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (e, f | ::xml_schema::flags::base, c),
          Voltage_ (this),
          NextVoltage_ (this),
          Charge_ (this),
          NextCharge_ (this),
          ChargeBaseline_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ElectricalCircuitNodeData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CircuitNodeData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Voltage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Voltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Voltage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Voltage_)
                {
                  ::std::unique_ptr< Voltage_type > r (
                    dynamic_cast< Voltage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Voltage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextVoltage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextVoltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextVoltage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextVoltage_)
                {
                  ::std::unique_ptr< NextVoltage_type > r (
                    dynamic_cast< NextVoltage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextVoltage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Charge
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Charge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Charge_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Charge_)
                {
                  ::std::unique_ptr< Charge_type > r (
                    dynamic_cast< Charge_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Charge_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextCharge
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextCharge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextCharge_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextCharge_)
                {
                  ::std::unique_ptr< NextCharge_type > r (
                    dynamic_cast< NextCharge_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextCharge_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChargeBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChargeBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChargeBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChargeBaseline_)
                {
                  ::std::unique_ptr< ChargeBaseline_type > r (
                    dynamic_cast< ChargeBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChargeBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ElectricalCircuitNodeData* ElectricalCircuitNodeData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ElectricalCircuitNodeData (*this, f, c);
        }

        ElectricalCircuitNodeData& ElectricalCircuitNodeData::
        operator= (const ElectricalCircuitNodeData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (*this) = x;
            this->Voltage_ = x.Voltage_;
            this->NextVoltage_ = x.NextVoltage_;
            this->Charge_ = x.Charge_;
            this->NextCharge_ = x.NextCharge_;
            this->ChargeBaseline_ = x.ChargeBaseline_;
          }

          return *this;
        }

        ElectricalCircuitNodeData::
        ~ElectricalCircuitNodeData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectricalCircuitNodeData >
        _xsd_ElectricalCircuitNodeData_type_factory_init (
          "ElectricalCircuitNodeData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ElectricalCircuitNodeData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Voltage ())
            {
              o << ::std::endl << "Voltage: ";
              om.insert (o, *i.Voltage ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextVoltage ())
            {
              o << ::std::endl << "NextVoltage: ";
              om.insert (o, *i.NextVoltage ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Charge ())
            {
              o << ::std::endl << "Charge: ";
              om.insert (o, *i.Charge ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextCharge ())
            {
              o << ::std::endl << "NextCharge: ";
              om.insert (o, *i.NextCharge ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChargeBaseline ())
            {
              o << ::std::endl << "ChargeBaseline: ";
              om.insert (o, *i.ChargeBaseline ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ElectricalCircuitNodeData >
        _xsd_ElectricalCircuitNodeData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ElectricalCircuitNodeData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (i);

          // Voltage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Voltage ())
            {
              const ElectricalCircuitNodeData::Voltage_type& x (*i.Voltage ());
              if (typeid (ElectricalCircuitNodeData::Voltage_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Voltage",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Voltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextVoltage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextVoltage ())
            {
              const ElectricalCircuitNodeData::NextVoltage_type& x (*i.NextVoltage ());
              if (typeid (ElectricalCircuitNodeData::NextVoltage_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextVoltage",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextVoltage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Charge
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Charge ())
            {
              const ElectricalCircuitNodeData::Charge_type& x (*i.Charge ());
              if (typeid (ElectricalCircuitNodeData::Charge_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Charge",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Charge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextCharge
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextCharge ())
            {
              const ElectricalCircuitNodeData::NextCharge_type& x (*i.NextCharge ());
              if (typeid (ElectricalCircuitNodeData::NextCharge_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextCharge",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextCharge",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChargeBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChargeBaseline ())
            {
              const ElectricalCircuitNodeData::ChargeBaseline_type& x (*i.ChargeBaseline ());
              if (typeid (ElectricalCircuitNodeData::ChargeBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChargeBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChargeBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectricalCircuitNodeData >
        _xsd_ElectricalCircuitNodeData_type_serializer_init (
          "ElectricalCircuitNodeData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


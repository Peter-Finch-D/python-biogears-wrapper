// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ThermalCircuitPathData.hxx"

#include "ScalarHeatResistanceData.hxx"

#include "ScalarHeatCapacitanceData.hxx"

#include "ScalarHeatInductanceData.hxx"

#include "ScalarPowerData.hxx"

#include "ScalarTemperatureData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ThermalCircuitPathData
        // 

        const ThermalCircuitPathData::Resistance_optional& ThermalCircuitPathData::
        Resistance () const
        {
          return this->Resistance_;
        }

        ThermalCircuitPathData::Resistance_optional& ThermalCircuitPathData::
        Resistance ()
        {
          return this->Resistance_;
        }

        void ThermalCircuitPathData::
        Resistance (const Resistance_type& x)
        {
          this->Resistance_.set (x);
        }

        void ThermalCircuitPathData::
        Resistance (const Resistance_optional& x)
        {
          this->Resistance_ = x;
        }

        void ThermalCircuitPathData::
        Resistance (::std::unique_ptr< Resistance_type > x)
        {
          this->Resistance_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextResistance_optional& ThermalCircuitPathData::
        NextResistance () const
        {
          return this->NextResistance_;
        }

        ThermalCircuitPathData::NextResistance_optional& ThermalCircuitPathData::
        NextResistance ()
        {
          return this->NextResistance_;
        }

        void ThermalCircuitPathData::
        NextResistance (const NextResistance_type& x)
        {
          this->NextResistance_.set (x);
        }

        void ThermalCircuitPathData::
        NextResistance (const NextResistance_optional& x)
        {
          this->NextResistance_ = x;
        }

        void ThermalCircuitPathData::
        NextResistance (::std::unique_ptr< NextResistance_type > x)
        {
          this->NextResistance_.set (std::move (x));
        }

        const ThermalCircuitPathData::ResistanceBaseline_optional& ThermalCircuitPathData::
        ResistanceBaseline () const
        {
          return this->ResistanceBaseline_;
        }

        ThermalCircuitPathData::ResistanceBaseline_optional& ThermalCircuitPathData::
        ResistanceBaseline ()
        {
          return this->ResistanceBaseline_;
        }

        void ThermalCircuitPathData::
        ResistanceBaseline (const ResistanceBaseline_type& x)
        {
          this->ResistanceBaseline_.set (x);
        }

        void ThermalCircuitPathData::
        ResistanceBaseline (const ResistanceBaseline_optional& x)
        {
          this->ResistanceBaseline_ = x;
        }

        void ThermalCircuitPathData::
        ResistanceBaseline (::std::unique_ptr< ResistanceBaseline_type > x)
        {
          this->ResistanceBaseline_.set (std::move (x));
        }

        const ThermalCircuitPathData::Capacitance_optional& ThermalCircuitPathData::
        Capacitance () const
        {
          return this->Capacitance_;
        }

        ThermalCircuitPathData::Capacitance_optional& ThermalCircuitPathData::
        Capacitance ()
        {
          return this->Capacitance_;
        }

        void ThermalCircuitPathData::
        Capacitance (const Capacitance_type& x)
        {
          this->Capacitance_.set (x);
        }

        void ThermalCircuitPathData::
        Capacitance (const Capacitance_optional& x)
        {
          this->Capacitance_ = x;
        }

        void ThermalCircuitPathData::
        Capacitance (::std::unique_ptr< Capacitance_type > x)
        {
          this->Capacitance_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextCapacitance_optional& ThermalCircuitPathData::
        NextCapacitance () const
        {
          return this->NextCapacitance_;
        }

        ThermalCircuitPathData::NextCapacitance_optional& ThermalCircuitPathData::
        NextCapacitance ()
        {
          return this->NextCapacitance_;
        }

        void ThermalCircuitPathData::
        NextCapacitance (const NextCapacitance_type& x)
        {
          this->NextCapacitance_.set (x);
        }

        void ThermalCircuitPathData::
        NextCapacitance (const NextCapacitance_optional& x)
        {
          this->NextCapacitance_ = x;
        }

        void ThermalCircuitPathData::
        NextCapacitance (::std::unique_ptr< NextCapacitance_type > x)
        {
          this->NextCapacitance_.set (std::move (x));
        }

        const ThermalCircuitPathData::CapacitanceBaseline_optional& ThermalCircuitPathData::
        CapacitanceBaseline () const
        {
          return this->CapacitanceBaseline_;
        }

        ThermalCircuitPathData::CapacitanceBaseline_optional& ThermalCircuitPathData::
        CapacitanceBaseline ()
        {
          return this->CapacitanceBaseline_;
        }

        void ThermalCircuitPathData::
        CapacitanceBaseline (const CapacitanceBaseline_type& x)
        {
          this->CapacitanceBaseline_.set (x);
        }

        void ThermalCircuitPathData::
        CapacitanceBaseline (const CapacitanceBaseline_optional& x)
        {
          this->CapacitanceBaseline_ = x;
        }

        void ThermalCircuitPathData::
        CapacitanceBaseline (::std::unique_ptr< CapacitanceBaseline_type > x)
        {
          this->CapacitanceBaseline_.set (std::move (x));
        }

        const ThermalCircuitPathData::Inductance_optional& ThermalCircuitPathData::
        Inductance () const
        {
          return this->Inductance_;
        }

        ThermalCircuitPathData::Inductance_optional& ThermalCircuitPathData::
        Inductance ()
        {
          return this->Inductance_;
        }

        void ThermalCircuitPathData::
        Inductance (const Inductance_type& x)
        {
          this->Inductance_.set (x);
        }

        void ThermalCircuitPathData::
        Inductance (const Inductance_optional& x)
        {
          this->Inductance_ = x;
        }

        void ThermalCircuitPathData::
        Inductance (::std::unique_ptr< Inductance_type > x)
        {
          this->Inductance_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextInductance_optional& ThermalCircuitPathData::
        NextInductance () const
        {
          return this->NextInductance_;
        }

        ThermalCircuitPathData::NextInductance_optional& ThermalCircuitPathData::
        NextInductance ()
        {
          return this->NextInductance_;
        }

        void ThermalCircuitPathData::
        NextInductance (const NextInductance_type& x)
        {
          this->NextInductance_.set (x);
        }

        void ThermalCircuitPathData::
        NextInductance (const NextInductance_optional& x)
        {
          this->NextInductance_ = x;
        }

        void ThermalCircuitPathData::
        NextInductance (::std::unique_ptr< NextInductance_type > x)
        {
          this->NextInductance_.set (std::move (x));
        }

        const ThermalCircuitPathData::InductanceBaseline_optional& ThermalCircuitPathData::
        InductanceBaseline () const
        {
          return this->InductanceBaseline_;
        }

        ThermalCircuitPathData::InductanceBaseline_optional& ThermalCircuitPathData::
        InductanceBaseline ()
        {
          return this->InductanceBaseline_;
        }

        void ThermalCircuitPathData::
        InductanceBaseline (const InductanceBaseline_type& x)
        {
          this->InductanceBaseline_.set (x);
        }

        void ThermalCircuitPathData::
        InductanceBaseline (const InductanceBaseline_optional& x)
        {
          this->InductanceBaseline_ = x;
        }

        void ThermalCircuitPathData::
        InductanceBaseline (::std::unique_ptr< InductanceBaseline_type > x)
        {
          this->InductanceBaseline_.set (std::move (x));
        }

        const ThermalCircuitPathData::HeatTransferRate_optional& ThermalCircuitPathData::
        HeatTransferRate () const
        {
          return this->HeatTransferRate_;
        }

        ThermalCircuitPathData::HeatTransferRate_optional& ThermalCircuitPathData::
        HeatTransferRate ()
        {
          return this->HeatTransferRate_;
        }

        void ThermalCircuitPathData::
        HeatTransferRate (const HeatTransferRate_type& x)
        {
          this->HeatTransferRate_.set (x);
        }

        void ThermalCircuitPathData::
        HeatTransferRate (const HeatTransferRate_optional& x)
        {
          this->HeatTransferRate_ = x;
        }

        void ThermalCircuitPathData::
        HeatTransferRate (::std::unique_ptr< HeatTransferRate_type > x)
        {
          this->HeatTransferRate_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextHeatTransferRate_optional& ThermalCircuitPathData::
        NextHeatTransferRate () const
        {
          return this->NextHeatTransferRate_;
        }

        ThermalCircuitPathData::NextHeatTransferRate_optional& ThermalCircuitPathData::
        NextHeatTransferRate ()
        {
          return this->NextHeatTransferRate_;
        }

        void ThermalCircuitPathData::
        NextHeatTransferRate (const NextHeatTransferRate_type& x)
        {
          this->NextHeatTransferRate_.set (x);
        }

        void ThermalCircuitPathData::
        NextHeatTransferRate (const NextHeatTransferRate_optional& x)
        {
          this->NextHeatTransferRate_ = x;
        }

        void ThermalCircuitPathData::
        NextHeatTransferRate (::std::unique_ptr< NextHeatTransferRate_type > x)
        {
          this->NextHeatTransferRate_.set (std::move (x));
        }

        const ThermalCircuitPathData::HeatSource_optional& ThermalCircuitPathData::
        HeatSource () const
        {
          return this->HeatSource_;
        }

        ThermalCircuitPathData::HeatSource_optional& ThermalCircuitPathData::
        HeatSource ()
        {
          return this->HeatSource_;
        }

        void ThermalCircuitPathData::
        HeatSource (const HeatSource_type& x)
        {
          this->HeatSource_.set (x);
        }

        void ThermalCircuitPathData::
        HeatSource (const HeatSource_optional& x)
        {
          this->HeatSource_ = x;
        }

        void ThermalCircuitPathData::
        HeatSource (::std::unique_ptr< HeatSource_type > x)
        {
          this->HeatSource_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextHeatSource_optional& ThermalCircuitPathData::
        NextHeatSource () const
        {
          return this->NextHeatSource_;
        }

        ThermalCircuitPathData::NextHeatSource_optional& ThermalCircuitPathData::
        NextHeatSource ()
        {
          return this->NextHeatSource_;
        }

        void ThermalCircuitPathData::
        NextHeatSource (const NextHeatSource_type& x)
        {
          this->NextHeatSource_.set (x);
        }

        void ThermalCircuitPathData::
        NextHeatSource (const NextHeatSource_optional& x)
        {
          this->NextHeatSource_ = x;
        }

        void ThermalCircuitPathData::
        NextHeatSource (::std::unique_ptr< NextHeatSource_type > x)
        {
          this->NextHeatSource_.set (std::move (x));
        }

        const ThermalCircuitPathData::HeatSourceBaseline_optional& ThermalCircuitPathData::
        HeatSourceBaseline () const
        {
          return this->HeatSourceBaseline_;
        }

        ThermalCircuitPathData::HeatSourceBaseline_optional& ThermalCircuitPathData::
        HeatSourceBaseline ()
        {
          return this->HeatSourceBaseline_;
        }

        void ThermalCircuitPathData::
        HeatSourceBaseline (const HeatSourceBaseline_type& x)
        {
          this->HeatSourceBaseline_.set (x);
        }

        void ThermalCircuitPathData::
        HeatSourceBaseline (const HeatSourceBaseline_optional& x)
        {
          this->HeatSourceBaseline_ = x;
        }

        void ThermalCircuitPathData::
        HeatSourceBaseline (::std::unique_ptr< HeatSourceBaseline_type > x)
        {
          this->HeatSourceBaseline_.set (std::move (x));
        }

        const ThermalCircuitPathData::TemperatureSource_optional& ThermalCircuitPathData::
        TemperatureSource () const
        {
          return this->TemperatureSource_;
        }

        ThermalCircuitPathData::TemperatureSource_optional& ThermalCircuitPathData::
        TemperatureSource ()
        {
          return this->TemperatureSource_;
        }

        void ThermalCircuitPathData::
        TemperatureSource (const TemperatureSource_type& x)
        {
          this->TemperatureSource_.set (x);
        }

        void ThermalCircuitPathData::
        TemperatureSource (const TemperatureSource_optional& x)
        {
          this->TemperatureSource_ = x;
        }

        void ThermalCircuitPathData::
        TemperatureSource (::std::unique_ptr< TemperatureSource_type > x)
        {
          this->TemperatureSource_.set (std::move (x));
        }

        const ThermalCircuitPathData::NextTemperatureSource_optional& ThermalCircuitPathData::
        NextTemperatureSource () const
        {
          return this->NextTemperatureSource_;
        }

        ThermalCircuitPathData::NextTemperatureSource_optional& ThermalCircuitPathData::
        NextTemperatureSource ()
        {
          return this->NextTemperatureSource_;
        }

        void ThermalCircuitPathData::
        NextTemperatureSource (const NextTemperatureSource_type& x)
        {
          this->NextTemperatureSource_.set (x);
        }

        void ThermalCircuitPathData::
        NextTemperatureSource (const NextTemperatureSource_optional& x)
        {
          this->NextTemperatureSource_ = x;
        }

        void ThermalCircuitPathData::
        NextTemperatureSource (::std::unique_ptr< NextTemperatureSource_type > x)
        {
          this->NextTemperatureSource_.set (std::move (x));
        }

        const ThermalCircuitPathData::TemperatureSourceBaseline_optional& ThermalCircuitPathData::
        TemperatureSourceBaseline () const
        {
          return this->TemperatureSourceBaseline_;
        }

        ThermalCircuitPathData::TemperatureSourceBaseline_optional& ThermalCircuitPathData::
        TemperatureSourceBaseline ()
        {
          return this->TemperatureSourceBaseline_;
        }

        void ThermalCircuitPathData::
        TemperatureSourceBaseline (const TemperatureSourceBaseline_type& x)
        {
          this->TemperatureSourceBaseline_.set (x);
        }

        void ThermalCircuitPathData::
        TemperatureSourceBaseline (const TemperatureSourceBaseline_optional& x)
        {
          this->TemperatureSourceBaseline_ = x;
        }

        void ThermalCircuitPathData::
        TemperatureSourceBaseline (::std::unique_ptr< TemperatureSourceBaseline_type > x)
        {
          this->TemperatureSourceBaseline_.set (std::move (x));
        }

        const ThermalCircuitPathData::ValveBreakdownTemperature_optional& ThermalCircuitPathData::
        ValveBreakdownTemperature () const
        {
          return this->ValveBreakdownTemperature_;
        }

        ThermalCircuitPathData::ValveBreakdownTemperature_optional& ThermalCircuitPathData::
        ValveBreakdownTemperature ()
        {
          return this->ValveBreakdownTemperature_;
        }

        void ThermalCircuitPathData::
        ValveBreakdownTemperature (const ValveBreakdownTemperature_type& x)
        {
          this->ValveBreakdownTemperature_.set (x);
        }

        void ThermalCircuitPathData::
        ValveBreakdownTemperature (const ValveBreakdownTemperature_optional& x)
        {
          this->ValveBreakdownTemperature_ = x;
        }

        void ThermalCircuitPathData::
        ValveBreakdownTemperature (::std::unique_ptr< ValveBreakdownTemperature_type > x)
        {
          this->ValveBreakdownTemperature_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ThermalCircuitPathData
        //

        ThermalCircuitPathData::
        ThermalCircuitPathData ()
        : ::mil::tatrc::physiology::datamodel::CircuitPathData (),
          Resistance_ (this),
          NextResistance_ (this),
          ResistanceBaseline_ (this),
          Capacitance_ (this),
          NextCapacitance_ (this),
          CapacitanceBaseline_ (this),
          Inductance_ (this),
          NextInductance_ (this),
          InductanceBaseline_ (this),
          HeatTransferRate_ (this),
          NextHeatTransferRate_ (this),
          HeatSource_ (this),
          NextHeatSource_ (this),
          HeatSourceBaseline_ (this),
          TemperatureSource_ (this),
          NextTemperatureSource_ (this),
          TemperatureSourceBaseline_ (this),
          ValveBreakdownTemperature_ (this)
        {
        }

        ThermalCircuitPathData::
        ThermalCircuitPathData (const Name_type& Name,
                                const SourceNode_type& SourceNode,
                                const TargetNode_type& TargetNode)
        : ::mil::tatrc::physiology::datamodel::CircuitPathData (Name,
                                                                SourceNode,
                                                                TargetNode),
          Resistance_ (this),
          NextResistance_ (this),
          ResistanceBaseline_ (this),
          Capacitance_ (this),
          NextCapacitance_ (this),
          CapacitanceBaseline_ (this),
          Inductance_ (this),
          NextInductance_ (this),
          InductanceBaseline_ (this),
          HeatTransferRate_ (this),
          NextHeatTransferRate_ (this),
          HeatSource_ (this),
          NextHeatSource_ (this),
          HeatSourceBaseline_ (this),
          TemperatureSource_ (this),
          NextTemperatureSource_ (this),
          TemperatureSourceBaseline_ (this),
          ValveBreakdownTemperature_ (this)
        {
        }

        ThermalCircuitPathData::
        ThermalCircuitPathData (::std::unique_ptr< Name_type > Name,
                                ::std::unique_ptr< SourceNode_type > SourceNode,
                                ::std::unique_ptr< TargetNode_type > TargetNode)
        : ::mil::tatrc::physiology::datamodel::CircuitPathData (std::move (Name),
                                                                std::move (SourceNode),
                                                                std::move (TargetNode)),
          Resistance_ (this),
          NextResistance_ (this),
          ResistanceBaseline_ (this),
          Capacitance_ (this),
          NextCapacitance_ (this),
          CapacitanceBaseline_ (this),
          Inductance_ (this),
          NextInductance_ (this),
          InductanceBaseline_ (this),
          HeatTransferRate_ (this),
          NextHeatTransferRate_ (this),
          HeatSource_ (this),
          NextHeatSource_ (this),
          HeatSourceBaseline_ (this),
          TemperatureSource_ (this),
          NextTemperatureSource_ (this),
          TemperatureSourceBaseline_ (this),
          ValveBreakdownTemperature_ (this)
        {
        }

        ThermalCircuitPathData::
        ThermalCircuitPathData (const ThermalCircuitPathData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitPathData (x, f, c),
          Resistance_ (x.Resistance_, f, this),
          NextResistance_ (x.NextResistance_, f, this),
          ResistanceBaseline_ (x.ResistanceBaseline_, f, this),
          Capacitance_ (x.Capacitance_, f, this),
          NextCapacitance_ (x.NextCapacitance_, f, this),
          CapacitanceBaseline_ (x.CapacitanceBaseline_, f, this),
          Inductance_ (x.Inductance_, f, this),
          NextInductance_ (x.NextInductance_, f, this),
          InductanceBaseline_ (x.InductanceBaseline_, f, this),
          HeatTransferRate_ (x.HeatTransferRate_, f, this),
          NextHeatTransferRate_ (x.NextHeatTransferRate_, f, this),
          HeatSource_ (x.HeatSource_, f, this),
          NextHeatSource_ (x.NextHeatSource_, f, this),
          HeatSourceBaseline_ (x.HeatSourceBaseline_, f, this),
          TemperatureSource_ (x.TemperatureSource_, f, this),
          NextTemperatureSource_ (x.NextTemperatureSource_, f, this),
          TemperatureSourceBaseline_ (x.TemperatureSourceBaseline_, f, this),
          ValveBreakdownTemperature_ (x.ValveBreakdownTemperature_, f, this)
        {
        }

        ThermalCircuitPathData::
        ThermalCircuitPathData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitPathData (e, f | ::xml_schema::flags::base, c),
          Resistance_ (this),
          NextResistance_ (this),
          ResistanceBaseline_ (this),
          Capacitance_ (this),
          NextCapacitance_ (this),
          CapacitanceBaseline_ (this),
          Inductance_ (this),
          NextInductance_ (this),
          InductanceBaseline_ (this),
          HeatTransferRate_ (this),
          NextHeatTransferRate_ (this),
          HeatSource_ (this),
          NextHeatSource_ (this),
          HeatSourceBaseline_ (this),
          TemperatureSource_ (this),
          NextTemperatureSource_ (this),
          TemperatureSourceBaseline_ (this),
          ValveBreakdownTemperature_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ThermalCircuitPathData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CircuitPathData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Resistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Resistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Resistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Resistance_)
                {
                  ::std::unique_ptr< Resistance_type > r (
                    dynamic_cast< Resistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Resistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextResistance_)
                {
                  ::std::unique_ptr< NextResistance_type > r (
                    dynamic_cast< NextResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ResistanceBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResistanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResistanceBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResistanceBaseline_)
                {
                  ::std::unique_ptr< ResistanceBaseline_type > r (
                    dynamic_cast< ResistanceBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResistanceBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Capacitance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Capacitance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Capacitance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Capacitance_)
                {
                  ::std::unique_ptr< Capacitance_type > r (
                    dynamic_cast< Capacitance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Capacitance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextCapacitance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextCapacitance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextCapacitance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextCapacitance_)
                {
                  ::std::unique_ptr< NextCapacitance_type > r (
                    dynamic_cast< NextCapacitance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextCapacitance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CapacitanceBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CapacitanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CapacitanceBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CapacitanceBaseline_)
                {
                  ::std::unique_ptr< CapacitanceBaseline_type > r (
                    dynamic_cast< CapacitanceBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CapacitanceBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Inductance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Inductance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Inductance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Inductance_)
                {
                  ::std::unique_ptr< Inductance_type > r (
                    dynamic_cast< Inductance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Inductance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextInductance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextInductance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextInductance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextInductance_)
                {
                  ::std::unique_ptr< NextInductance_type > r (
                    dynamic_cast< NextInductance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextInductance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InductanceBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InductanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InductanceBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InductanceBaseline_)
                {
                  ::std::unique_ptr< InductanceBaseline_type > r (
                    dynamic_cast< InductanceBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InductanceBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeatTransferRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatTransferRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatTransferRate_)
                {
                  ::std::unique_ptr< HeatTransferRate_type > r (
                    dynamic_cast< HeatTransferRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatTransferRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextHeatTransferRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextHeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextHeatTransferRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextHeatTransferRate_)
                {
                  ::std::unique_ptr< NextHeatTransferRate_type > r (
                    dynamic_cast< NextHeatTransferRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextHeatTransferRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeatSource
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatSource_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatSource_)
                {
                  ::std::unique_ptr< HeatSource_type > r (
                    dynamic_cast< HeatSource_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatSource_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextHeatSource
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextHeatSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextHeatSource_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextHeatSource_)
                {
                  ::std::unique_ptr< NextHeatSource_type > r (
                    dynamic_cast< NextHeatSource_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextHeatSource_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeatSourceBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatSourceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatSourceBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatSourceBaseline_)
                {
                  ::std::unique_ptr< HeatSourceBaseline_type > r (
                    dynamic_cast< HeatSourceBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatSourceBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TemperatureSource
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TemperatureSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TemperatureSource_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TemperatureSource_)
                {
                  ::std::unique_ptr< TemperatureSource_type > r (
                    dynamic_cast< TemperatureSource_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TemperatureSource_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextTemperatureSource
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextTemperatureSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextTemperatureSource_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextTemperatureSource_)
                {
                  ::std::unique_ptr< NextTemperatureSource_type > r (
                    dynamic_cast< NextTemperatureSource_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextTemperatureSource_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TemperatureSourceBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TemperatureSourceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TemperatureSourceBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TemperatureSourceBaseline_)
                {
                  ::std::unique_ptr< TemperatureSourceBaseline_type > r (
                    dynamic_cast< TemperatureSourceBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TemperatureSourceBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ValveBreakdownTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ValveBreakdownTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ValveBreakdownTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ValveBreakdownTemperature_)
                {
                  ::std::unique_ptr< ValveBreakdownTemperature_type > r (
                    dynamic_cast< ValveBreakdownTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ValveBreakdownTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ThermalCircuitPathData* ThermalCircuitPathData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ThermalCircuitPathData (*this, f, c);
        }

        ThermalCircuitPathData& ThermalCircuitPathData::
        operator= (const ThermalCircuitPathData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CircuitPathData& > (*this) = x;
            this->Resistance_ = x.Resistance_;
            this->NextResistance_ = x.NextResistance_;
            this->ResistanceBaseline_ = x.ResistanceBaseline_;
            this->Capacitance_ = x.Capacitance_;
            this->NextCapacitance_ = x.NextCapacitance_;
            this->CapacitanceBaseline_ = x.CapacitanceBaseline_;
            this->Inductance_ = x.Inductance_;
            this->NextInductance_ = x.NextInductance_;
            this->InductanceBaseline_ = x.InductanceBaseline_;
            this->HeatTransferRate_ = x.HeatTransferRate_;
            this->NextHeatTransferRate_ = x.NextHeatTransferRate_;
            this->HeatSource_ = x.HeatSource_;
            this->NextHeatSource_ = x.NextHeatSource_;
            this->HeatSourceBaseline_ = x.HeatSourceBaseline_;
            this->TemperatureSource_ = x.TemperatureSource_;
            this->NextTemperatureSource_ = x.NextTemperatureSource_;
            this->TemperatureSourceBaseline_ = x.TemperatureSourceBaseline_;
            this->ValveBreakdownTemperature_ = x.ValveBreakdownTemperature_;
          }

          return *this;
        }

        ThermalCircuitPathData::
        ~ThermalCircuitPathData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ThermalCircuitPathData >
        _xsd_ThermalCircuitPathData_type_factory_init (
          "ThermalCircuitPathData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ThermalCircuitPathData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitPathData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Resistance ())
            {
              o << ::std::endl << "Resistance: ";
              om.insert (o, *i.Resistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextResistance ())
            {
              o << ::std::endl << "NextResistance: ";
              om.insert (o, *i.NextResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResistanceBaseline ())
            {
              o << ::std::endl << "ResistanceBaseline: ";
              om.insert (o, *i.ResistanceBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Capacitance ())
            {
              o << ::std::endl << "Capacitance: ";
              om.insert (o, *i.Capacitance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextCapacitance ())
            {
              o << ::std::endl << "NextCapacitance: ";
              om.insert (o, *i.NextCapacitance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CapacitanceBaseline ())
            {
              o << ::std::endl << "CapacitanceBaseline: ";
              om.insert (o, *i.CapacitanceBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Inductance ())
            {
              o << ::std::endl << "Inductance: ";
              om.insert (o, *i.Inductance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextInductance ())
            {
              o << ::std::endl << "NextInductance: ";
              om.insert (o, *i.NextInductance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InductanceBaseline ())
            {
              o << ::std::endl << "InductanceBaseline: ";
              om.insert (o, *i.InductanceBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatTransferRate ())
            {
              o << ::std::endl << "HeatTransferRate: ";
              om.insert (o, *i.HeatTransferRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextHeatTransferRate ())
            {
              o << ::std::endl << "NextHeatTransferRate: ";
              om.insert (o, *i.NextHeatTransferRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatSource ())
            {
              o << ::std::endl << "HeatSource: ";
              om.insert (o, *i.HeatSource ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextHeatSource ())
            {
              o << ::std::endl << "NextHeatSource: ";
              om.insert (o, *i.NextHeatSource ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatSourceBaseline ())
            {
              o << ::std::endl << "HeatSourceBaseline: ";
              om.insert (o, *i.HeatSourceBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TemperatureSource ())
            {
              o << ::std::endl << "TemperatureSource: ";
              om.insert (o, *i.TemperatureSource ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextTemperatureSource ())
            {
              o << ::std::endl << "NextTemperatureSource: ";
              om.insert (o, *i.NextTemperatureSource ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TemperatureSourceBaseline ())
            {
              o << ::std::endl << "TemperatureSourceBaseline: ";
              om.insert (o, *i.TemperatureSourceBaseline ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ValveBreakdownTemperature ())
            {
              o << ::std::endl << "ValveBreakdownTemperature: ";
              om.insert (o, *i.ValveBreakdownTemperature ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ThermalCircuitPathData >
        _xsd_ThermalCircuitPathData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ThermalCircuitPathData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitPathData& > (i);

          // Resistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Resistance ())
            {
              const ThermalCircuitPathData::Resistance_type& x (*i.Resistance ());
              if (typeid (ThermalCircuitPathData::Resistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Resistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Resistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextResistance ())
            {
              const ThermalCircuitPathData::NextResistance_type& x (*i.NextResistance ());
              if (typeid (ThermalCircuitPathData::NextResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ResistanceBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResistanceBaseline ())
            {
              const ThermalCircuitPathData::ResistanceBaseline_type& x (*i.ResistanceBaseline ());
              if (typeid (ThermalCircuitPathData::ResistanceBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResistanceBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResistanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Capacitance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Capacitance ())
            {
              const ThermalCircuitPathData::Capacitance_type& x (*i.Capacitance ());
              if (typeid (ThermalCircuitPathData::Capacitance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Capacitance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Capacitance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextCapacitance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextCapacitance ())
            {
              const ThermalCircuitPathData::NextCapacitance_type& x (*i.NextCapacitance ());
              if (typeid (ThermalCircuitPathData::NextCapacitance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextCapacitance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextCapacitance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CapacitanceBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CapacitanceBaseline ())
            {
              const ThermalCircuitPathData::CapacitanceBaseline_type& x (*i.CapacitanceBaseline ());
              if (typeid (ThermalCircuitPathData::CapacitanceBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CapacitanceBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CapacitanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Inductance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Inductance ())
            {
              const ThermalCircuitPathData::Inductance_type& x (*i.Inductance ());
              if (typeid (ThermalCircuitPathData::Inductance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Inductance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Inductance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextInductance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextInductance ())
            {
              const ThermalCircuitPathData::NextInductance_type& x (*i.NextInductance ());
              if (typeid (ThermalCircuitPathData::NextInductance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextInductance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextInductance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InductanceBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InductanceBaseline ())
            {
              const ThermalCircuitPathData::InductanceBaseline_type& x (*i.InductanceBaseline ());
              if (typeid (ThermalCircuitPathData::InductanceBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InductanceBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InductanceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeatTransferRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatTransferRate ())
            {
              const ThermalCircuitPathData::HeatTransferRate_type& x (*i.HeatTransferRate ());
              if (typeid (ThermalCircuitPathData::HeatTransferRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatTransferRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextHeatTransferRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextHeatTransferRate ())
            {
              const ThermalCircuitPathData::NextHeatTransferRate_type& x (*i.NextHeatTransferRate ());
              if (typeid (ThermalCircuitPathData::NextHeatTransferRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextHeatTransferRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextHeatTransferRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeatSource
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatSource ())
            {
              const ThermalCircuitPathData::HeatSource_type& x (*i.HeatSource ());
              if (typeid (ThermalCircuitPathData::HeatSource_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatSource",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextHeatSource
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextHeatSource ())
            {
              const ThermalCircuitPathData::NextHeatSource_type& x (*i.NextHeatSource ());
              if (typeid (ThermalCircuitPathData::NextHeatSource_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextHeatSource",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextHeatSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeatSourceBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatSourceBaseline ())
            {
              const ThermalCircuitPathData::HeatSourceBaseline_type& x (*i.HeatSourceBaseline ());
              if (typeid (ThermalCircuitPathData::HeatSourceBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatSourceBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatSourceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TemperatureSource
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TemperatureSource ())
            {
              const ThermalCircuitPathData::TemperatureSource_type& x (*i.TemperatureSource ());
              if (typeid (ThermalCircuitPathData::TemperatureSource_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TemperatureSource",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TemperatureSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextTemperatureSource
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextTemperatureSource ())
            {
              const ThermalCircuitPathData::NextTemperatureSource_type& x (*i.NextTemperatureSource ());
              if (typeid (ThermalCircuitPathData::NextTemperatureSource_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextTemperatureSource",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextTemperatureSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TemperatureSourceBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TemperatureSourceBaseline ())
            {
              const ThermalCircuitPathData::TemperatureSourceBaseline_type& x (*i.TemperatureSourceBaseline ());
              if (typeid (ThermalCircuitPathData::TemperatureSourceBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TemperatureSourceBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TemperatureSourceBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ValveBreakdownTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ValveBreakdownTemperature ())
            {
              const ThermalCircuitPathData::ValveBreakdownTemperature_type& x (*i.ValveBreakdownTemperature ());
              if (typeid (ThermalCircuitPathData::ValveBreakdownTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ValveBreakdownTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ValveBreakdownTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ThermalCircuitPathData >
        _xsd_ThermalCircuitPathData_type_serializer_init (
          "ThermalCircuitPathData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


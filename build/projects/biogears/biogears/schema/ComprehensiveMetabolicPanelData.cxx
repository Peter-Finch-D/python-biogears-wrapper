// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ComprehensiveMetabolicPanelData.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarAmountPerVolumeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ComprehensiveMetabolicPanelData
        // 

        const ComprehensiveMetabolicPanelData::Albumin_optional& ComprehensiveMetabolicPanelData::
        Albumin () const
        {
          return this->Albumin_;
        }

        ComprehensiveMetabolicPanelData::Albumin_optional& ComprehensiveMetabolicPanelData::
        Albumin ()
        {
          return this->Albumin_;
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (const Albumin_type& x)
        {
          this->Albumin_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (const Albumin_optional& x)
        {
          this->Albumin_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Albumin (::std::unique_ptr< Albumin_type > x)
        {
          this->Albumin_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::ALP_optional& ComprehensiveMetabolicPanelData::
        ALP () const
        {
          return this->ALP_;
        }

        ComprehensiveMetabolicPanelData::ALP_optional& ComprehensiveMetabolicPanelData::
        ALP ()
        {
          return this->ALP_;
        }

        void ComprehensiveMetabolicPanelData::
        ALP (const ALP_type& x)
        {
          this->ALP_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        ALP (const ALP_optional& x)
        {
          this->ALP_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        ALP (::std::unique_ptr< ALP_type > x)
        {
          this->ALP_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::ALT_optional& ComprehensiveMetabolicPanelData::
        ALT () const
        {
          return this->ALT_;
        }

        ComprehensiveMetabolicPanelData::ALT_optional& ComprehensiveMetabolicPanelData::
        ALT ()
        {
          return this->ALT_;
        }

        void ComprehensiveMetabolicPanelData::
        ALT (const ALT_type& x)
        {
          this->ALT_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        ALT (const ALT_optional& x)
        {
          this->ALT_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        ALT (::std::unique_ptr< ALT_type > x)
        {
          this->ALT_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::AST_optional& ComprehensiveMetabolicPanelData::
        AST () const
        {
          return this->AST_;
        }

        ComprehensiveMetabolicPanelData::AST_optional& ComprehensiveMetabolicPanelData::
        AST ()
        {
          return this->AST_;
        }

        void ComprehensiveMetabolicPanelData::
        AST (const AST_type& x)
        {
          this->AST_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        AST (const AST_optional& x)
        {
          this->AST_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        AST (::std::unique_ptr< AST_type > x)
        {
          this->AST_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::BUN_optional& ComprehensiveMetabolicPanelData::
        BUN () const
        {
          return this->BUN_;
        }

        ComprehensiveMetabolicPanelData::BUN_optional& ComprehensiveMetabolicPanelData::
        BUN ()
        {
          return this->BUN_;
        }

        void ComprehensiveMetabolicPanelData::
        BUN (const BUN_type& x)
        {
          this->BUN_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        BUN (const BUN_optional& x)
        {
          this->BUN_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        BUN (::std::unique_ptr< BUN_type > x)
        {
          this->BUN_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Calcium_optional& ComprehensiveMetabolicPanelData::
        Calcium () const
        {
          return this->Calcium_;
        }

        ComprehensiveMetabolicPanelData::Calcium_optional& ComprehensiveMetabolicPanelData::
        Calcium ()
        {
          return this->Calcium_;
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (const Calcium_type& x)
        {
          this->Calcium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (const Calcium_optional& x)
        {
          this->Calcium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Calcium (::std::unique_ptr< Calcium_type > x)
        {
          this->Calcium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Chloride_optional& ComprehensiveMetabolicPanelData::
        Chloride () const
        {
          return this->Chloride_;
        }

        ComprehensiveMetabolicPanelData::Chloride_optional& ComprehensiveMetabolicPanelData::
        Chloride ()
        {
          return this->Chloride_;
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (const Chloride_type& x)
        {
          this->Chloride_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (const Chloride_optional& x)
        {
          this->Chloride_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Chloride (::std::unique_ptr< Chloride_type > x)
        {
          this->Chloride_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::CO2_optional& ComprehensiveMetabolicPanelData::
        CO2 () const
        {
          return this->CO2_;
        }

        ComprehensiveMetabolicPanelData::CO2_optional& ComprehensiveMetabolicPanelData::
        CO2 ()
        {
          return this->CO2_;
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (const CO2_type& x)
        {
          this->CO2_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (const CO2_optional& x)
        {
          this->CO2_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        CO2 (::std::unique_ptr< CO2_type > x)
        {
          this->CO2_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Creatinine_optional& ComprehensiveMetabolicPanelData::
        Creatinine () const
        {
          return this->Creatinine_;
        }

        ComprehensiveMetabolicPanelData::Creatinine_optional& ComprehensiveMetabolicPanelData::
        Creatinine ()
        {
          return this->Creatinine_;
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (const Creatinine_type& x)
        {
          this->Creatinine_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (const Creatinine_optional& x)
        {
          this->Creatinine_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Creatinine (::std::unique_ptr< Creatinine_type > x)
        {
          this->Creatinine_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Glucose_optional& ComprehensiveMetabolicPanelData::
        Glucose () const
        {
          return this->Glucose_;
        }

        ComprehensiveMetabolicPanelData::Glucose_optional& ComprehensiveMetabolicPanelData::
        Glucose ()
        {
          return this->Glucose_;
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (const Glucose_type& x)
        {
          this->Glucose_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (const Glucose_optional& x)
        {
          this->Glucose_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Glucose (::std::unique_ptr< Glucose_type > x)
        {
          this->Glucose_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Potassium_optional& ComprehensiveMetabolicPanelData::
        Potassium () const
        {
          return this->Potassium_;
        }

        ComprehensiveMetabolicPanelData::Potassium_optional& ComprehensiveMetabolicPanelData::
        Potassium ()
        {
          return this->Potassium_;
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (const Potassium_type& x)
        {
          this->Potassium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (const Potassium_optional& x)
        {
          this->Potassium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Potassium (::std::unique_ptr< Potassium_type > x)
        {
          this->Potassium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::Sodium_optional& ComprehensiveMetabolicPanelData::
        Sodium () const
        {
          return this->Sodium_;
        }

        ComprehensiveMetabolicPanelData::Sodium_optional& ComprehensiveMetabolicPanelData::
        Sodium ()
        {
          return this->Sodium_;
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (const Sodium_type& x)
        {
          this->Sodium_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (const Sodium_optional& x)
        {
          this->Sodium_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        Sodium (::std::unique_ptr< Sodium_type > x)
        {
          this->Sodium_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::TotalBilirubin_optional& ComprehensiveMetabolicPanelData::
        TotalBilirubin () const
        {
          return this->TotalBilirubin_;
        }

        ComprehensiveMetabolicPanelData::TotalBilirubin_optional& ComprehensiveMetabolicPanelData::
        TotalBilirubin ()
        {
          return this->TotalBilirubin_;
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (const TotalBilirubin_type& x)
        {
          this->TotalBilirubin_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (const TotalBilirubin_optional& x)
        {
          this->TotalBilirubin_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > x)
        {
          this->TotalBilirubin_.set (std::move (x));
        }

        const ComprehensiveMetabolicPanelData::TotalProtein_optional& ComprehensiveMetabolicPanelData::
        TotalProtein () const
        {
          return this->TotalProtein_;
        }

        ComprehensiveMetabolicPanelData::TotalProtein_optional& ComprehensiveMetabolicPanelData::
        TotalProtein ()
        {
          return this->TotalProtein_;
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (const TotalProtein_type& x)
        {
          this->TotalProtein_.set (x);
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (const TotalProtein_optional& x)
        {
          this->TotalProtein_ = x;
        }

        void ComprehensiveMetabolicPanelData::
        TotalProtein (::std::unique_ptr< TotalProtein_type > x)
        {
          this->TotalProtein_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ComprehensiveMetabolicPanelData
        //

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Albumin_ (this),
          ALP_ (this),
          ALT_ (this),
          AST_ (this),
          BUN_ (this),
          Calcium_ (this),
          Chloride_ (this),
          CO2_ (this),
          Creatinine_ (this),
          Glucose_ (this),
          Potassium_ (this),
          Sodium_ (this),
          TotalBilirubin_ (this),
          TotalProtein_ (this)
        {
        }

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData (const ComprehensiveMetabolicPanelData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Albumin_ (x.Albumin_, f, this),
          ALP_ (x.ALP_, f, this),
          ALT_ (x.ALT_, f, this),
          AST_ (x.AST_, f, this),
          BUN_ (x.BUN_, f, this),
          Calcium_ (x.Calcium_, f, this),
          Chloride_ (x.Chloride_, f, this),
          CO2_ (x.CO2_, f, this),
          Creatinine_ (x.Creatinine_, f, this),
          Glucose_ (x.Glucose_, f, this),
          Potassium_ (x.Potassium_, f, this),
          Sodium_ (x.Sodium_, f, this),
          TotalBilirubin_ (x.TotalBilirubin_, f, this),
          TotalProtein_ (x.TotalProtein_, f, this)
        {
        }

        ComprehensiveMetabolicPanelData::
        ComprehensiveMetabolicPanelData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Albumin_ (this),
          ALP_ (this),
          ALT_ (this),
          AST_ (this),
          BUN_ (this),
          Calcium_ (this),
          Chloride_ (this),
          CO2_ (this),
          Creatinine_ (this),
          Glucose_ (this),
          Potassium_ (this),
          Sodium_ (this),
          TotalBilirubin_ (this),
          TotalProtein_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ComprehensiveMetabolicPanelData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Albumin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Albumin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Albumin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Albumin_)
                {
                  ::std::unique_ptr< Albumin_type > r (
                    dynamic_cast< Albumin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Albumin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ALP
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ALP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ALP_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ALP_)
                {
                  ::std::unique_ptr< ALP_type > r (
                    dynamic_cast< ALP_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ALP_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ALT
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ALT",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ALT_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ALT_)
                {
                  ::std::unique_ptr< ALT_type > r (
                    dynamic_cast< ALT_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ALT_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AST
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AST",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AST_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AST_)
                {
                  ::std::unique_ptr< AST_type > r (
                    dynamic_cast< AST_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AST_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BUN
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BUN",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BUN_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BUN_)
                {
                  ::std::unique_ptr< BUN_type > r (
                    dynamic_cast< BUN_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BUN_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Calcium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Calcium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Calcium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Calcium_)
                {
                  ::std::unique_ptr< Calcium_type > r (
                    dynamic_cast< Calcium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Calcium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Chloride
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Chloride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Chloride_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Chloride_)
                {
                  ::std::unique_ptr< Chloride_type > r (
                    dynamic_cast< Chloride_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Chloride_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CO2
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CO2",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CO2_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CO2_)
                {
                  ::std::unique_ptr< CO2_type > r (
                    dynamic_cast< CO2_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CO2_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Creatinine
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Creatinine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Creatinine_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Creatinine_)
                {
                  ::std::unique_ptr< Creatinine_type > r (
                    dynamic_cast< Creatinine_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Creatinine_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Glucose
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Glucose_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Glucose_)
                {
                  ::std::unique_ptr< Glucose_type > r (
                    dynamic_cast< Glucose_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Glucose_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Potassium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Potassium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Potassium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Potassium_)
                {
                  ::std::unique_ptr< Potassium_type > r (
                    dynamic_cast< Potassium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Potassium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Sodium
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Sodium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Sodium_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Sodium_)
                {
                  ::std::unique_ptr< Sodium_type > r (
                    dynamic_cast< Sodium_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Sodium_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalBilirubin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalBilirubin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalBilirubin_)
                {
                  ::std::unique_ptr< TotalBilirubin_type > r (
                    dynamic_cast< TotalBilirubin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalBilirubin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalProtein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalProtein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalProtein_)
                {
                  ::std::unique_ptr< TotalProtein_type > r (
                    dynamic_cast< TotalProtein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalProtein_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ComprehensiveMetabolicPanelData* ComprehensiveMetabolicPanelData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ComprehensiveMetabolicPanelData (*this, f, c);
        }

        ComprehensiveMetabolicPanelData& ComprehensiveMetabolicPanelData::
        operator= (const ComprehensiveMetabolicPanelData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Albumin_ = x.Albumin_;
            this->ALP_ = x.ALP_;
            this->ALT_ = x.ALT_;
            this->AST_ = x.AST_;
            this->BUN_ = x.BUN_;
            this->Calcium_ = x.Calcium_;
            this->Chloride_ = x.Chloride_;
            this->CO2_ = x.CO2_;
            this->Creatinine_ = x.Creatinine_;
            this->Glucose_ = x.Glucose_;
            this->Potassium_ = x.Potassium_;
            this->Sodium_ = x.Sodium_;
            this->TotalBilirubin_ = x.TotalBilirubin_;
            this->TotalProtein_ = x.TotalProtein_;
          }

          return *this;
        }

        ComprehensiveMetabolicPanelData::
        ~ComprehensiveMetabolicPanelData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_type_factory_init (
          "ComprehensiveMetabolicPanelData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ComprehensiveMetabolicPanelData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Albumin ())
            {
              o << ::std::endl << "Albumin: ";
              om.insert (o, *i.Albumin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ALP ())
            {
              o << ::std::endl << "ALP: ";
              om.insert (o, *i.ALP ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ALT ())
            {
              o << ::std::endl << "ALT: ";
              om.insert (o, *i.ALT ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AST ())
            {
              o << ::std::endl << "AST: ";
              om.insert (o, *i.AST ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BUN ())
            {
              o << ::std::endl << "BUN: ";
              om.insert (o, *i.BUN ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Calcium ())
            {
              o << ::std::endl << "Calcium: ";
              om.insert (o, *i.Calcium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Chloride ())
            {
              o << ::std::endl << "Chloride: ";
              om.insert (o, *i.Chloride ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CO2 ())
            {
              o << ::std::endl << "CO2: ";
              om.insert (o, *i.CO2 ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Creatinine ())
            {
              o << ::std::endl << "Creatinine: ";
              om.insert (o, *i.Creatinine ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              o << ::std::endl << "Glucose: ";
              om.insert (o, *i.Glucose ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Potassium ())
            {
              o << ::std::endl << "Potassium: ";
              om.insert (o, *i.Potassium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Sodium ())
            {
              o << ::std::endl << "Sodium: ";
              om.insert (o, *i.Sodium ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              o << ::std::endl << "TotalBilirubin: ";
              om.insert (o, *i.TotalBilirubin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalProtein ())
            {
              o << ::std::endl << "TotalProtein: ";
              om.insert (o, *i.TotalProtein ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ComprehensiveMetabolicPanelData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Albumin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Albumin ())
            {
              const ComprehensiveMetabolicPanelData::Albumin_type& x (*i.Albumin ());
              if (typeid (ComprehensiveMetabolicPanelData::Albumin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Albumin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Albumin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ALP
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ALP ())
            {
              const ComprehensiveMetabolicPanelData::ALP_type& x (*i.ALP ());
              if (typeid (ComprehensiveMetabolicPanelData::ALP_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ALP",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ALP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ALT
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ALT ())
            {
              const ComprehensiveMetabolicPanelData::ALT_type& x (*i.ALT ());
              if (typeid (ComprehensiveMetabolicPanelData::ALT_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ALT",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ALT",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AST
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AST ())
            {
              const ComprehensiveMetabolicPanelData::AST_type& x (*i.AST ());
              if (typeid (ComprehensiveMetabolicPanelData::AST_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AST",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AST",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BUN
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BUN ())
            {
              const ComprehensiveMetabolicPanelData::BUN_type& x (*i.BUN ());
              if (typeid (ComprehensiveMetabolicPanelData::BUN_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BUN",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BUN",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Calcium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Calcium ())
            {
              const ComprehensiveMetabolicPanelData::Calcium_type& x (*i.Calcium ());
              if (typeid (ComprehensiveMetabolicPanelData::Calcium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Calcium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Calcium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Chloride
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Chloride ())
            {
              const ComprehensiveMetabolicPanelData::Chloride_type& x (*i.Chloride ());
              if (typeid (ComprehensiveMetabolicPanelData::Chloride_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Chloride",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Chloride",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CO2
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CO2 ())
            {
              const ComprehensiveMetabolicPanelData::CO2_type& x (*i.CO2 ());
              if (typeid (ComprehensiveMetabolicPanelData::CO2_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CO2",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CO2",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Creatinine
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Creatinine ())
            {
              const ComprehensiveMetabolicPanelData::Creatinine_type& x (*i.Creatinine ());
              if (typeid (ComprehensiveMetabolicPanelData::Creatinine_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Creatinine",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Creatinine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Glucose
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Glucose ())
            {
              const ComprehensiveMetabolicPanelData::Glucose_type& x (*i.Glucose ());
              if (typeid (ComprehensiveMetabolicPanelData::Glucose_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Glucose",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Glucose",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Potassium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Potassium ())
            {
              const ComprehensiveMetabolicPanelData::Potassium_type& x (*i.Potassium ());
              if (typeid (ComprehensiveMetabolicPanelData::Potassium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Potassium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Potassium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Sodium
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Sodium ())
            {
              const ComprehensiveMetabolicPanelData::Sodium_type& x (*i.Sodium ());
              if (typeid (ComprehensiveMetabolicPanelData::Sodium_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Sodium",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Sodium",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalBilirubin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalBilirubin ())
            {
              const ComprehensiveMetabolicPanelData::TotalBilirubin_type& x (*i.TotalBilirubin ());
              if (typeid (ComprehensiveMetabolicPanelData::TotalBilirubin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalBilirubin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalBilirubin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalProtein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalProtein ())
            {
              const ComprehensiveMetabolicPanelData::TotalProtein_type& x (*i.TotalProtein ());
              if (typeid (ComprehensiveMetabolicPanelData::TotalProtein_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalProtein",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ComprehensiveMetabolicPanelData >
        _xsd_ComprehensiveMetabolicPanelData_type_serializer_init (
          "ComprehensiveMetabolicPanelData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


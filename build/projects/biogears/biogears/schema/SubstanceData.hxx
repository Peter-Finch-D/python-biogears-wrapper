// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SubstanceData.xsd.
 */

#ifndef SUBSTANCE_DATA_HXX
#define SUBSTANCE_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstanceData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ObjectData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumSubstanceClass;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerAmountData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class enumSubstanceState;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerAreaTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricResistanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstanceAerosolizationData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumePerTimePressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarInversePressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstanceClearanceData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstancePharmacokineticsData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class SubstancePharmacodynamicsData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %SubstanceData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API SubstanceData: public ::mil::tatrc::physiology::datamodel::ObjectData
        {
          public:
          /**
           * @name Name
           *
           * @brief Accessor and modifier functions for the %Name
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::string Name_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Name_type&
          Name () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Name_type&
          Name ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Name (const Name_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          Name (::std::unique_ptr< Name_type > p);

          //@}

          /**
           * @name Classification
           *
           * @brief Accessor and modifier functions for the %Classification
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSubstanceClass Classification_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Classification_type > Classification_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Classification_type, char > Classification_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Classification_optional&
          Classification () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Classification_optional&
          Classification ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Classification (const Classification_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Classification (const Classification_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Classification (::std::unique_ptr< Classification_type > p);

          //@}

          /**
           * @name Density
           *
           * @brief Accessor and modifier functions for the %Density
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData Density_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Density_type > Density_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Density_type, char > Density_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Density_optional&
          Density () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Density_optional&
          Density ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Density (const Density_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Density (const Density_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Density (::std::unique_ptr< Density_type > p);

          //@}

          /**
           * @name MolarMass
           *
           * @brief Accessor and modifier functions for the %MolarMass
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAmountData MolarMass_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MolarMass_type > MolarMass_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MolarMass_type, char > MolarMass_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MolarMass_optional&
          MolarMass () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MolarMass_optional&
          MolarMass ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MolarMass (const MolarMass_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MolarMass (const MolarMass_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MolarMass (::std::unique_ptr< MolarMass_type > p);

          //@}

          /**
           * @name State
           *
           * @brief Accessor and modifier functions for the %State
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::enumSubstanceState State_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< State_type > State_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< State_type, char > State_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const State_optional&
          State () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          State_optional&
          State ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          State (const State_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          State (const State_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          State (::std::unique_ptr< State_type > p);

          //@}

          /**
           * @name MaximumDiffusionFlux
           *
           * @brief Accessor and modifier functions for the %MaximumDiffusionFlux
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerAreaTimeData MaximumDiffusionFlux_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MaximumDiffusionFlux_type > MaximumDiffusionFlux_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaximumDiffusionFlux_type, char > MaximumDiffusionFlux_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MaximumDiffusionFlux_optional&
          MaximumDiffusionFlux () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MaximumDiffusionFlux_optional&
          MaximumDiffusionFlux ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MaximumDiffusionFlux (const MaximumDiffusionFlux_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MaximumDiffusionFlux (const MaximumDiffusionFlux_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MaximumDiffusionFlux (::std::unique_ptr< MaximumDiffusionFlux_type > p);

          //@}

          /**
           * @name MichaelisCoefficient
           *
           * @brief Accessor and modifier functions for the %MichaelisCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData MichaelisCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MichaelisCoefficient_type > MichaelisCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MichaelisCoefficient_type, char > MichaelisCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MichaelisCoefficient_optional&
          MichaelisCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MichaelisCoefficient_optional&
          MichaelisCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MichaelisCoefficient (const MichaelisCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MichaelisCoefficient (const MichaelisCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MichaelisCoefficient (::std::unique_ptr< MichaelisCoefficient_type > p);

          //@}

          /**
           * @name MembraneResistance
           *
           * @brief Accessor and modifier functions for the %MembraneResistance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricResistanceData MembraneResistance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MembraneResistance_type > MembraneResistance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MembraneResistance_type, char > MembraneResistance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MembraneResistance_optional&
          MembraneResistance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MembraneResistance_optional&
          MembraneResistance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MembraneResistance (const MembraneResistance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MembraneResistance (const MembraneResistance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MembraneResistance (::std::unique_ptr< MembraneResistance_type > p);

          //@}

          /**
           * @name Aerosolization
           *
           * @brief Accessor and modifier functions for the %Aerosolization
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstanceAerosolizationData Aerosolization_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Aerosolization_type > Aerosolization_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Aerosolization_type, char > Aerosolization_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Aerosolization_optional&
          Aerosolization () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Aerosolization_optional&
          Aerosolization ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Aerosolization (const Aerosolization_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Aerosolization (const Aerosolization_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Aerosolization (::std::unique_ptr< Aerosolization_type > p);

          //@}

          /**
           * @name BloodConcentration
           *
           * @brief Accessor and modifier functions for the %BloodConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BloodConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodConcentration_type > BloodConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodConcentration_type, char > BloodConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodConcentration_optional&
          BloodConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodConcentration_optional&
          BloodConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodConcentration (const BloodConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodConcentration (const BloodConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodConcentration (::std::unique_ptr< BloodConcentration_type > p);

          //@}

          /**
           * @name MassInBody
           *
           * @brief Accessor and modifier functions for the %MassInBody
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MassInBody_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MassInBody_type > MassInBody_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MassInBody_type, char > MassInBody_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MassInBody_optional&
          MassInBody () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MassInBody_optional&
          MassInBody ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MassInBody (const MassInBody_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MassInBody (const MassInBody_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MassInBody (::std::unique_ptr< MassInBody_type > p);

          //@}

          /**
           * @name MassInBlood
           *
           * @brief Accessor and modifier functions for the %MassInBlood
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MassInBlood_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MassInBlood_type > MassInBlood_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MassInBlood_type, char > MassInBlood_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MassInBlood_optional&
          MassInBlood () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MassInBlood_optional&
          MassInBlood ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MassInBlood (const MassInBlood_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MassInBlood (const MassInBlood_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MassInBlood (::std::unique_ptr< MassInBlood_type > p);

          //@}

          /**
           * @name MassInTissue
           *
           * @brief Accessor and modifier functions for the %MassInTissue
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData MassInTissue_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MassInTissue_type > MassInTissue_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MassInTissue_type, char > MassInTissue_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MassInTissue_optional&
          MassInTissue () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MassInTissue_optional&
          MassInTissue ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MassInTissue (const MassInTissue_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MassInTissue (const MassInTissue_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MassInTissue (::std::unique_ptr< MassInTissue_type > p);

          //@}

          /**
           * @name PlasmaConcentration
           *
           * @brief Accessor and modifier functions for the %PlasmaConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData PlasmaConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlasmaConcentration_type > PlasmaConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlasmaConcentration_type, char > PlasmaConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlasmaConcentration_optional&
          PlasmaConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlasmaConcentration_optional&
          PlasmaConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlasmaConcentration (const PlasmaConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlasmaConcentration (const PlasmaConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlasmaConcentration (::std::unique_ptr< PlasmaConcentration_type > p);

          //@}

          /**
           * @name SystemicMassCleared
           *
           * @brief Accessor and modifier functions for the %SystemicMassCleared
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData SystemicMassCleared_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SystemicMassCleared_type > SystemicMassCleared_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystemicMassCleared_type, char > SystemicMassCleared_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SystemicMassCleared_optional&
          SystemicMassCleared () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SystemicMassCleared_optional&
          SystemicMassCleared ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SystemicMassCleared (const SystemicMassCleared_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SystemicMassCleared (const SystemicMassCleared_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SystemicMassCleared (::std::unique_ptr< SystemicMassCleared_type > p);

          //@}

          /**
           * @name EffectSiteConcentration
           *
           * @brief Accessor and modifier functions for the %EffectSiteConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData EffectSiteConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EffectSiteConcentration_type > EffectSiteConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EffectSiteConcentration_type, char > EffectSiteConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EffectSiteConcentration_optional&
          EffectSiteConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EffectSiteConcentration_optional&
          EffectSiteConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EffectSiteConcentration (const EffectSiteConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EffectSiteConcentration (const EffectSiteConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EffectSiteConcentration (::std::unique_ptr< EffectSiteConcentration_type > p);

          //@}

          /**
           * @name TissueConcentration
           *
           * @brief Accessor and modifier functions for the %TissueConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TissueConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueConcentration_type > TissueConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueConcentration_type, char > TissueConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueConcentration_optional&
          TissueConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueConcentration_optional&
          TissueConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueConcentration (const TissueConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueConcentration (const TissueConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueConcentration (::std::unique_ptr< TissueConcentration_type > p);

          //@}

          /**
           * @name AlveolarTransfer
           *
           * @brief Accessor and modifier functions for the %AlveolarTransfer
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimeData AlveolarTransfer_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AlveolarTransfer_type > AlveolarTransfer_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlveolarTransfer_type, char > AlveolarTransfer_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AlveolarTransfer_optional&
          AlveolarTransfer () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AlveolarTransfer_optional&
          AlveolarTransfer ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AlveolarTransfer (const AlveolarTransfer_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AlveolarTransfer (const AlveolarTransfer_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AlveolarTransfer (::std::unique_ptr< AlveolarTransfer_type > p);

          //@}

          /**
           * @name DiffusingCapacity
           *
           * @brief Accessor and modifier functions for the %DiffusingCapacity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumePerTimePressureData DiffusingCapacity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DiffusingCapacity_type > DiffusingCapacity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DiffusingCapacity_type, char > DiffusingCapacity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DiffusingCapacity_optional&
          DiffusingCapacity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DiffusingCapacity_optional&
          DiffusingCapacity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          DiffusingCapacity (const DiffusingCapacity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          DiffusingCapacity (const DiffusingCapacity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          DiffusingCapacity (::std::unique_ptr< DiffusingCapacity_type > p);

          //@}

          /**
           * @name EndTidalFraction
           *
           * @brief Accessor and modifier functions for the %EndTidalFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData EndTidalFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EndTidalFraction_type > EndTidalFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EndTidalFraction_type, char > EndTidalFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EndTidalFraction_optional&
          EndTidalFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EndTidalFraction_optional&
          EndTidalFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EndTidalFraction (const EndTidalFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EndTidalFraction (const EndTidalFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EndTidalFraction (::std::unique_ptr< EndTidalFraction_type > p);

          //@}

          /**
           * @name EndTidalPressure
           *
           * @brief Accessor and modifier functions for the %EndTidalPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData EndTidalPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< EndTidalPressure_type > EndTidalPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EndTidalPressure_type, char > EndTidalPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const EndTidalPressure_optional&
          EndTidalPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          EndTidalPressure_optional&
          EndTidalPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EndTidalPressure (const EndTidalPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          EndTidalPressure (const EndTidalPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          EndTidalPressure (::std::unique_ptr< EndTidalPressure_type > p);

          //@}

          /**
           * @name RelativeDiffusionCoefficient
           *
           * @brief Accessor and modifier functions for the %RelativeDiffusionCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData RelativeDiffusionCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RelativeDiffusionCoefficient_type > RelativeDiffusionCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RelativeDiffusionCoefficient_type, char > RelativeDiffusionCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RelativeDiffusionCoefficient_optional&
          RelativeDiffusionCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RelativeDiffusionCoefficient_optional&
          RelativeDiffusionCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RelativeDiffusionCoefficient (const RelativeDiffusionCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RelativeDiffusionCoefficient (const RelativeDiffusionCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RelativeDiffusionCoefficient (::std::unique_ptr< RelativeDiffusionCoefficient_type > p);

          //@}

          /**
           * @name SolubilityCoefficient
           *
           * @brief Accessor and modifier functions for the %SolubilityCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarInversePressureData SolubilityCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SolubilityCoefficient_type > SolubilityCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SolubilityCoefficient_type, char > SolubilityCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SolubilityCoefficient_optional&
          SolubilityCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SolubilityCoefficient_optional&
          SolubilityCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          SolubilityCoefficient (const SolubilityCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          SolubilityCoefficient (const SolubilityCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          SolubilityCoefficient (::std::unique_ptr< SolubilityCoefficient_type > p);

          //@}

          /**
           * @name Clearance
           *
           * @brief Accessor and modifier functions for the %Clearance
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstanceClearanceData Clearance_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Clearance_type > Clearance_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Clearance_type, char > Clearance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Clearance_optional&
          Clearance () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Clearance_optional&
          Clearance ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Clearance (const Clearance_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Clearance (const Clearance_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Clearance (::std::unique_ptr< Clearance_type > p);

          //@}

          /**
           * @name Pharmacokinetics
           *
           * @brief Accessor and modifier functions for the %Pharmacokinetics
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstancePharmacokineticsData Pharmacokinetics_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Pharmacokinetics_type > Pharmacokinetics_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pharmacokinetics_type, char > Pharmacokinetics_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Pharmacokinetics_optional&
          Pharmacokinetics () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Pharmacokinetics_optional&
          Pharmacokinetics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Pharmacokinetics (const Pharmacokinetics_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Pharmacokinetics (const Pharmacokinetics_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Pharmacokinetics (::std::unique_ptr< Pharmacokinetics_type > p);

          //@}

          /**
           * @name Pharmacodynamics
           *
           * @brief Accessor and modifier functions for the %Pharmacodynamics
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::SubstancePharmacodynamicsData Pharmacodynamics_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Pharmacodynamics_type > Pharmacodynamics_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pharmacodynamics_type, char > Pharmacodynamics_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Pharmacodynamics_optional&
          Pharmacodynamics () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Pharmacodynamics_optional&
          Pharmacodynamics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Pharmacodynamics (const Pharmacodynamics_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Pharmacodynamics (const Pharmacodynamics_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Pharmacodynamics (::std::unique_ptr< Pharmacodynamics_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SubstanceData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SubstanceData (const Name_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SubstanceData (::std::unique_ptr< Name_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SubstanceData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceData (const SubstanceData& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SubstanceData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SubstanceData&
          operator= (const SubstanceData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SubstanceData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< Name_type > Name_;
          Classification_optional Classification_;
          Density_optional Density_;
          MolarMass_optional MolarMass_;
          State_optional State_;
          MaximumDiffusionFlux_optional MaximumDiffusionFlux_;
          MichaelisCoefficient_optional MichaelisCoefficient_;
          MembraneResistance_optional MembraneResistance_;
          Aerosolization_optional Aerosolization_;
          BloodConcentration_optional BloodConcentration_;
          MassInBody_optional MassInBody_;
          MassInBlood_optional MassInBlood_;
          MassInTissue_optional MassInTissue_;
          PlasmaConcentration_optional PlasmaConcentration_;
          SystemicMassCleared_optional SystemicMassCleared_;
          EffectSiteConcentration_optional EffectSiteConcentration_;
          TissueConcentration_optional TissueConcentration_;
          AlveolarTransfer_optional AlveolarTransfer_;
          DiffusingCapacity_optional DiffusingCapacity_;
          EndTidalFraction_optional EndTidalFraction_;
          EndTidalPressure_optional EndTidalPressure_;
          RelativeDiffusionCoefficient_optional RelativeDiffusionCoefficient_;
          SolubilityCoefficient_optional SolubilityCoefficient_;
          Clearance_optional Clearance_;
          Pharmacokinetics_optional Pharmacokinetics_;
          Pharmacodynamics_optional Pharmacodynamics_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const SubstanceData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const SubstanceData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SUBSTANCE_DATA_HXX

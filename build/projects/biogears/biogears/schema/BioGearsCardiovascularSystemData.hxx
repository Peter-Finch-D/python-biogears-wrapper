// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BioGearsCardiovascularSystemData.xsd.
 */

#ifndef BIO_GEARS_CARDIOVASCULAR_SYSTEM_DATA_HXX
#define BIO_GEARS_CARDIOVASCULAR_SYSTEM_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BioGearsCardiovascularSystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "CardiovascularSystemData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class RunningAverageData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BioGearsCardiovascularSystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BioGearsCardiovascularSystemData: public ::mil::tatrc::physiology::datamodel::CardiovascularSystemData
        {
          public:
          /**
           * @name StartSystole
           *
           * @brief Accessor and modifier functions for the %StartSystole
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean StartSystole_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StartSystole_type, char > StartSystole_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StartSystole_type&
          StartSystole () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StartSystole_type&
          StartSystole ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StartSystole (const StartSystole_type& x);

          //@}

          /**
           * @name HeartFlowDetected
           *
           * @brief Accessor and modifier functions for the %HeartFlowDetected
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean HeartFlowDetected_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeartFlowDetected_type, char > HeartFlowDetected_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HeartFlowDetected_type&
          HeartFlowDetected () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HeartFlowDetected_type&
          HeartFlowDetected ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HeartFlowDetected (const HeartFlowDetected_type& x);

          //@}

          /**
           * @name EnterCardiacArrest
           *
           * @brief Accessor and modifier functions for the %EnterCardiacArrest
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::boolean EnterCardiacArrest_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnterCardiacArrest_type, char > EnterCardiacArrest_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EnterCardiacArrest_type&
          EnterCardiacArrest () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EnterCardiacArrest_type&
          EnterCardiacArrest ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          EnterCardiacArrest (const EnterCardiacArrest_type& x);

          //@}

          /**
           * @name CardiacCyclePeriod_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePeriod_s_type&
          CardiacCyclePeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePeriod_s_type&
          CardiacCyclePeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePeriod_s (const CardiacCyclePeriod_s_type& x);

          //@}

          /**
           * @name CurrentCardiacCycleDuration_s
           *
           * @brief Accessor and modifier functions for the %CurrentCardiacCycleDuration_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CurrentCardiacCycleDuration_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CurrentCardiacCycleDuration_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CurrentCardiacCycleDuration_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CurrentCardiacCycleDuration_s_type&
          CurrentCardiacCycleDuration_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CurrentCardiacCycleDuration_s_type&
          CurrentCardiacCycleDuration_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CurrentCardiacCycleDuration_s (const CurrentCardiacCycleDuration_s_type& x);

          //@}

          /**
           * @name LeftHeartElastanceModifier
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceModifier
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceModifier_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceModifier_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceModifier_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceModifier_type&
          LeftHeartElastanceModifier () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceModifier_type&
          LeftHeartElastanceModifier ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceModifier (const LeftHeartElastanceModifier_type& x);

          //@}

          /**
           * @name LeftHeartElastance_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastance_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastance_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastance_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastance_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastance_mmHg_Per_mL_type&
          LeftHeartElastance_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastance_mmHg_Per_mL_type&
          LeftHeartElastance_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastance_mmHg_Per_mL (const LeftHeartElastance_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name LeftHeartElastanceMax_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMax_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceMax_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMax_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceMax_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceMax_mmHg_Per_mL_type&
          LeftHeartElastanceMax_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceMax_mmHg_Per_mL_type&
          LeftHeartElastanceMax_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMax_mmHg_Per_mL (const LeftHeartElastanceMax_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name LeftHeartElastanceMin_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %LeftHeartElastanceMin_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LeftHeartElastanceMin_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LeftHeartElastanceMin_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > LeftHeartElastanceMin_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LeftHeartElastanceMin_mmHg_Per_mL_type&
          LeftHeartElastanceMin_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LeftHeartElastanceMin_mmHg_Per_mL_type&
          LeftHeartElastanceMin_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LeftHeartElastanceMin_mmHg_Per_mL (const LeftHeartElastanceMin_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastance_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastance_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastance_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastance_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastance_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastance_mmHg_Per_mL_type&
          RightHeartElastance_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastance_mmHg_Per_mL_type&
          RightHeartElastance_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastance_mmHg_Per_mL (const RightHeartElastance_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastanceMax_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMax_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastanceMax_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMax_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastanceMax_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastanceMax_mmHg_Per_mL_type&
          RightHeartElastanceMax_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastanceMax_mmHg_Per_mL_type&
          RightHeartElastanceMax_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMax_mmHg_Per_mL (const RightHeartElastanceMax_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name RightHeartElastanceMin_mmHg_Per_mL
           *
           * @brief Accessor and modifier functions for the %RightHeartElastanceMin_mmHg_Per_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ RightHeartElastanceMin_mmHg_Per_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RightHeartElastanceMin_mmHg_Per_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > RightHeartElastanceMin_mmHg_Per_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RightHeartElastanceMin_mmHg_Per_mL_type&
          RightHeartElastanceMin_mmHg_Per_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RightHeartElastanceMin_mmHg_Per_mL_type&
          RightHeartElastanceMin_mmHg_Per_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RightHeartElastanceMin_mmHg_Per_mL (const RightHeartElastanceMin_mmHg_Per_mL_type& x);

          //@}

          /**
           * @name CompressionTime_s
           *
           * @brief Accessor and modifier functions for the %CompressionTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionTime_s_type&
          CompressionTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionTime_s_type&
          CompressionTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionTime_s (const CompressionTime_s_type& x);

          //@}

          /**
           * @name CompressionRatio
           *
           * @brief Accessor and modifier functions for the %CompressionRatio
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionRatio_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionRatio_type&
          CompressionRatio () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionRatio_type&
          CompressionRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionRatio (const CompressionRatio_type& x);

          //@}

          /**
           * @name CompressionPeriod_s
           *
           * @brief Accessor and modifier functions for the %CompressionPeriod_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CompressionPeriod_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CompressionPeriod_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CompressionPeriod_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CompressionPeriod_s_type&
          CompressionPeriod_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CompressionPeriod_s_type&
          CompressionPeriod_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CompressionPeriod_s (const CompressionPeriod_s_type& x);

          //@}

          /**
           * @name CurrentCardiacCycleTime_s
           *
           * @brief Accessor and modifier functions for the %CurrentCardiacCycleTime_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CurrentCardiacCycleTime_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CurrentCardiacCycleTime_s_type, char, ::xsd::cxx::tree::schema_type::double_ > CurrentCardiacCycleTime_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CurrentCardiacCycleTime_s_type&
          CurrentCardiacCycleTime_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CurrentCardiacCycleTime_s_type&
          CurrentCardiacCycleTime_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CurrentCardiacCycleTime_s (const CurrentCardiacCycleTime_s_type& x);

          //@}

          /**
           * @name CardiacCycleDiastolicVolume_mL
           *
           * @brief Accessor and modifier functions for the %CardiacCycleDiastolicVolume_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleDiastolicVolume_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleDiastolicVolume_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleDiastolicVolume_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleDiastolicVolume_mL_type&
          CardiacCycleDiastolicVolume_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleDiastolicVolume_mL_type&
          CardiacCycleDiastolicVolume_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleDiastolicVolume_mL (const CardiacCycleDiastolicVolume_mL_type& x);

          //@}

          /**
           * @name CardiacCycleAortaPressureLow_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleAortaPressureLow_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleAortaPressureLow_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleAortaPressureLow_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleAortaPressureLow_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleAortaPressureLow_mmHg_type&
          CardiacCycleAortaPressureLow_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleAortaPressureLow_mmHg_type&
          CardiacCycleAortaPressureLow_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleAortaPressureLow_mmHg (const CardiacCycleAortaPressureLow_mmHg_type& x);

          //@}

          /**
           * @name CardiacCycleAortaPressureHigh_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleAortaPressureHigh_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleAortaPressureHigh_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleAortaPressureHigh_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleAortaPressureHigh_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleAortaPressureHigh_mmHg_type&
          CardiacCycleAortaPressureHigh_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleAortaPressureHigh_mmHg_type&
          CardiacCycleAortaPressureHigh_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleAortaPressureHigh_mmHg (const CardiacCycleAortaPressureHigh_mmHg_type& x);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressureLow_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressureLow_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePulmonaryArteryPressureLow_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressureLow_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePulmonaryArteryPressureLow_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&
          CardiacCyclePulmonaryArteryPressureLow_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressureLow_mmHg_type&
          CardiacCyclePulmonaryArteryPressureLow_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressureLow_mmHg (const CardiacCyclePulmonaryArteryPressureLow_mmHg_type& x);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressureHigh_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressureHigh_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCyclePulmonaryArteryPressureHigh_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressureHigh_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCyclePulmonaryArteryPressureHigh_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&
          CardiacCyclePulmonaryArteryPressureHigh_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&
          CardiacCyclePulmonaryArteryPressureHigh_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressureHigh_mmHg (const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type& x);

          //@}

          /**
           * @name LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %LastCardiacCycleMeanArterialCO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type, char, ::xsd::cxx::tree::schema_type::double_ > LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          LastCardiacCycleMeanArterialCO2PartialPressure_mmHg (const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type& x);

          //@}

          /**
           * @name CardiacCycleStrokeVolume_mL
           *
           * @brief Accessor and modifier functions for the %CardiacCycleStrokeVolume_mL
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::xml_schema::double_ CardiacCycleStrokeVolume_mL_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleStrokeVolume_mL_type, char, ::xsd::cxx::tree::schema_type::double_ > CardiacCycleStrokeVolume_mL_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleStrokeVolume_mL_type&
          CardiacCycleStrokeVolume_mL () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleStrokeVolume_mL_type&
          CardiacCycleStrokeVolume_mL ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleStrokeVolume_mL (const CardiacCycleStrokeVolume_mL_type& x);

          //@}

          /**
           * @name CardiacCycleArterialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleArterialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleArterialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleArterialPressure_mmHg_type, char > CardiacCycleArterialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleArterialPressure_mmHg_type&
          CardiacCycleArterialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleArterialPressure_mmHg_type&
          CardiacCycleArterialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleArterialPressure_mmHg (const CardiacCycleArterialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleArterialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleArterialCO2PartialPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleArterialCO2PartialPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleArterialCO2PartialPressure_mmHg_type, char > CardiacCycleArterialCO2PartialPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleArterialCO2PartialPressure_mmHg_type&
          CardiacCycleArterialCO2PartialPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleArterialCO2PartialPressure_mmHg_type&
          CardiacCycleArterialCO2PartialPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleArterialCO2PartialPressure_mmHg (const CardiacCycleArterialCO2PartialPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleArterialCO2PartialPressure_mmHg (::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryCapillariesWedgePressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type, char > CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryCapillariesWedgePressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryCapillariesFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type, char > CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryCapillariesFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryShuntFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryShuntFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type, char > CardiacCyclePulmonaryShuntFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&
          CardiacCyclePulmonaryShuntFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&
          CardiacCyclePulmonaryShuntFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryShuntFlow_mL_Per_s (const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryShuntFlow_mL_Per_s (::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name CardiacCyclePulmonaryArteryPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCyclePulmonaryArteryPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCyclePulmonaryArteryPressure_mmHg_type, char > CardiacCyclePulmonaryArteryPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCyclePulmonaryArteryPressure_mmHg_type&
          CardiacCyclePulmonaryArteryPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCyclePulmonaryArteryPressure_mmHg_type&
          CardiacCyclePulmonaryArteryPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCyclePulmonaryArteryPressure_mmHg (const CardiacCyclePulmonaryArteryPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCyclePulmonaryArteryPressure_mmHg (::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleCentralVenousPressure_mmHg
           *
           * @brief Accessor and modifier functions for the %CardiacCycleCentralVenousPressure_mmHg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleCentralVenousPressure_mmHg_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleCentralVenousPressure_mmHg_type, char > CardiacCycleCentralVenousPressure_mmHg_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleCentralVenousPressure_mmHg_type&
          CardiacCycleCentralVenousPressure_mmHg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleCentralVenousPressure_mmHg_type&
          CardiacCycleCentralVenousPressure_mmHg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleCentralVenousPressure_mmHg (const CardiacCycleCentralVenousPressure_mmHg_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleCentralVenousPressure_mmHg (::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type > p);

          //@}

          /**
           * @name CardiacCycleSkinFlow_mL_Per_s
           *
           * @brief Accessor and modifier functions for the %CardiacCycleSkinFlow_mL_Per_s
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::RunningAverageData CardiacCycleSkinFlow_mL_Per_s_type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardiacCycleSkinFlow_mL_Per_s_type, char > CardiacCycleSkinFlow_mL_Per_s_traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardiacCycleSkinFlow_mL_Per_s_type&
          CardiacCycleSkinFlow_mL_Per_s () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardiacCycleSkinFlow_mL_Per_s_type&
          CardiacCycleSkinFlow_mL_Per_s ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CardiacCycleSkinFlow_mL_Per_s (const CardiacCycleSkinFlow_mL_Per_s_type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          CardiacCycleSkinFlow_mL_Per_s (::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BioGearsCardiovascularSystemData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BioGearsCardiovascularSystemData (const StartSystole_type&,
                                            const HeartFlowDetected_type&,
                                            const EnterCardiacArrest_type&,
                                            const CardiacCyclePeriod_s_type&,
                                            const CurrentCardiacCycleDuration_s_type&,
                                            const LeftHeartElastanceModifier_type&,
                                            const LeftHeartElastance_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMax_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMin_mmHg_Per_mL_type&,
                                            const RightHeartElastance_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMax_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMin_mmHg_Per_mL_type&,
                                            const CompressionTime_s_type&,
                                            const CompressionRatio_type&,
                                            const CompressionPeriod_s_type&,
                                            const CurrentCardiacCycleTime_s_type&,
                                            const CardiacCycleDiastolicVolume_mL_type&,
                                            const CardiacCycleAortaPressureLow_mmHg_type&,
                                            const CardiacCycleAortaPressureHigh_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&,
                                            const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCycleStrokeVolume_mL_type&,
                                            const CardiacCycleArterialPressure_mmHg_type&,
                                            const CardiacCycleArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type&,
                                            const CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type&,
                                            const CardiacCyclePulmonaryShuntFlow_mL_Per_s_type&,
                                            const CardiacCyclePulmonaryArteryPressure_mmHg_type&,
                                            const CardiacCycleCentralVenousPressure_mmHg_type&,
                                            const CardiacCycleSkinFlow_mL_Per_s_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          BioGearsCardiovascularSystemData (const StartSystole_type&,
                                            const HeartFlowDetected_type&,
                                            const EnterCardiacArrest_type&,
                                            const CardiacCyclePeriod_s_type&,
                                            const CurrentCardiacCycleDuration_s_type&,
                                            const LeftHeartElastanceModifier_type&,
                                            const LeftHeartElastance_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMax_mmHg_Per_mL_type&,
                                            const LeftHeartElastanceMin_mmHg_Per_mL_type&,
                                            const RightHeartElastance_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMax_mmHg_Per_mL_type&,
                                            const RightHeartElastanceMin_mmHg_Per_mL_type&,
                                            const CompressionTime_s_type&,
                                            const CompressionRatio_type&,
                                            const CompressionPeriod_s_type&,
                                            const CurrentCardiacCycleTime_s_type&,
                                            const CardiacCycleDiastolicVolume_mL_type&,
                                            const CardiacCycleAortaPressureLow_mmHg_type&,
                                            const CardiacCycleAortaPressureHigh_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureLow_mmHg_type&,
                                            const CardiacCyclePulmonaryArteryPressureHigh_mmHg_type&,
                                            const LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type&,
                                            const CardiacCycleStrokeVolume_mL_type&,
                                            ::std::unique_ptr< CardiacCycleArterialPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleArterialCO2PartialPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type >,
                                            ::std::unique_ptr< CardiacCyclePulmonaryArteryPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleCentralVenousPressure_mmHg_type >,
                                            ::std::unique_ptr< CardiacCycleSkinFlow_mL_Per_s_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BioGearsCardiovascularSystemData (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsCardiovascularSystemData (const BioGearsCardiovascularSystemData& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BioGearsCardiovascularSystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BioGearsCardiovascularSystemData&
          operator= (const BioGearsCardiovascularSystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BioGearsCardiovascularSystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          ::xsd::cxx::tree::one< StartSystole_type > StartSystole_;
          ::xsd::cxx::tree::one< HeartFlowDetected_type > HeartFlowDetected_;
          ::xsd::cxx::tree::one< EnterCardiacArrest_type > EnterCardiacArrest_;
          ::xsd::cxx::tree::one< CardiacCyclePeriod_s_type > CardiacCyclePeriod_s_;
          ::xsd::cxx::tree::one< CurrentCardiacCycleDuration_s_type > CurrentCardiacCycleDuration_s_;
          ::xsd::cxx::tree::one< LeftHeartElastanceModifier_type > LeftHeartElastanceModifier_;
          ::xsd::cxx::tree::one< LeftHeartElastance_mmHg_Per_mL_type > LeftHeartElastance_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< LeftHeartElastanceMax_mmHg_Per_mL_type > LeftHeartElastanceMax_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< LeftHeartElastanceMin_mmHg_Per_mL_type > LeftHeartElastanceMin_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastance_mmHg_Per_mL_type > RightHeartElastance_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastanceMax_mmHg_Per_mL_type > RightHeartElastanceMax_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< RightHeartElastanceMin_mmHg_Per_mL_type > RightHeartElastanceMin_mmHg_Per_mL_;
          ::xsd::cxx::tree::one< CompressionTime_s_type > CompressionTime_s_;
          ::xsd::cxx::tree::one< CompressionRatio_type > CompressionRatio_;
          ::xsd::cxx::tree::one< CompressionPeriod_s_type > CompressionPeriod_s_;
          ::xsd::cxx::tree::one< CurrentCardiacCycleTime_s_type > CurrentCardiacCycleTime_s_;
          ::xsd::cxx::tree::one< CardiacCycleDiastolicVolume_mL_type > CardiacCycleDiastolicVolume_mL_;
          ::xsd::cxx::tree::one< CardiacCycleAortaPressureLow_mmHg_type > CardiacCycleAortaPressureLow_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleAortaPressureHigh_mmHg_type > CardiacCycleAortaPressureHigh_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressureLow_mmHg_type > CardiacCyclePulmonaryArteryPressureLow_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressureHigh_mmHg_type > CardiacCyclePulmonaryArteryPressureHigh_mmHg_;
          ::xsd::cxx::tree::one< LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_type > LastCardiacCycleMeanArterialCO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleStrokeVolume_mL_type > CardiacCycleStrokeVolume_mL_;
          ::xsd::cxx::tree::one< CardiacCycleArterialPressure_mmHg_type > CardiacCycleArterialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleArterialCO2PartialPressure_mmHg_type > CardiacCycleArterialCO2PartialPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_type > CardiacCyclePulmonaryCapillariesWedgePressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_type > CardiacCyclePulmonaryCapillariesFlow_mL_Per_s_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryShuntFlow_mL_Per_s_type > CardiacCyclePulmonaryShuntFlow_mL_Per_s_;
          ::xsd::cxx::tree::one< CardiacCyclePulmonaryArteryPressure_mmHg_type > CardiacCyclePulmonaryArteryPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleCentralVenousPressure_mmHg_type > CardiacCycleCentralVenousPressure_mmHg_;
          ::xsd::cxx::tree::one< CardiacCycleSkinFlow_mL_Per_s_type > CardiacCycleSkinFlow_mL_Per_s_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BioGearsCardiovascularSystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BioGearsCardiovascularSystemData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BIO_GEARS_CARDIOVASCULAR_SYSTEM_DATA_HXX

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CompleteBloodCountData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarAmountPerVolumeData.hxx"

#include "ScalarMassPerAmountData.hxx"

#include "ScalarVolumeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CompleteBloodCountData
        // 

        const CompleteBloodCountData::Hematocrit_optional& CompleteBloodCountData::
        Hematocrit () const
        {
          return this->Hematocrit_;
        }

        CompleteBloodCountData::Hematocrit_optional& CompleteBloodCountData::
        Hematocrit ()
        {
          return this->Hematocrit_;
        }

        void CompleteBloodCountData::
        Hematocrit (const Hematocrit_type& x)
        {
          this->Hematocrit_.set (x);
        }

        void CompleteBloodCountData::
        Hematocrit (const Hematocrit_optional& x)
        {
          this->Hematocrit_ = x;
        }

        void CompleteBloodCountData::
        Hematocrit (::std::unique_ptr< Hematocrit_type > x)
        {
          this->Hematocrit_.set (std::move (x));
        }

        const CompleteBloodCountData::Hemoglobin_optional& CompleteBloodCountData::
        Hemoglobin () const
        {
          return this->Hemoglobin_;
        }

        CompleteBloodCountData::Hemoglobin_optional& CompleteBloodCountData::
        Hemoglobin ()
        {
          return this->Hemoglobin_;
        }

        void CompleteBloodCountData::
        Hemoglobin (const Hemoglobin_type& x)
        {
          this->Hemoglobin_.set (x);
        }

        void CompleteBloodCountData::
        Hemoglobin (const Hemoglobin_optional& x)
        {
          this->Hemoglobin_ = x;
        }

        void CompleteBloodCountData::
        Hemoglobin (::std::unique_ptr< Hemoglobin_type > x)
        {
          this->Hemoglobin_.set (std::move (x));
        }

        const CompleteBloodCountData::PlateletCount_optional& CompleteBloodCountData::
        PlateletCount () const
        {
          return this->PlateletCount_;
        }

        CompleteBloodCountData::PlateletCount_optional& CompleteBloodCountData::
        PlateletCount ()
        {
          return this->PlateletCount_;
        }

        void CompleteBloodCountData::
        PlateletCount (const PlateletCount_type& x)
        {
          this->PlateletCount_.set (x);
        }

        void CompleteBloodCountData::
        PlateletCount (const PlateletCount_optional& x)
        {
          this->PlateletCount_ = x;
        }

        void CompleteBloodCountData::
        PlateletCount (::std::unique_ptr< PlateletCount_type > x)
        {
          this->PlateletCount_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularHemoglobin_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobin () const
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        CompleteBloodCountData::MeanCorpuscularHemoglobin_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobin ()
        {
          return this->MeanCorpuscularHemoglobin_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_type& x)
        {
          this->MeanCorpuscularHemoglobin_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (const MeanCorpuscularHemoglobin_optional& x)
        {
          this->MeanCorpuscularHemoglobin_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobin (::std::unique_ptr< MeanCorpuscularHemoglobin_type > x)
        {
          this->MeanCorpuscularHemoglobin_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration () const
        {
          return this->MeanCorpuscularHemoglobinConcentration_;
        }

        CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_optional& CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration ()
        {
          return this->MeanCorpuscularHemoglobinConcentration_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_type& x)
        {
          this->MeanCorpuscularHemoglobinConcentration_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (const MeanCorpuscularHemoglobinConcentration_optional& x)
        {
          this->MeanCorpuscularHemoglobinConcentration_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularHemoglobinConcentration (::std::unique_ptr< MeanCorpuscularHemoglobinConcentration_type > x)
        {
          this->MeanCorpuscularHemoglobinConcentration_.set (std::move (x));
        }

        const CompleteBloodCountData::MeanCorpuscularVolume_optional& CompleteBloodCountData::
        MeanCorpuscularVolume () const
        {
          return this->MeanCorpuscularVolume_;
        }

        CompleteBloodCountData::MeanCorpuscularVolume_optional& CompleteBloodCountData::
        MeanCorpuscularVolume ()
        {
          return this->MeanCorpuscularVolume_;
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_type& x)
        {
          this->MeanCorpuscularVolume_.set (x);
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (const MeanCorpuscularVolume_optional& x)
        {
          this->MeanCorpuscularVolume_ = x;
        }

        void CompleteBloodCountData::
        MeanCorpuscularVolume (::std::unique_ptr< MeanCorpuscularVolume_type > x)
        {
          this->MeanCorpuscularVolume_.set (std::move (x));
        }

        const CompleteBloodCountData::RedBloodCellCount_optional& CompleteBloodCountData::
        RedBloodCellCount () const
        {
          return this->RedBloodCellCount_;
        }

        CompleteBloodCountData::RedBloodCellCount_optional& CompleteBloodCountData::
        RedBloodCellCount ()
        {
          return this->RedBloodCellCount_;
        }

        void CompleteBloodCountData::
        RedBloodCellCount (const RedBloodCellCount_type& x)
        {
          this->RedBloodCellCount_.set (x);
        }

        void CompleteBloodCountData::
        RedBloodCellCount (const RedBloodCellCount_optional& x)
        {
          this->RedBloodCellCount_ = x;
        }

        void CompleteBloodCountData::
        RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > x)
        {
          this->RedBloodCellCount_.set (std::move (x));
        }

        const CompleteBloodCountData::WhiteBloodCellCount_optional& CompleteBloodCountData::
        WhiteBloodCellCount () const
        {
          return this->WhiteBloodCellCount_;
        }

        CompleteBloodCountData::WhiteBloodCellCount_optional& CompleteBloodCountData::
        WhiteBloodCellCount ()
        {
          return this->WhiteBloodCellCount_;
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (const WhiteBloodCellCount_type& x)
        {
          this->WhiteBloodCellCount_.set (x);
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (const WhiteBloodCellCount_optional& x)
        {
          this->WhiteBloodCellCount_ = x;
        }

        void CompleteBloodCountData::
        WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > x)
        {
          this->WhiteBloodCellCount_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CompleteBloodCountData
        //

        CompleteBloodCountData::
        CompleteBloodCountData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          Hematocrit_ (this),
          Hemoglobin_ (this),
          PlateletCount_ (this),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularHemoglobinConcentration_ (this),
          MeanCorpuscularVolume_ (this),
          RedBloodCellCount_ (this),
          WhiteBloodCellCount_ (this)
        {
        }

        CompleteBloodCountData::
        CompleteBloodCountData (const CompleteBloodCountData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          Hematocrit_ (x.Hematocrit_, f, this),
          Hemoglobin_ (x.Hemoglobin_, f, this),
          PlateletCount_ (x.PlateletCount_, f, this),
          MeanCorpuscularHemoglobin_ (x.MeanCorpuscularHemoglobin_, f, this),
          MeanCorpuscularHemoglobinConcentration_ (x.MeanCorpuscularHemoglobinConcentration_, f, this),
          MeanCorpuscularVolume_ (x.MeanCorpuscularVolume_, f, this),
          RedBloodCellCount_ (x.RedBloodCellCount_, f, this),
          WhiteBloodCellCount_ (x.WhiteBloodCellCount_, f, this)
        {
        }

        CompleteBloodCountData::
        CompleteBloodCountData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          Hematocrit_ (this),
          Hemoglobin_ (this),
          PlateletCount_ (this),
          MeanCorpuscularHemoglobin_ (this),
          MeanCorpuscularHemoglobinConcentration_ (this),
          MeanCorpuscularVolume_ (this),
          RedBloodCellCount_ (this),
          WhiteBloodCellCount_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompleteBloodCountData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Hematocrit
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Hematocrit_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Hematocrit_)
                {
                  ::std::unique_ptr< Hematocrit_type > r (
                    dynamic_cast< Hematocrit_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Hematocrit_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Hemoglobin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Hemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Hemoglobin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Hemoglobin_)
                {
                  ::std::unique_ptr< Hemoglobin_type > r (
                    dynamic_cast< Hemoglobin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Hemoglobin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PlateletCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PlateletCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PlateletCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PlateletCount_)
                {
                  ::std::unique_ptr< PlateletCount_type > r (
                    dynamic_cast< PlateletCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PlateletCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularHemoglobin
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularHemoglobin_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularHemoglobin_)
                {
                  ::std::unique_ptr< MeanCorpuscularHemoglobin_type > r (
                    dynamic_cast< MeanCorpuscularHemoglobin_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularHemoglobin_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularHemoglobinConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularHemoglobinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularHemoglobinConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularHemoglobinConcentration_)
                {
                  ::std::unique_ptr< MeanCorpuscularHemoglobinConcentration_type > r (
                    dynamic_cast< MeanCorpuscularHemoglobinConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularHemoglobinConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCorpuscularVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCorpuscularVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCorpuscularVolume_)
                {
                  ::std::unique_ptr< MeanCorpuscularVolume_type > r (
                    dynamic_cast< MeanCorpuscularVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCorpuscularVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCellCount_)
                {
                  ::std::unique_ptr< RedBloodCellCount_type > r (
                    dynamic_cast< RedBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCellCount
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCellCount_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCellCount_)
                {
                  ::std::unique_ptr< WhiteBloodCellCount_type > r (
                    dynamic_cast< WhiteBloodCellCount_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCellCount_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CompleteBloodCountData* CompleteBloodCountData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompleteBloodCountData (*this, f, c);
        }

        CompleteBloodCountData& CompleteBloodCountData::
        operator= (const CompleteBloodCountData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->Hematocrit_ = x.Hematocrit_;
            this->Hemoglobin_ = x.Hemoglobin_;
            this->PlateletCount_ = x.PlateletCount_;
            this->MeanCorpuscularHemoglobin_ = x.MeanCorpuscularHemoglobin_;
            this->MeanCorpuscularHemoglobinConcentration_ = x.MeanCorpuscularHemoglobinConcentration_;
            this->MeanCorpuscularVolume_ = x.MeanCorpuscularVolume_;
            this->RedBloodCellCount_ = x.RedBloodCellCount_;
            this->WhiteBloodCellCount_ = x.WhiteBloodCellCount_;
          }

          return *this;
        }

        CompleteBloodCountData::
        ~CompleteBloodCountData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_type_factory_init (
          "CompleteBloodCountData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CompleteBloodCountData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              o << ::std::endl << "Hematocrit: ";
              om.insert (o, *i.Hematocrit ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Hemoglobin ())
            {
              o << ::std::endl << "Hemoglobin: ";
              om.insert (o, *i.Hemoglobin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PlateletCount ())
            {
              o << ::std::endl << "PlateletCount: ";
              om.insert (o, *i.PlateletCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              o << ::std::endl << "MeanCorpuscularHemoglobin: ";
              om.insert (o, *i.MeanCorpuscularHemoglobin ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobinConcentration ())
            {
              o << ::std::endl << "MeanCorpuscularHemoglobinConcentration: ";
              om.insert (o, *i.MeanCorpuscularHemoglobinConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              o << ::std::endl << "MeanCorpuscularVolume: ";
              om.insert (o, *i.MeanCorpuscularVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              o << ::std::endl << "RedBloodCellCount: ";
              om.insert (o, *i.RedBloodCellCount ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              o << ::std::endl << "WhiteBloodCellCount: ";
              om.insert (o, *i.WhiteBloodCellCount ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CompleteBloodCountData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // Hematocrit
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Hematocrit ())
            {
              const CompleteBloodCountData::Hematocrit_type& x (*i.Hematocrit ());
              if (typeid (CompleteBloodCountData::Hematocrit_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Hematocrit",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Hematocrit",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Hemoglobin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Hemoglobin ())
            {
              const CompleteBloodCountData::Hemoglobin_type& x (*i.Hemoglobin ());
              if (typeid (CompleteBloodCountData::Hemoglobin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Hemoglobin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Hemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PlateletCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PlateletCount ())
            {
              const CompleteBloodCountData::PlateletCount_type& x (*i.PlateletCount ());
              if (typeid (CompleteBloodCountData::PlateletCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PlateletCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PlateletCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularHemoglobin
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobin ())
            {
              const CompleteBloodCountData::MeanCorpuscularHemoglobin_type& x (*i.MeanCorpuscularHemoglobin ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularHemoglobin_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularHemoglobin",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularHemoglobin",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularHemoglobinConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularHemoglobinConcentration ())
            {
              const CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_type& x (*i.MeanCorpuscularHemoglobinConcentration ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularHemoglobinConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularHemoglobinConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularHemoglobinConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCorpuscularVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCorpuscularVolume ())
            {
              const CompleteBloodCountData::MeanCorpuscularVolume_type& x (*i.MeanCorpuscularVolume ());
              if (typeid (CompleteBloodCountData::MeanCorpuscularVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCorpuscularVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCorpuscularVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RedBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCellCount ())
            {
              const CompleteBloodCountData::RedBloodCellCount_type& x (*i.RedBloodCellCount ());
              if (typeid (CompleteBloodCountData::RedBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCellCount
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCellCount ())
            {
              const CompleteBloodCountData::WhiteBloodCellCount_type& x (*i.WhiteBloodCellCount ());
              if (typeid (CompleteBloodCountData::WhiteBloodCellCount_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCellCount",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCellCount",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompleteBloodCountData >
        _xsd_CompleteBloodCountData_type_serializer_init (
          "CompleteBloodCountData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


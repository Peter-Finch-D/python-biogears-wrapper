// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Systemic.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarVolumePerTimeMassData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // Systemic
        // 

        const Systemic::FractionExcretedInFeces_type& Systemic::
        FractionExcretedInFeces () const
        {
          return this->FractionExcretedInFeces_.get ();
        }

        Systemic::FractionExcretedInFeces_type& Systemic::
        FractionExcretedInFeces ()
        {
          return this->FractionExcretedInFeces_.get ();
        }

        void Systemic::
        FractionExcretedInFeces (const FractionExcretedInFeces_type& x)
        {
          this->FractionExcretedInFeces_.set (x);
        }

        void Systemic::
        FractionExcretedInFeces (::std::unique_ptr< FractionExcretedInFeces_type > x)
        {
          this->FractionExcretedInFeces_.set (std::move (x));
        }

        const Systemic::FractionExcretedInUrine_optional& Systemic::
        FractionExcretedInUrine () const
        {
          return this->FractionExcretedInUrine_;
        }

        Systemic::FractionExcretedInUrine_optional& Systemic::
        FractionExcretedInUrine ()
        {
          return this->FractionExcretedInUrine_;
        }

        void Systemic::
        FractionExcretedInUrine (const FractionExcretedInUrine_type& x)
        {
          this->FractionExcretedInUrine_.set (x);
        }

        void Systemic::
        FractionExcretedInUrine (const FractionExcretedInUrine_optional& x)
        {
          this->FractionExcretedInUrine_ = x;
        }

        void Systemic::
        FractionExcretedInUrine (::std::unique_ptr< FractionExcretedInUrine_type > x)
        {
          this->FractionExcretedInUrine_.set (std::move (x));
        }

        const Systemic::FractionMetabolizedInGut_optional& Systemic::
        FractionMetabolizedInGut () const
        {
          return this->FractionMetabolizedInGut_;
        }

        Systemic::FractionMetabolizedInGut_optional& Systemic::
        FractionMetabolizedInGut ()
        {
          return this->FractionMetabolizedInGut_;
        }

        void Systemic::
        FractionMetabolizedInGut (const FractionMetabolizedInGut_type& x)
        {
          this->FractionMetabolizedInGut_.set (x);
        }

        void Systemic::
        FractionMetabolizedInGut (const FractionMetabolizedInGut_optional& x)
        {
          this->FractionMetabolizedInGut_ = x;
        }

        void Systemic::
        FractionMetabolizedInGut (::std::unique_ptr< FractionMetabolizedInGut_type > x)
        {
          this->FractionMetabolizedInGut_.set (std::move (x));
        }

        const Systemic::FractionUnboundInPlasma_type& Systemic::
        FractionUnboundInPlasma () const
        {
          return this->FractionUnboundInPlasma_.get ();
        }

        Systemic::FractionUnboundInPlasma_type& Systemic::
        FractionUnboundInPlasma ()
        {
          return this->FractionUnboundInPlasma_.get ();
        }

        void Systemic::
        FractionUnboundInPlasma (const FractionUnboundInPlasma_type& x)
        {
          this->FractionUnboundInPlasma_.set (x);
        }

        void Systemic::
        FractionUnboundInPlasma (::std::unique_ptr< FractionUnboundInPlasma_type > x)
        {
          this->FractionUnboundInPlasma_.set (std::move (x));
        }

        const Systemic::IntrinsicClearance_type& Systemic::
        IntrinsicClearance () const
        {
          return this->IntrinsicClearance_.get ();
        }

        Systemic::IntrinsicClearance_type& Systemic::
        IntrinsicClearance ()
        {
          return this->IntrinsicClearance_.get ();
        }

        void Systemic::
        IntrinsicClearance (const IntrinsicClearance_type& x)
        {
          this->IntrinsicClearance_.set (x);
        }

        void Systemic::
        IntrinsicClearance (::std::unique_ptr< IntrinsicClearance_type > x)
        {
          this->IntrinsicClearance_.set (std::move (x));
        }

        const Systemic::RenalClearance_type& Systemic::
        RenalClearance () const
        {
          return this->RenalClearance_.get ();
        }

        Systemic::RenalClearance_type& Systemic::
        RenalClearance ()
        {
          return this->RenalClearance_.get ();
        }

        void Systemic::
        RenalClearance (const RenalClearance_type& x)
        {
          this->RenalClearance_.set (x);
        }

        void Systemic::
        RenalClearance (::std::unique_ptr< RenalClearance_type > x)
        {
          this->RenalClearance_.set (std::move (x));
        }

        const Systemic::SystemicClearance_type& Systemic::
        SystemicClearance () const
        {
          return this->SystemicClearance_.get ();
        }

        Systemic::SystemicClearance_type& Systemic::
        SystemicClearance ()
        {
          return this->SystemicClearance_.get ();
        }

        void Systemic::
        SystemicClearance (const SystemicClearance_type& x)
        {
          this->SystemicClearance_.set (x);
        }

        void Systemic::
        SystemicClearance (::std::unique_ptr< SystemicClearance_type > x)
        {
          this->SystemicClearance_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // Systemic
        //

        Systemic::
        Systemic ()
        : ::xml_schema::type (),
          FractionExcretedInFeces_ (this),
          FractionExcretedInUrine_ (this),
          FractionMetabolizedInGut_ (this),
          FractionUnboundInPlasma_ (this),
          IntrinsicClearance_ (this),
          RenalClearance_ (this),
          SystemicClearance_ (this)
        {
        }

        Systemic::
        Systemic (const FractionExcretedInFeces_type& FractionExcretedInFeces,
                  const FractionUnboundInPlasma_type& FractionUnboundInPlasma,
                  const IntrinsicClearance_type& IntrinsicClearance,
                  const RenalClearance_type& RenalClearance,
                  const SystemicClearance_type& SystemicClearance)
        : ::xml_schema::type (),
          FractionExcretedInFeces_ (FractionExcretedInFeces, this),
          FractionExcretedInUrine_ (this),
          FractionMetabolizedInGut_ (this),
          FractionUnboundInPlasma_ (FractionUnboundInPlasma, this),
          IntrinsicClearance_ (IntrinsicClearance, this),
          RenalClearance_ (RenalClearance, this),
          SystemicClearance_ (SystemicClearance, this)
        {
        }

        Systemic::
        Systemic (::std::unique_ptr< FractionExcretedInFeces_type > FractionExcretedInFeces,
                  ::std::unique_ptr< FractionUnboundInPlasma_type > FractionUnboundInPlasma,
                  ::std::unique_ptr< IntrinsicClearance_type > IntrinsicClearance,
                  ::std::unique_ptr< RenalClearance_type > RenalClearance,
                  ::std::unique_ptr< SystemicClearance_type > SystemicClearance)
        : ::xml_schema::type (),
          FractionExcretedInFeces_ (std::move (FractionExcretedInFeces), this),
          FractionExcretedInUrine_ (this),
          FractionMetabolizedInGut_ (this),
          FractionUnboundInPlasma_ (std::move (FractionUnboundInPlasma), this),
          IntrinsicClearance_ (std::move (IntrinsicClearance), this),
          RenalClearance_ (std::move (RenalClearance), this),
          SystemicClearance_ (std::move (SystemicClearance), this)
        {
        }

        Systemic::
        Systemic (const Systemic& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          FractionExcretedInFeces_ (x.FractionExcretedInFeces_, f, this),
          FractionExcretedInUrine_ (x.FractionExcretedInUrine_, f, this),
          FractionMetabolizedInGut_ (x.FractionMetabolizedInGut_, f, this),
          FractionUnboundInPlasma_ (x.FractionUnboundInPlasma_, f, this),
          IntrinsicClearance_ (x.IntrinsicClearance_, f, this),
          RenalClearance_ (x.RenalClearance_, f, this),
          SystemicClearance_ (x.SystemicClearance_, f, this)
        {
        }

        Systemic::
        Systemic (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          FractionExcretedInFeces_ (this),
          FractionExcretedInUrine_ (this),
          FractionMetabolizedInGut_ (this),
          FractionUnboundInPlasma_ (this),
          IntrinsicClearance_ (this),
          RenalClearance_ (this),
          SystemicClearance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void Systemic::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // FractionExcretedInFeces
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FractionExcretedInFeces",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FractionExcretedInFeces_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FractionExcretedInFeces_.present ())
                {
                  ::std::unique_ptr< FractionExcretedInFeces_type > r (
                    dynamic_cast< FractionExcretedInFeces_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FractionExcretedInFeces_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FractionExcretedInUrine
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FractionExcretedInUrine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FractionExcretedInUrine_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FractionExcretedInUrine_)
                {
                  ::std::unique_ptr< FractionExcretedInUrine_type > r (
                    dynamic_cast< FractionExcretedInUrine_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FractionExcretedInUrine_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FractionMetabolizedInGut
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FractionMetabolizedInGut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FractionMetabolizedInGut_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FractionMetabolizedInGut_)
                {
                  ::std::unique_ptr< FractionMetabolizedInGut_type > r (
                    dynamic_cast< FractionMetabolizedInGut_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FractionMetabolizedInGut_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FractionUnboundInPlasma
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FractionUnboundInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FractionUnboundInPlasma_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FractionUnboundInPlasma_.present ())
                {
                  ::std::unique_ptr< FractionUnboundInPlasma_type > r (
                    dynamic_cast< FractionUnboundInPlasma_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FractionUnboundInPlasma_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntrinsicClearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntrinsicClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntrinsicClearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!IntrinsicClearance_.present ())
                {
                  ::std::unique_ptr< IntrinsicClearance_type > r (
                    dynamic_cast< IntrinsicClearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntrinsicClearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RenalClearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RenalClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RenalClearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RenalClearance_.present ())
                {
                  ::std::unique_ptr< RenalClearance_type > r (
                    dynamic_cast< RenalClearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RenalClearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystemicClearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystemicClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystemicClearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!SystemicClearance_.present ())
                {
                  ::std::unique_ptr< SystemicClearance_type > r (
                    dynamic_cast< SystemicClearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystemicClearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!FractionExcretedInFeces_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FractionExcretedInFeces",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FractionUnboundInPlasma_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FractionUnboundInPlasma",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!IntrinsicClearance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IntrinsicClearance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!RenalClearance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RenalClearance",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!SystemicClearance_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SystemicClearance",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        Systemic* Systemic::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class Systemic (*this, f, c);
        }

        Systemic& Systemic::
        operator= (const Systemic& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->FractionExcretedInFeces_ = x.FractionExcretedInFeces_;
            this->FractionExcretedInUrine_ = x.FractionExcretedInUrine_;
            this->FractionMetabolizedInGut_ = x.FractionMetabolizedInGut_;
            this->FractionUnboundInPlasma_ = x.FractionUnboundInPlasma_;
            this->IntrinsicClearance_ = x.IntrinsicClearance_;
            this->RenalClearance_ = x.RenalClearance_;
            this->SystemicClearance_ = x.SystemicClearance_;
          }

          return *this;
        }

        Systemic::
        ~Systemic ()
        {
        }
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const Systemic& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FractionExcretedInFeces: ";
            om.insert (o, i.FractionExcretedInFeces ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FractionExcretedInUrine ())
            {
              o << ::std::endl << "FractionExcretedInUrine: ";
              om.insert (o, *i.FractionExcretedInUrine ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FractionMetabolizedInGut ())
            {
              o << ::std::endl << "FractionMetabolizedInGut: ";
              om.insert (o, *i.FractionMetabolizedInGut ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FractionUnboundInPlasma: ";
            om.insert (o, i.FractionUnboundInPlasma ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "IntrinsicClearance: ";
            om.insert (o, i.IntrinsicClearance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RenalClearance: ";
            om.insert (o, i.RenalClearance ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "SystemicClearance: ";
            om.insert (o, i.SystemicClearance ());
          }

          return o;
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const Systemic& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // FractionExcretedInFeces
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const Systemic::FractionExcretedInFeces_type& x (i.FractionExcretedInFeces ());
            if (typeid (Systemic::FractionExcretedInFeces_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FractionExcretedInFeces",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FractionExcretedInFeces",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FractionExcretedInUrine
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FractionExcretedInUrine ())
            {
              const Systemic::FractionExcretedInUrine_type& x (*i.FractionExcretedInUrine ());
              if (typeid (Systemic::FractionExcretedInUrine_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FractionExcretedInUrine",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FractionExcretedInUrine",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FractionMetabolizedInGut
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FractionMetabolizedInGut ())
            {
              const Systemic::FractionMetabolizedInGut_type& x (*i.FractionMetabolizedInGut ());
              if (typeid (Systemic::FractionMetabolizedInGut_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FractionMetabolizedInGut",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FractionMetabolizedInGut",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FractionUnboundInPlasma
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const Systemic::FractionUnboundInPlasma_type& x (i.FractionUnboundInPlasma ());
            if (typeid (Systemic::FractionUnboundInPlasma_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FractionUnboundInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FractionUnboundInPlasma",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // IntrinsicClearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const Systemic::IntrinsicClearance_type& x (i.IntrinsicClearance ());
            if (typeid (Systemic::IntrinsicClearance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "IntrinsicClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "IntrinsicClearance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RenalClearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const Systemic::RenalClearance_type& x (i.RenalClearance ());
            if (typeid (Systemic::RenalClearance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RenalClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RenalClearance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // SystemicClearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const Systemic::SystemicClearance_type& x (i.SystemicClearance ());
            if (typeid (Systemic::SystemicClearance_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "SystemicClearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "SystemicClearance",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


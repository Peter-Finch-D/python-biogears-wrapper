// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "AnesthesiaMachineData.hxx"

#include "enumAnesthesiaMachineConnection.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarData.hxx"

#include "ScalarFractionData.hxx"

#include "enumAnesthesiaMachineOxygenSource.hxx"

#include "ScalarPressureData.hxx"

#include "enumAnesthesiaMachinePrimaryGas.hxx"

#include "ScalarFrequencyData.hxx"

#include "AnesthesiaMachineChamberData.hxx"

#include "AnesthesiaMachineOxygenBottleData.hxx"

#include "ActiveAnesthesiaMachineEventData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // AnesthesiaMachineData
        // 

        const AnesthesiaMachineData::Connection_optional& AnesthesiaMachineData::
        Connection () const
        {
          return this->Connection_;
        }

        AnesthesiaMachineData::Connection_optional& AnesthesiaMachineData::
        Connection ()
        {
          return this->Connection_;
        }

        void AnesthesiaMachineData::
        Connection (const Connection_type& x)
        {
          this->Connection_.set (x);
        }

        void AnesthesiaMachineData::
        Connection (const Connection_optional& x)
        {
          this->Connection_ = x;
        }

        void AnesthesiaMachineData::
        Connection (::std::unique_ptr< Connection_type > x)
        {
          this->Connection_.set (std::move (x));
        }

        const AnesthesiaMachineData::InletFlow_optional& AnesthesiaMachineData::
        InletFlow () const
        {
          return this->InletFlow_;
        }

        AnesthesiaMachineData::InletFlow_optional& AnesthesiaMachineData::
        InletFlow ()
        {
          return this->InletFlow_;
        }

        void AnesthesiaMachineData::
        InletFlow (const InletFlow_type& x)
        {
          this->InletFlow_.set (x);
        }

        void AnesthesiaMachineData::
        InletFlow (const InletFlow_optional& x)
        {
          this->InletFlow_ = x;
        }

        void AnesthesiaMachineData::
        InletFlow (::std::unique_ptr< InletFlow_type > x)
        {
          this->InletFlow_.set (std::move (x));
        }

        const AnesthesiaMachineData::InspiratoryExpiratoryRatio_optional& AnesthesiaMachineData::
        InspiratoryExpiratoryRatio () const
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        AnesthesiaMachineData::InspiratoryExpiratoryRatio_optional& AnesthesiaMachineData::
        InspiratoryExpiratoryRatio ()
        {
          return this->InspiratoryExpiratoryRatio_;
        }

        void AnesthesiaMachineData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_type& x)
        {
          this->InspiratoryExpiratoryRatio_.set (x);
        }

        void AnesthesiaMachineData::
        InspiratoryExpiratoryRatio (const InspiratoryExpiratoryRatio_optional& x)
        {
          this->InspiratoryExpiratoryRatio_ = x;
        }

        void AnesthesiaMachineData::
        InspiratoryExpiratoryRatio (::std::unique_ptr< InspiratoryExpiratoryRatio_type > x)
        {
          this->InspiratoryExpiratoryRatio_.set (std::move (x));
        }

        const AnesthesiaMachineData::OxygenFraction_optional& AnesthesiaMachineData::
        OxygenFraction () const
        {
          return this->OxygenFraction_;
        }

        AnesthesiaMachineData::OxygenFraction_optional& AnesthesiaMachineData::
        OxygenFraction ()
        {
          return this->OxygenFraction_;
        }

        void AnesthesiaMachineData::
        OxygenFraction (const OxygenFraction_type& x)
        {
          this->OxygenFraction_.set (x);
        }

        void AnesthesiaMachineData::
        OxygenFraction (const OxygenFraction_optional& x)
        {
          this->OxygenFraction_ = x;
        }

        void AnesthesiaMachineData::
        OxygenFraction (::std::unique_ptr< OxygenFraction_type > x)
        {
          this->OxygenFraction_.set (std::move (x));
        }

        const AnesthesiaMachineData::OxygenSource_optional& AnesthesiaMachineData::
        OxygenSource () const
        {
          return this->OxygenSource_;
        }

        AnesthesiaMachineData::OxygenSource_optional& AnesthesiaMachineData::
        OxygenSource ()
        {
          return this->OxygenSource_;
        }

        void AnesthesiaMachineData::
        OxygenSource (const OxygenSource_type& x)
        {
          this->OxygenSource_.set (x);
        }

        void AnesthesiaMachineData::
        OxygenSource (const OxygenSource_optional& x)
        {
          this->OxygenSource_ = x;
        }

        void AnesthesiaMachineData::
        OxygenSource (::std::unique_ptr< OxygenSource_type > x)
        {
          this->OxygenSource_.set (std::move (x));
        }

        const AnesthesiaMachineData::PositiveEndExpiredPressure_optional& AnesthesiaMachineData::
        PositiveEndExpiredPressure () const
        {
          return this->PositiveEndExpiredPressure_;
        }

        AnesthesiaMachineData::PositiveEndExpiredPressure_optional& AnesthesiaMachineData::
        PositiveEndExpiredPressure ()
        {
          return this->PositiveEndExpiredPressure_;
        }

        void AnesthesiaMachineData::
        PositiveEndExpiredPressure (const PositiveEndExpiredPressure_type& x)
        {
          this->PositiveEndExpiredPressure_.set (x);
        }

        void AnesthesiaMachineData::
        PositiveEndExpiredPressure (const PositiveEndExpiredPressure_optional& x)
        {
          this->PositiveEndExpiredPressure_ = x;
        }

        void AnesthesiaMachineData::
        PositiveEndExpiredPressure (::std::unique_ptr< PositiveEndExpiredPressure_type > x)
        {
          this->PositiveEndExpiredPressure_.set (std::move (x));
        }

        const AnesthesiaMachineData::PrimaryGas_optional& AnesthesiaMachineData::
        PrimaryGas () const
        {
          return this->PrimaryGas_;
        }

        AnesthesiaMachineData::PrimaryGas_optional& AnesthesiaMachineData::
        PrimaryGas ()
        {
          return this->PrimaryGas_;
        }

        void AnesthesiaMachineData::
        PrimaryGas (const PrimaryGas_type& x)
        {
          this->PrimaryGas_.set (x);
        }

        void AnesthesiaMachineData::
        PrimaryGas (const PrimaryGas_optional& x)
        {
          this->PrimaryGas_ = x;
        }

        void AnesthesiaMachineData::
        PrimaryGas (::std::unique_ptr< PrimaryGas_type > x)
        {
          this->PrimaryGas_.set (std::move (x));
        }

        const AnesthesiaMachineData::ReliefValvePressure_optional& AnesthesiaMachineData::
        ReliefValvePressure () const
        {
          return this->ReliefValvePressure_;
        }

        AnesthesiaMachineData::ReliefValvePressure_optional& AnesthesiaMachineData::
        ReliefValvePressure ()
        {
          return this->ReliefValvePressure_;
        }

        void AnesthesiaMachineData::
        ReliefValvePressure (const ReliefValvePressure_type& x)
        {
          this->ReliefValvePressure_.set (x);
        }

        void AnesthesiaMachineData::
        ReliefValvePressure (const ReliefValvePressure_optional& x)
        {
          this->ReliefValvePressure_ = x;
        }

        void AnesthesiaMachineData::
        ReliefValvePressure (::std::unique_ptr< ReliefValvePressure_type > x)
        {
          this->ReliefValvePressure_.set (std::move (x));
        }

        const AnesthesiaMachineData::RespiratoryRate_optional& AnesthesiaMachineData::
        RespiratoryRate () const
        {
          return this->RespiratoryRate_;
        }

        AnesthesiaMachineData::RespiratoryRate_optional& AnesthesiaMachineData::
        RespiratoryRate ()
        {
          return this->RespiratoryRate_;
        }

        void AnesthesiaMachineData::
        RespiratoryRate (const RespiratoryRate_type& x)
        {
          this->RespiratoryRate_.set (x);
        }

        void AnesthesiaMachineData::
        RespiratoryRate (const RespiratoryRate_optional& x)
        {
          this->RespiratoryRate_ = x;
        }

        void AnesthesiaMachineData::
        RespiratoryRate (::std::unique_ptr< RespiratoryRate_type > x)
        {
          this->RespiratoryRate_.set (std::move (x));
        }

        const AnesthesiaMachineData::VentilatorPressure_optional& AnesthesiaMachineData::
        VentilatorPressure () const
        {
          return this->VentilatorPressure_;
        }

        AnesthesiaMachineData::VentilatorPressure_optional& AnesthesiaMachineData::
        VentilatorPressure ()
        {
          return this->VentilatorPressure_;
        }

        void AnesthesiaMachineData::
        VentilatorPressure (const VentilatorPressure_type& x)
        {
          this->VentilatorPressure_.set (x);
        }

        void AnesthesiaMachineData::
        VentilatorPressure (const VentilatorPressure_optional& x)
        {
          this->VentilatorPressure_ = x;
        }

        void AnesthesiaMachineData::
        VentilatorPressure (::std::unique_ptr< VentilatorPressure_type > x)
        {
          this->VentilatorPressure_.set (std::move (x));
        }

        const AnesthesiaMachineData::LeftChamber_optional& AnesthesiaMachineData::
        LeftChamber () const
        {
          return this->LeftChamber_;
        }

        AnesthesiaMachineData::LeftChamber_optional& AnesthesiaMachineData::
        LeftChamber ()
        {
          return this->LeftChamber_;
        }

        void AnesthesiaMachineData::
        LeftChamber (const LeftChamber_type& x)
        {
          this->LeftChamber_.set (x);
        }

        void AnesthesiaMachineData::
        LeftChamber (const LeftChamber_optional& x)
        {
          this->LeftChamber_ = x;
        }

        void AnesthesiaMachineData::
        LeftChamber (::std::unique_ptr< LeftChamber_type > x)
        {
          this->LeftChamber_.set (std::move (x));
        }

        const AnesthesiaMachineData::RightChamber_optional& AnesthesiaMachineData::
        RightChamber () const
        {
          return this->RightChamber_;
        }

        AnesthesiaMachineData::RightChamber_optional& AnesthesiaMachineData::
        RightChamber ()
        {
          return this->RightChamber_;
        }

        void AnesthesiaMachineData::
        RightChamber (const RightChamber_type& x)
        {
          this->RightChamber_.set (x);
        }

        void AnesthesiaMachineData::
        RightChamber (const RightChamber_optional& x)
        {
          this->RightChamber_ = x;
        }

        void AnesthesiaMachineData::
        RightChamber (::std::unique_ptr< RightChamber_type > x)
        {
          this->RightChamber_.set (std::move (x));
        }

        const AnesthesiaMachineData::OxygenBottleOne_optional& AnesthesiaMachineData::
        OxygenBottleOne () const
        {
          return this->OxygenBottleOne_;
        }

        AnesthesiaMachineData::OxygenBottleOne_optional& AnesthesiaMachineData::
        OxygenBottleOne ()
        {
          return this->OxygenBottleOne_;
        }

        void AnesthesiaMachineData::
        OxygenBottleOne (const OxygenBottleOne_type& x)
        {
          this->OxygenBottleOne_.set (x);
        }

        void AnesthesiaMachineData::
        OxygenBottleOne (const OxygenBottleOne_optional& x)
        {
          this->OxygenBottleOne_ = x;
        }

        void AnesthesiaMachineData::
        OxygenBottleOne (::std::unique_ptr< OxygenBottleOne_type > x)
        {
          this->OxygenBottleOne_.set (std::move (x));
        }

        const AnesthesiaMachineData::OxygenBottleTwo_optional& AnesthesiaMachineData::
        OxygenBottleTwo () const
        {
          return this->OxygenBottleTwo_;
        }

        AnesthesiaMachineData::OxygenBottleTwo_optional& AnesthesiaMachineData::
        OxygenBottleTwo ()
        {
          return this->OxygenBottleTwo_;
        }

        void AnesthesiaMachineData::
        OxygenBottleTwo (const OxygenBottleTwo_type& x)
        {
          this->OxygenBottleTwo_.set (x);
        }

        void AnesthesiaMachineData::
        OxygenBottleTwo (const OxygenBottleTwo_optional& x)
        {
          this->OxygenBottleTwo_ = x;
        }

        void AnesthesiaMachineData::
        OxygenBottleTwo (::std::unique_ptr< OxygenBottleTwo_type > x)
        {
          this->OxygenBottleTwo_.set (std::move (x));
        }

        const AnesthesiaMachineData::ActiveEvent_sequence& AnesthesiaMachineData::
        ActiveEvent () const
        {
          return this->ActiveEvent_;
        }

        AnesthesiaMachineData::ActiveEvent_sequence& AnesthesiaMachineData::
        ActiveEvent ()
        {
          return this->ActiveEvent_;
        }

        void AnesthesiaMachineData::
        ActiveEvent (const ActiveEvent_sequence& s)
        {
          this->ActiveEvent_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // AnesthesiaMachineData
        //

        AnesthesiaMachineData::
        AnesthesiaMachineData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          Connection_ (this),
          InletFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          OxygenFraction_ (this),
          OxygenSource_ (this),
          PositiveEndExpiredPressure_ (this),
          PrimaryGas_ (this),
          ReliefValvePressure_ (this),
          RespiratoryRate_ (this),
          VentilatorPressure_ (this),
          LeftChamber_ (this),
          RightChamber_ (this),
          OxygenBottleOne_ (this),
          OxygenBottleTwo_ (this),
          ActiveEvent_ (this)
        {
        }

        AnesthesiaMachineData::
        AnesthesiaMachineData (const AnesthesiaMachineData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          Connection_ (x.Connection_, f, this),
          InletFlow_ (x.InletFlow_, f, this),
          InspiratoryExpiratoryRatio_ (x.InspiratoryExpiratoryRatio_, f, this),
          OxygenFraction_ (x.OxygenFraction_, f, this),
          OxygenSource_ (x.OxygenSource_, f, this),
          PositiveEndExpiredPressure_ (x.PositiveEndExpiredPressure_, f, this),
          PrimaryGas_ (x.PrimaryGas_, f, this),
          ReliefValvePressure_ (x.ReliefValvePressure_, f, this),
          RespiratoryRate_ (x.RespiratoryRate_, f, this),
          VentilatorPressure_ (x.VentilatorPressure_, f, this),
          LeftChamber_ (x.LeftChamber_, f, this),
          RightChamber_ (x.RightChamber_, f, this),
          OxygenBottleOne_ (x.OxygenBottleOne_, f, this),
          OxygenBottleTwo_ (x.OxygenBottleTwo_, f, this),
          ActiveEvent_ (x.ActiveEvent_, f, this)
        {
        }

        AnesthesiaMachineData::
        AnesthesiaMachineData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          Connection_ (this),
          InletFlow_ (this),
          InspiratoryExpiratoryRatio_ (this),
          OxygenFraction_ (this),
          OxygenSource_ (this),
          PositiveEndExpiredPressure_ (this),
          PrimaryGas_ (this),
          ReliefValvePressure_ (this),
          RespiratoryRate_ (this),
          VentilatorPressure_ (this),
          LeftChamber_ (this),
          RightChamber_ (this),
          OxygenBottleOne_ (this),
          OxygenBottleTwo_ (this),
          ActiveEvent_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void AnesthesiaMachineData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Connection
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Connection",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Connection_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Connection_)
                {
                  ::std::unique_ptr< Connection_type > r (
                    dynamic_cast< Connection_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Connection_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InletFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InletFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InletFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InletFlow_)
                {
                  ::std::unique_ptr< InletFlow_type > r (
                    dynamic_cast< InletFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InletFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InspiratoryExpiratoryRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InspiratoryExpiratoryRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InspiratoryExpiratoryRatio_)
                {
                  ::std::unique_ptr< InspiratoryExpiratoryRatio_type > r (
                    dynamic_cast< InspiratoryExpiratoryRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InspiratoryExpiratoryRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenFraction_)
                {
                  ::std::unique_ptr< OxygenFraction_type > r (
                    dynamic_cast< OxygenFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenSource
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenSource_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenSource_)
                {
                  ::std::unique_ptr< OxygenSource_type > r (
                    dynamic_cast< OxygenSource_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenSource_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PositiveEndExpiredPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PositiveEndExpiredPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PositiveEndExpiredPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PositiveEndExpiredPressure_)
                {
                  ::std::unique_ptr< PositiveEndExpiredPressure_type > r (
                    dynamic_cast< PositiveEndExpiredPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PositiveEndExpiredPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PrimaryGas
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PrimaryGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PrimaryGas_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PrimaryGas_)
                {
                  ::std::unique_ptr< PrimaryGas_type > r (
                    dynamic_cast< PrimaryGas_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PrimaryGas_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReliefValvePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReliefValvePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReliefValvePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReliefValvePressure_)
                {
                  ::std::unique_ptr< ReliefValvePressure_type > r (
                    dynamic_cast< ReliefValvePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReliefValvePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespiratoryRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespiratoryRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespiratoryRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespiratoryRate_)
                {
                  ::std::unique_ptr< RespiratoryRate_type > r (
                    dynamic_cast< RespiratoryRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespiratoryRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VentilatorPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VentilatorPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VentilatorPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VentilatorPressure_)
                {
                  ::std::unique_ptr< VentilatorPressure_type > r (
                    dynamic_cast< VentilatorPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VentilatorPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftChamber
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftChamber",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftChamber_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftChamber_)
                {
                  ::std::unique_ptr< LeftChamber_type > r (
                    dynamic_cast< LeftChamber_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftChamber_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightChamber
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightChamber",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightChamber_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightChamber_)
                {
                  ::std::unique_ptr< RightChamber_type > r (
                    dynamic_cast< RightChamber_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightChamber_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenBottleOne
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenBottleOne",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenBottleOne_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenBottleOne_)
                {
                  ::std::unique_ptr< OxygenBottleOne_type > r (
                    dynamic_cast< OxygenBottleOne_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenBottleOne_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OxygenBottleTwo
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OxygenBottleTwo",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OxygenBottleTwo_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OxygenBottleTwo_)
                {
                  ::std::unique_ptr< OxygenBottleTwo_type > r (
                    dynamic_cast< OxygenBottleTwo_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OxygenBottleTwo_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ActiveEvent
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveEvent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveEvent_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ActiveEvent_type > r (
                  dynamic_cast< ActiveEvent_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ActiveEvent_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        AnesthesiaMachineData* AnesthesiaMachineData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class AnesthesiaMachineData (*this, f, c);
        }

        AnesthesiaMachineData& AnesthesiaMachineData::
        operator= (const AnesthesiaMachineData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->Connection_ = x.Connection_;
            this->InletFlow_ = x.InletFlow_;
            this->InspiratoryExpiratoryRatio_ = x.InspiratoryExpiratoryRatio_;
            this->OxygenFraction_ = x.OxygenFraction_;
            this->OxygenSource_ = x.OxygenSource_;
            this->PositiveEndExpiredPressure_ = x.PositiveEndExpiredPressure_;
            this->PrimaryGas_ = x.PrimaryGas_;
            this->ReliefValvePressure_ = x.ReliefValvePressure_;
            this->RespiratoryRate_ = x.RespiratoryRate_;
            this->VentilatorPressure_ = x.VentilatorPressure_;
            this->LeftChamber_ = x.LeftChamber_;
            this->RightChamber_ = x.RightChamber_;
            this->OxygenBottleOne_ = x.OxygenBottleOne_;
            this->OxygenBottleTwo_ = x.OxygenBottleTwo_;
            this->ActiveEvent_ = x.ActiveEvent_;
          }

          return *this;
        }

        AnesthesiaMachineData::
        ~AnesthesiaMachineData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnesthesiaMachineData >
        _xsd_AnesthesiaMachineData_type_factory_init (
          "AnesthesiaMachineData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const AnesthesiaMachineData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Connection ())
            {
              o << ::std::endl << "Connection: ";
              om.insert (o, *i.Connection ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InletFlow ())
            {
              o << ::std::endl << "InletFlow: ";
              om.insert (o, *i.InletFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              o << ::std::endl << "InspiratoryExpiratoryRatio: ";
              om.insert (o, *i.InspiratoryExpiratoryRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenFraction ())
            {
              o << ::std::endl << "OxygenFraction: ";
              om.insert (o, *i.OxygenFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenSource ())
            {
              o << ::std::endl << "OxygenSource: ";
              om.insert (o, *i.OxygenSource ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PositiveEndExpiredPressure ())
            {
              o << ::std::endl << "PositiveEndExpiredPressure: ";
              om.insert (o, *i.PositiveEndExpiredPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PrimaryGas ())
            {
              o << ::std::endl << "PrimaryGas: ";
              om.insert (o, *i.PrimaryGas ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReliefValvePressure ())
            {
              o << ::std::endl << "ReliefValvePressure: ";
              om.insert (o, *i.ReliefValvePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespiratoryRate ())
            {
              o << ::std::endl << "RespiratoryRate: ";
              om.insert (o, *i.RespiratoryRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VentilatorPressure ())
            {
              o << ::std::endl << "VentilatorPressure: ";
              om.insert (o, *i.VentilatorPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftChamber ())
            {
              o << ::std::endl << "LeftChamber: ";
              om.insert (o, *i.LeftChamber ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightChamber ())
            {
              o << ::std::endl << "RightChamber: ";
              om.insert (o, *i.RightChamber ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenBottleOne ())
            {
              o << ::std::endl << "OxygenBottleOne: ";
              om.insert (o, *i.OxygenBottleOne ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OxygenBottleTwo ())
            {
              o << ::std::endl << "OxygenBottleTwo: ";
              om.insert (o, *i.OxygenBottleTwo ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (AnesthesiaMachineData::ActiveEvent_const_iterator
                 b (i.ActiveEvent ().begin ()), e (i.ActiveEvent ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ActiveEvent: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, AnesthesiaMachineData >
        _xsd_AnesthesiaMachineData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const AnesthesiaMachineData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // Connection
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Connection ())
            {
              const AnesthesiaMachineData::Connection_type& x (*i.Connection ());
              if (typeid (AnesthesiaMachineData::Connection_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Connection",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Connection",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InletFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InletFlow ())
            {
              const AnesthesiaMachineData::InletFlow_type& x (*i.InletFlow ());
              if (typeid (AnesthesiaMachineData::InletFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InletFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InletFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InspiratoryExpiratoryRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InspiratoryExpiratoryRatio ())
            {
              const AnesthesiaMachineData::InspiratoryExpiratoryRatio_type& x (*i.InspiratoryExpiratoryRatio ());
              if (typeid (AnesthesiaMachineData::InspiratoryExpiratoryRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InspiratoryExpiratoryRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InspiratoryExpiratoryRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenFraction ())
            {
              const AnesthesiaMachineData::OxygenFraction_type& x (*i.OxygenFraction ());
              if (typeid (AnesthesiaMachineData::OxygenFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenSource
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenSource ())
            {
              const AnesthesiaMachineData::OxygenSource_type& x (*i.OxygenSource ());
              if (typeid (AnesthesiaMachineData::OxygenSource_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenSource",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenSource",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PositiveEndExpiredPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PositiveEndExpiredPressure ())
            {
              const AnesthesiaMachineData::PositiveEndExpiredPressure_type& x (*i.PositiveEndExpiredPressure ());
              if (typeid (AnesthesiaMachineData::PositiveEndExpiredPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PositiveEndExpiredPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PositiveEndExpiredPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PrimaryGas
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PrimaryGas ())
            {
              const AnesthesiaMachineData::PrimaryGas_type& x (*i.PrimaryGas ());
              if (typeid (AnesthesiaMachineData::PrimaryGas_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PrimaryGas",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PrimaryGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ReliefValvePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReliefValvePressure ())
            {
              const AnesthesiaMachineData::ReliefValvePressure_type& x (*i.ReliefValvePressure ());
              if (typeid (AnesthesiaMachineData::ReliefValvePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReliefValvePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReliefValvePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespiratoryRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespiratoryRate ())
            {
              const AnesthesiaMachineData::RespiratoryRate_type& x (*i.RespiratoryRate ());
              if (typeid (AnesthesiaMachineData::RespiratoryRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespiratoryRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespiratoryRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VentilatorPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VentilatorPressure ())
            {
              const AnesthesiaMachineData::VentilatorPressure_type& x (*i.VentilatorPressure ());
              if (typeid (AnesthesiaMachineData::VentilatorPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VentilatorPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VentilatorPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftChamber
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftChamber ())
            {
              const AnesthesiaMachineData::LeftChamber_type& x (*i.LeftChamber ());
              if (typeid (AnesthesiaMachineData::LeftChamber_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftChamber",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftChamber",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightChamber
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightChamber ())
            {
              const AnesthesiaMachineData::RightChamber_type& x (*i.RightChamber ());
              if (typeid (AnesthesiaMachineData::RightChamber_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightChamber",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightChamber",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenBottleOne
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenBottleOne ())
            {
              const AnesthesiaMachineData::OxygenBottleOne_type& x (*i.OxygenBottleOne ());
              if (typeid (AnesthesiaMachineData::OxygenBottleOne_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenBottleOne",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenBottleOne",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OxygenBottleTwo
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OxygenBottleTwo ())
            {
              const AnesthesiaMachineData::OxygenBottleTwo_type& x (*i.OxygenBottleTwo ());
              if (typeid (AnesthesiaMachineData::OxygenBottleTwo_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OxygenBottleTwo",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OxygenBottleTwo",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ActiveEvent
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (AnesthesiaMachineData::ActiveEvent_const_iterator
                 b (i.ActiveEvent ().begin ()), n (i.ActiveEvent ().end ());
                 b != n; ++b)
            {
              if (typeid (AnesthesiaMachineData::ActiveEvent_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveEvent",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ActiveEvent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnesthesiaMachineData >
        _xsd_AnesthesiaMachineData_type_serializer_init (
          "AnesthesiaMachineData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CardiovascularSystemData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarVolumeData.hxx"

#include "ScalarVolumePerTimeAreaData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarFrequencyData.hxx"

#include "enumHeartRhythm.hxx"

#include "ScalarFlowResistanceData.hxx"

#include "ScalarPressureTimePerVolumeAreaData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CardiovascularSystemData
        // 

        const CardiovascularSystemData::ArterialPressure_optional& CardiovascularSystemData::
        ArterialPressure () const
        {
          return this->ArterialPressure_;
        }

        CardiovascularSystemData::ArterialPressure_optional& CardiovascularSystemData::
        ArterialPressure ()
        {
          return this->ArterialPressure_;
        }

        void CardiovascularSystemData::
        ArterialPressure (const ArterialPressure_type& x)
        {
          this->ArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        ArterialPressure (const ArterialPressure_optional& x)
        {
          this->ArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        ArterialPressure (::std::unique_ptr< ArterialPressure_type > x)
        {
          this->ArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::BloodVolume_optional& CardiovascularSystemData::
        BloodVolume () const
        {
          return this->BloodVolume_;
        }

        CardiovascularSystemData::BloodVolume_optional& CardiovascularSystemData::
        BloodVolume ()
        {
          return this->BloodVolume_;
        }

        void CardiovascularSystemData::
        BloodVolume (const BloodVolume_type& x)
        {
          this->BloodVolume_.set (x);
        }

        void CardiovascularSystemData::
        BloodVolume (const BloodVolume_optional& x)
        {
          this->BloodVolume_ = x;
        }

        void CardiovascularSystemData::
        BloodVolume (::std::unique_ptr< BloodVolume_type > x)
        {
          this->BloodVolume_.set (std::move (x));
        }

        const CardiovascularSystemData::CardiacIndex_optional& CardiovascularSystemData::
        CardiacIndex () const
        {
          return this->CardiacIndex_;
        }

        CardiovascularSystemData::CardiacIndex_optional& CardiovascularSystemData::
        CardiacIndex ()
        {
          return this->CardiacIndex_;
        }

        void CardiovascularSystemData::
        CardiacIndex (const CardiacIndex_type& x)
        {
          this->CardiacIndex_.set (x);
        }

        void CardiovascularSystemData::
        CardiacIndex (const CardiacIndex_optional& x)
        {
          this->CardiacIndex_ = x;
        }

        void CardiovascularSystemData::
        CardiacIndex (::std::unique_ptr< CardiacIndex_type > x)
        {
          this->CardiacIndex_.set (std::move (x));
        }

        const CardiovascularSystemData::CardiacOutput_optional& CardiovascularSystemData::
        CardiacOutput () const
        {
          return this->CardiacOutput_;
        }

        CardiovascularSystemData::CardiacOutput_optional& CardiovascularSystemData::
        CardiacOutput ()
        {
          return this->CardiacOutput_;
        }

        void CardiovascularSystemData::
        CardiacOutput (const CardiacOutput_type& x)
        {
          this->CardiacOutput_.set (x);
        }

        void CardiovascularSystemData::
        CardiacOutput (const CardiacOutput_optional& x)
        {
          this->CardiacOutput_ = x;
        }

        void CardiovascularSystemData::
        CardiacOutput (::std::unique_ptr< CardiacOutput_type > x)
        {
          this->CardiacOutput_.set (std::move (x));
        }

        const CardiovascularSystemData::CentralVenousPressure_optional& CardiovascularSystemData::
        CentralVenousPressure () const
        {
          return this->CentralVenousPressure_;
        }

        CardiovascularSystemData::CentralVenousPressure_optional& CardiovascularSystemData::
        CentralVenousPressure ()
        {
          return this->CentralVenousPressure_;
        }

        void CardiovascularSystemData::
        CentralVenousPressure (const CentralVenousPressure_type& x)
        {
          this->CentralVenousPressure_.set (x);
        }

        void CardiovascularSystemData::
        CentralVenousPressure (const CentralVenousPressure_optional& x)
        {
          this->CentralVenousPressure_ = x;
        }

        void CardiovascularSystemData::
        CentralVenousPressure (::std::unique_ptr< CentralVenousPressure_type > x)
        {
          this->CentralVenousPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::CerebralBloodFlow_optional& CardiovascularSystemData::
        CerebralBloodFlow () const
        {
          return this->CerebralBloodFlow_;
        }

        CardiovascularSystemData::CerebralBloodFlow_optional& CardiovascularSystemData::
        CerebralBloodFlow ()
        {
          return this->CerebralBloodFlow_;
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (const CerebralBloodFlow_type& x)
        {
          this->CerebralBloodFlow_.set (x);
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (const CerebralBloodFlow_optional& x)
        {
          this->CerebralBloodFlow_ = x;
        }

        void CardiovascularSystemData::
        CerebralBloodFlow (::std::unique_ptr< CerebralBloodFlow_type > x)
        {
          this->CerebralBloodFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::CerebralPerfusionPressure_optional& CardiovascularSystemData::
        CerebralPerfusionPressure () const
        {
          return this->CerebralPerfusionPressure_;
        }

        CardiovascularSystemData::CerebralPerfusionPressure_optional& CardiovascularSystemData::
        CerebralPerfusionPressure ()
        {
          return this->CerebralPerfusionPressure_;
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (const CerebralPerfusionPressure_type& x)
        {
          this->CerebralPerfusionPressure_.set (x);
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (const CerebralPerfusionPressure_optional& x)
        {
          this->CerebralPerfusionPressure_ = x;
        }

        void CardiovascularSystemData::
        CerebralPerfusionPressure (::std::unique_ptr< CerebralPerfusionPressure_type > x)
        {
          this->CerebralPerfusionPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::DiastolicArterialPressure_optional& CardiovascularSystemData::
        DiastolicArterialPressure () const
        {
          return this->DiastolicArterialPressure_;
        }

        CardiovascularSystemData::DiastolicArterialPressure_optional& CardiovascularSystemData::
        DiastolicArterialPressure ()
        {
          return this->DiastolicArterialPressure_;
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (const DiastolicArterialPressure_type& x)
        {
          this->DiastolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (const DiastolicArterialPressure_optional& x)
        {
          this->DiastolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        DiastolicArterialPressure (::std::unique_ptr< DiastolicArterialPressure_type > x)
        {
          this->DiastolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartEjectionFraction_optional& CardiovascularSystemData::
        HeartEjectionFraction () const
        {
          return this->HeartEjectionFraction_;
        }

        CardiovascularSystemData::HeartEjectionFraction_optional& CardiovascularSystemData::
        HeartEjectionFraction ()
        {
          return this->HeartEjectionFraction_;
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (const HeartEjectionFraction_type& x)
        {
          this->HeartEjectionFraction_.set (x);
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (const HeartEjectionFraction_optional& x)
        {
          this->HeartEjectionFraction_ = x;
        }

        void CardiovascularSystemData::
        HeartEjectionFraction (::std::unique_ptr< HeartEjectionFraction_type > x)
        {
          this->HeartEjectionFraction_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartRate_optional& CardiovascularSystemData::
        HeartRate () const
        {
          return this->HeartRate_;
        }

        CardiovascularSystemData::HeartRate_optional& CardiovascularSystemData::
        HeartRate ()
        {
          return this->HeartRate_;
        }

        void CardiovascularSystemData::
        HeartRate (const HeartRate_type& x)
        {
          this->HeartRate_.set (x);
        }

        void CardiovascularSystemData::
        HeartRate (const HeartRate_optional& x)
        {
          this->HeartRate_ = x;
        }

        void CardiovascularSystemData::
        HeartRate (::std::unique_ptr< HeartRate_type > x)
        {
          this->HeartRate_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartRhythm_optional& CardiovascularSystemData::
        HeartRhythm () const
        {
          return this->HeartRhythm_;
        }

        CardiovascularSystemData::HeartRhythm_optional& CardiovascularSystemData::
        HeartRhythm ()
        {
          return this->HeartRhythm_;
        }

        void CardiovascularSystemData::
        HeartRhythm (const HeartRhythm_type& x)
        {
          this->HeartRhythm_.set (x);
        }

        void CardiovascularSystemData::
        HeartRhythm (const HeartRhythm_optional& x)
        {
          this->HeartRhythm_ = x;
        }

        void CardiovascularSystemData::
        HeartRhythm (::std::unique_ptr< HeartRhythm_type > x)
        {
          this->HeartRhythm_.set (std::move (x));
        }

        const CardiovascularSystemData::HeartStrokeVolume_optional& CardiovascularSystemData::
        HeartStrokeVolume () const
        {
          return this->HeartStrokeVolume_;
        }

        CardiovascularSystemData::HeartStrokeVolume_optional& CardiovascularSystemData::
        HeartStrokeVolume ()
        {
          return this->HeartStrokeVolume_;
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (const HeartStrokeVolume_type& x)
        {
          this->HeartStrokeVolume_.set (x);
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (const HeartStrokeVolume_optional& x)
        {
          this->HeartStrokeVolume_ = x;
        }

        void CardiovascularSystemData::
        HeartStrokeVolume (::std::unique_ptr< HeartStrokeVolume_type > x)
        {
          this->HeartStrokeVolume_.set (std::move (x));
        }

        const CardiovascularSystemData::IntracranialPressure_optional& CardiovascularSystemData::
        IntracranialPressure () const
        {
          return this->IntracranialPressure_;
        }

        CardiovascularSystemData::IntracranialPressure_optional& CardiovascularSystemData::
        IntracranialPressure ()
        {
          return this->IntracranialPressure_;
        }

        void CardiovascularSystemData::
        IntracranialPressure (const IntracranialPressure_type& x)
        {
          this->IntracranialPressure_.set (x);
        }

        void CardiovascularSystemData::
        IntracranialPressure (const IntracranialPressure_optional& x)
        {
          this->IntracranialPressure_ = x;
        }

        void CardiovascularSystemData::
        IntracranialPressure (::std::unique_ptr< IntracranialPressure_type > x)
        {
          this->IntracranialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialPressure_optional& CardiovascularSystemData::
        MeanArterialPressure () const
        {
          return this->MeanArterialPressure_;
        }

        CardiovascularSystemData::MeanArterialPressure_optional& CardiovascularSystemData::
        MeanArterialPressure ()
        {
          return this->MeanArterialPressure_;
        }

        void CardiovascularSystemData::
        MeanArterialPressure (const MeanArterialPressure_type& x)
        {
          this->MeanArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialPressure (const MeanArterialPressure_optional& x)
        {
          this->MeanArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialPressure (::std::unique_ptr< MeanArterialPressure_type > x)
        {
          this->MeanArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure () const
        {
          return this->MeanArterialCarbonDioxidePartialPressure_;
        }

        CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure ()
        {
          return this->MeanArterialCarbonDioxidePartialPressure_;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_type& x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (const MeanArterialCarbonDioxidePartialPressure_optional& x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressure (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressure_type > x)
        {
          this->MeanArterialCarbonDioxidePartialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta () const
        {
          return this->MeanArterialCarbonDioxidePartialPressureDelta_;
        }

        CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_optional& CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta ()
        {
          return this->MeanArterialCarbonDioxidePartialPressureDelta_;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_type& x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_.set (x);
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (const MeanArterialCarbonDioxidePartialPressureDelta_optional& x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_ = x;
        }

        void CardiovascularSystemData::
        MeanArterialCarbonDioxidePartialPressureDelta (::std::unique_ptr< MeanArterialCarbonDioxidePartialPressureDelta_type > x)
        {
          this->MeanArterialCarbonDioxidePartialPressureDelta_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanCentralVenousPressure_optional& CardiovascularSystemData::
        MeanCentralVenousPressure () const
        {
          return this->MeanCentralVenousPressure_;
        }

        CardiovascularSystemData::MeanCentralVenousPressure_optional& CardiovascularSystemData::
        MeanCentralVenousPressure ()
        {
          return this->MeanCentralVenousPressure_;
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (const MeanCentralVenousPressure_type& x)
        {
          this->MeanCentralVenousPressure_.set (x);
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (const MeanCentralVenousPressure_optional& x)
        {
          this->MeanCentralVenousPressure_ = x;
        }

        void CardiovascularSystemData::
        MeanCentralVenousPressure (::std::unique_ptr< MeanCentralVenousPressure_type > x)
        {
          this->MeanCentralVenousPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::MeanSkinFlow_optional& CardiovascularSystemData::
        MeanSkinFlow () const
        {
          return this->MeanSkinFlow_;
        }

        CardiovascularSystemData::MeanSkinFlow_optional& CardiovascularSystemData::
        MeanSkinFlow ()
        {
          return this->MeanSkinFlow_;
        }

        void CardiovascularSystemData::
        MeanSkinFlow (const MeanSkinFlow_type& x)
        {
          this->MeanSkinFlow_.set (x);
        }

        void CardiovascularSystemData::
        MeanSkinFlow (const MeanSkinFlow_optional& x)
        {
          this->MeanSkinFlow_ = x;
        }

        void CardiovascularSystemData::
        MeanSkinFlow (::std::unique_ptr< MeanSkinFlow_type > x)
        {
          this->MeanSkinFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryArterialPressure_optional& CardiovascularSystemData::
        PulmonaryArterialPressure () const
        {
          return this->PulmonaryArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryArterialPressure_optional& CardiovascularSystemData::
        PulmonaryArterialPressure ()
        {
          return this->PulmonaryArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (const PulmonaryArterialPressure_type& x)
        {
          this->PulmonaryArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (const PulmonaryArterialPressure_optional& x)
        {
          this->PulmonaryArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryArterialPressure (::std::unique_ptr< PulmonaryArterialPressure_type > x)
        {
          this->PulmonaryArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryCapillariesWedgePressure_optional& CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure () const
        {
          return this->PulmonaryCapillariesWedgePressure_;
        }

        CardiovascularSystemData::PulmonaryCapillariesWedgePressure_optional& CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure ()
        {
          return this->PulmonaryCapillariesWedgePressure_;
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_type& x)
        {
          this->PulmonaryCapillariesWedgePressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (const PulmonaryCapillariesWedgePressure_optional& x)
        {
          this->PulmonaryCapillariesWedgePressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryCapillariesWedgePressure (::std::unique_ptr< PulmonaryCapillariesWedgePressure_type > x)
        {
          this->PulmonaryCapillariesWedgePressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryDiastolicArterialPressure_optional& CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure () const
        {
          return this->PulmonaryDiastolicArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryDiastolicArterialPressure_optional& CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure ()
        {
          return this->PulmonaryDiastolicArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_type& x)
        {
          this->PulmonaryDiastolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (const PulmonaryDiastolicArterialPressure_optional& x)
        {
          this->PulmonaryDiastolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryDiastolicArterialPressure (::std::unique_ptr< PulmonaryDiastolicArterialPressure_type > x)
        {
          this->PulmonaryDiastolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanArterialPressure_optional& CardiovascularSystemData::
        PulmonaryMeanArterialPressure () const
        {
          return this->PulmonaryMeanArterialPressure_;
        }

        CardiovascularSystemData::PulmonaryMeanArterialPressure_optional& CardiovascularSystemData::
        PulmonaryMeanArterialPressure ()
        {
          return this->PulmonaryMeanArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_type& x)
        {
          this->PulmonaryMeanArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (const PulmonaryMeanArterialPressure_optional& x)
        {
          this->PulmonaryMeanArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanArterialPressure (::std::unique_ptr< PulmonaryMeanArterialPressure_type > x)
        {
          this->PulmonaryMeanArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanCapillaryFlow_optional& CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow () const
        {
          return this->PulmonaryMeanCapillaryFlow_;
        }

        CardiovascularSystemData::PulmonaryMeanCapillaryFlow_optional& CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow ()
        {
          return this->PulmonaryMeanCapillaryFlow_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_type& x)
        {
          this->PulmonaryMeanCapillaryFlow_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (const PulmonaryMeanCapillaryFlow_optional& x)
        {
          this->PulmonaryMeanCapillaryFlow_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanCapillaryFlow (::std::unique_ptr< PulmonaryMeanCapillaryFlow_type > x)
        {
          this->PulmonaryMeanCapillaryFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryMeanShuntFlow_optional& CardiovascularSystemData::
        PulmonaryMeanShuntFlow () const
        {
          return this->PulmonaryMeanShuntFlow_;
        }

        CardiovascularSystemData::PulmonaryMeanShuntFlow_optional& CardiovascularSystemData::
        PulmonaryMeanShuntFlow ()
        {
          return this->PulmonaryMeanShuntFlow_;
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_type& x)
        {
          this->PulmonaryMeanShuntFlow_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (const PulmonaryMeanShuntFlow_optional& x)
        {
          this->PulmonaryMeanShuntFlow_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryMeanShuntFlow (::std::unique_ptr< PulmonaryMeanShuntFlow_type > x)
        {
          this->PulmonaryMeanShuntFlow_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonarySystolicArterialPressure_optional& CardiovascularSystemData::
        PulmonarySystolicArterialPressure () const
        {
          return this->PulmonarySystolicArterialPressure_;
        }

        CardiovascularSystemData::PulmonarySystolicArterialPressure_optional& CardiovascularSystemData::
        PulmonarySystolicArterialPressure ()
        {
          return this->PulmonarySystolicArterialPressure_;
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_type& x)
        {
          this->PulmonarySystolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (const PulmonarySystolicArterialPressure_optional& x)
        {
          this->PulmonarySystolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        PulmonarySystolicArterialPressure (::std::unique_ptr< PulmonarySystolicArterialPressure_type > x)
        {
          this->PulmonarySystolicArterialPressure_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryVascularResistance_optional& CardiovascularSystemData::
        PulmonaryVascularResistance () const
        {
          return this->PulmonaryVascularResistance_;
        }

        CardiovascularSystemData::PulmonaryVascularResistance_optional& CardiovascularSystemData::
        PulmonaryVascularResistance ()
        {
          return this->PulmonaryVascularResistance_;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (const PulmonaryVascularResistance_type& x)
        {
          this->PulmonaryVascularResistance_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (const PulmonaryVascularResistance_optional& x)
        {
          this->PulmonaryVascularResistance_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistance (::std::unique_ptr< PulmonaryVascularResistance_type > x)
        {
          this->PulmonaryVascularResistance_.set (std::move (x));
        }

        const CardiovascularSystemData::PulmonaryVascularResistanceIndex_optional& CardiovascularSystemData::
        PulmonaryVascularResistanceIndex () const
        {
          return this->PulmonaryVascularResistanceIndex_;
        }

        CardiovascularSystemData::PulmonaryVascularResistanceIndex_optional& CardiovascularSystemData::
        PulmonaryVascularResistanceIndex ()
        {
          return this->PulmonaryVascularResistanceIndex_;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_type& x)
        {
          this->PulmonaryVascularResistanceIndex_.set (x);
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (const PulmonaryVascularResistanceIndex_optional& x)
        {
          this->PulmonaryVascularResistanceIndex_ = x;
        }

        void CardiovascularSystemData::
        PulmonaryVascularResistanceIndex (::std::unique_ptr< PulmonaryVascularResistanceIndex_type > x)
        {
          this->PulmonaryVascularResistanceIndex_.set (std::move (x));
        }

        const CardiovascularSystemData::PulsePressure_optional& CardiovascularSystemData::
        PulsePressure () const
        {
          return this->PulsePressure_;
        }

        CardiovascularSystemData::PulsePressure_optional& CardiovascularSystemData::
        PulsePressure ()
        {
          return this->PulsePressure_;
        }

        void CardiovascularSystemData::
        PulsePressure (const PulsePressure_type& x)
        {
          this->PulsePressure_.set (x);
        }

        void CardiovascularSystemData::
        PulsePressure (const PulsePressure_optional& x)
        {
          this->PulsePressure_ = x;
        }

        void CardiovascularSystemData::
        PulsePressure (::std::unique_ptr< PulsePressure_type > x)
        {
          this->PulsePressure_.set (std::move (x));
        }

        const CardiovascularSystemData::SystemicVascularResistance_optional& CardiovascularSystemData::
        SystemicVascularResistance () const
        {
          return this->SystemicVascularResistance_;
        }

        CardiovascularSystemData::SystemicVascularResistance_optional& CardiovascularSystemData::
        SystemicVascularResistance ()
        {
          return this->SystemicVascularResistance_;
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (const SystemicVascularResistance_type& x)
        {
          this->SystemicVascularResistance_.set (x);
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (const SystemicVascularResistance_optional& x)
        {
          this->SystemicVascularResistance_ = x;
        }

        void CardiovascularSystemData::
        SystemicVascularResistance (::std::unique_ptr< SystemicVascularResistance_type > x)
        {
          this->SystemicVascularResistance_.set (std::move (x));
        }

        const CardiovascularSystemData::SystolicArterialPressure_optional& CardiovascularSystemData::
        SystolicArterialPressure () const
        {
          return this->SystolicArterialPressure_;
        }

        CardiovascularSystemData::SystolicArterialPressure_optional& CardiovascularSystemData::
        SystolicArterialPressure ()
        {
          return this->SystolicArterialPressure_;
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (const SystolicArterialPressure_type& x)
        {
          this->SystolicArterialPressure_.set (x);
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (const SystolicArterialPressure_optional& x)
        {
          this->SystolicArterialPressure_ = x;
        }

        void CardiovascularSystemData::
        SystolicArterialPressure (::std::unique_ptr< SystolicArterialPressure_type > x)
        {
          this->SystolicArterialPressure_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CardiovascularSystemData
        //

        CardiovascularSystemData::
        CardiovascularSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          ArterialPressure_ (this),
          BloodVolume_ (this),
          CardiacIndex_ (this),
          CardiacOutput_ (this),
          CentralVenousPressure_ (this),
          CerebralBloodFlow_ (this),
          CerebralPerfusionPressure_ (this),
          DiastolicArterialPressure_ (this),
          HeartEjectionFraction_ (this),
          HeartRate_ (this),
          HeartRhythm_ (this),
          HeartStrokeVolume_ (this),
          IntracranialPressure_ (this),
          MeanArterialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (this),
          MeanCentralVenousPressure_ (this),
          MeanSkinFlow_ (this),
          PulmonaryArterialPressure_ (this),
          PulmonaryCapillariesWedgePressure_ (this),
          PulmonaryDiastolicArterialPressure_ (this),
          PulmonaryMeanArterialPressure_ (this),
          PulmonaryMeanCapillaryFlow_ (this),
          PulmonaryMeanShuntFlow_ (this),
          PulmonarySystolicArterialPressure_ (this),
          PulmonaryVascularResistance_ (this),
          PulmonaryVascularResistanceIndex_ (this),
          PulsePressure_ (this),
          SystemicVascularResistance_ (this),
          SystolicArterialPressure_ (this)
        {
        }

        CardiovascularSystemData::
        CardiovascularSystemData (const CardiovascularSystemData& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          ArterialPressure_ (x.ArterialPressure_, f, this),
          BloodVolume_ (x.BloodVolume_, f, this),
          CardiacIndex_ (x.CardiacIndex_, f, this),
          CardiacOutput_ (x.CardiacOutput_, f, this),
          CentralVenousPressure_ (x.CentralVenousPressure_, f, this),
          CerebralBloodFlow_ (x.CerebralBloodFlow_, f, this),
          CerebralPerfusionPressure_ (x.CerebralPerfusionPressure_, f, this),
          DiastolicArterialPressure_ (x.DiastolicArterialPressure_, f, this),
          HeartEjectionFraction_ (x.HeartEjectionFraction_, f, this),
          HeartRate_ (x.HeartRate_, f, this),
          HeartRhythm_ (x.HeartRhythm_, f, this),
          HeartStrokeVolume_ (x.HeartStrokeVolume_, f, this),
          IntracranialPressure_ (x.IntracranialPressure_, f, this),
          MeanArterialPressure_ (x.MeanArterialPressure_, f, this),
          MeanArterialCarbonDioxidePartialPressure_ (x.MeanArterialCarbonDioxidePartialPressure_, f, this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (x.MeanArterialCarbonDioxidePartialPressureDelta_, f, this),
          MeanCentralVenousPressure_ (x.MeanCentralVenousPressure_, f, this),
          MeanSkinFlow_ (x.MeanSkinFlow_, f, this),
          PulmonaryArterialPressure_ (x.PulmonaryArterialPressure_, f, this),
          PulmonaryCapillariesWedgePressure_ (x.PulmonaryCapillariesWedgePressure_, f, this),
          PulmonaryDiastolicArterialPressure_ (x.PulmonaryDiastolicArterialPressure_, f, this),
          PulmonaryMeanArterialPressure_ (x.PulmonaryMeanArterialPressure_, f, this),
          PulmonaryMeanCapillaryFlow_ (x.PulmonaryMeanCapillaryFlow_, f, this),
          PulmonaryMeanShuntFlow_ (x.PulmonaryMeanShuntFlow_, f, this),
          PulmonarySystolicArterialPressure_ (x.PulmonarySystolicArterialPressure_, f, this),
          PulmonaryVascularResistance_ (x.PulmonaryVascularResistance_, f, this),
          PulmonaryVascularResistanceIndex_ (x.PulmonaryVascularResistanceIndex_, f, this),
          PulsePressure_ (x.PulsePressure_, f, this),
          SystemicVascularResistance_ (x.SystemicVascularResistance_, f, this),
          SystolicArterialPressure_ (x.SystolicArterialPressure_, f, this)
        {
        }

        CardiovascularSystemData::
        CardiovascularSystemData (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          ArterialPressure_ (this),
          BloodVolume_ (this),
          CardiacIndex_ (this),
          CardiacOutput_ (this),
          CentralVenousPressure_ (this),
          CerebralBloodFlow_ (this),
          CerebralPerfusionPressure_ (this),
          DiastolicArterialPressure_ (this),
          HeartEjectionFraction_ (this),
          HeartRate_ (this),
          HeartRhythm_ (this),
          HeartStrokeVolume_ (this),
          IntracranialPressure_ (this),
          MeanArterialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressure_ (this),
          MeanArterialCarbonDioxidePartialPressureDelta_ (this),
          MeanCentralVenousPressure_ (this),
          MeanSkinFlow_ (this),
          PulmonaryArterialPressure_ (this),
          PulmonaryCapillariesWedgePressure_ (this),
          PulmonaryDiastolicArterialPressure_ (this),
          PulmonaryMeanArterialPressure_ (this),
          PulmonaryMeanCapillaryFlow_ (this),
          PulmonaryMeanShuntFlow_ (this),
          PulmonarySystolicArterialPressure_ (this),
          PulmonaryVascularResistance_ (this),
          PulmonaryVascularResistanceIndex_ (this),
          PulsePressure_ (this),
          SystemicVascularResistance_ (this),
          SystolicArterialPressure_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CardiovascularSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ArterialPressure_)
                {
                  ::std::unique_ptr< ArterialPressure_type > r (
                    dynamic_cast< ArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BloodVolume_)
                {
                  ::std::unique_ptr< BloodVolume_type > r (
                    dynamic_cast< BloodVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiacIndex_)
                {
                  ::std::unique_ptr< CardiacIndex_type > r (
                    dynamic_cast< CardiacIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CardiacOutput
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CardiacOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CardiacOutput_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CardiacOutput_)
                {
                  ::std::unique_ptr< CardiacOutput_type > r (
                    dynamic_cast< CardiacOutput_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CardiacOutput_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralVenousPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralVenousPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralVenousPressure_)
                {
                  ::std::unique_ptr< CentralVenousPressure_type > r (
                    dynamic_cast< CentralVenousPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralVenousPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CerebralBloodFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CerebralBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CerebralBloodFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CerebralBloodFlow_)
                {
                  ::std::unique_ptr< CerebralBloodFlow_type > r (
                    dynamic_cast< CerebralBloodFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CerebralBloodFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CerebralPerfusionPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CerebralPerfusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CerebralPerfusionPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CerebralPerfusionPressure_)
                {
                  ::std::unique_ptr< CerebralPerfusionPressure_type > r (
                    dynamic_cast< CerebralPerfusionPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CerebralPerfusionPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DiastolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DiastolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DiastolicArterialPressure_)
                {
                  ::std::unique_ptr< DiastolicArterialPressure_type > r (
                    dynamic_cast< DiastolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DiastolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartEjectionFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartEjectionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartEjectionFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartEjectionFraction_)
                {
                  ::std::unique_ptr< HeartEjectionFraction_type > r (
                    dynamic_cast< HeartEjectionFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartEjectionFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRate_)
                {
                  ::std::unique_ptr< HeartRate_type > r (
                    dynamic_cast< HeartRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRhythm
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRhythm",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRhythm_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRhythm_)
                {
                  ::std::unique_ptr< HeartRhythm_type > r (
                    dynamic_cast< HeartRhythm_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRhythm_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartStrokeVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartStrokeVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartStrokeVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartStrokeVolume_)
                {
                  ::std::unique_ptr< HeartStrokeVolume_type > r (
                    dynamic_cast< HeartStrokeVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartStrokeVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IntracranialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IntracranialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IntracranialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->IntracranialPressure_)
                {
                  ::std::unique_ptr< IntracranialPressure_type > r (
                    dynamic_cast< IntracranialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IntracranialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialPressure_)
                {
                  ::std::unique_ptr< MeanArterialPressure_type > r (
                    dynamic_cast< MeanArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialCarbonDioxidePartialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialCarbonDioxidePartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialCarbonDioxidePartialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialCarbonDioxidePartialPressure_)
                {
                  ::std::unique_ptr< MeanArterialCarbonDioxidePartialPressure_type > r (
                    dynamic_cast< MeanArterialCarbonDioxidePartialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialCarbonDioxidePartialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanArterialCarbonDioxidePartialPressureDelta
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanArterialCarbonDioxidePartialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanArterialCarbonDioxidePartialPressureDelta_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanArterialCarbonDioxidePartialPressureDelta_)
                {
                  ::std::unique_ptr< MeanArterialCarbonDioxidePartialPressureDelta_type > r (
                    dynamic_cast< MeanArterialCarbonDioxidePartialPressureDelta_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanArterialCarbonDioxidePartialPressureDelta_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanCentralVenousPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanCentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanCentralVenousPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanCentralVenousPressure_)
                {
                  ::std::unique_ptr< MeanCentralVenousPressure_type > r (
                    dynamic_cast< MeanCentralVenousPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanCentralVenousPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanSkinFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanSkinFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanSkinFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanSkinFlow_)
                {
                  ::std::unique_ptr< MeanSkinFlow_type > r (
                    dynamic_cast< MeanSkinFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanSkinFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryArterialPressure_type > r (
                    dynamic_cast< PulmonaryArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryCapillariesWedgePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryCapillariesWedgePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryCapillariesWedgePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryCapillariesWedgePressure_)
                {
                  ::std::unique_ptr< PulmonaryCapillariesWedgePressure_type > r (
                    dynamic_cast< PulmonaryCapillariesWedgePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryCapillariesWedgePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryDiastolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryDiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryDiastolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryDiastolicArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryDiastolicArterialPressure_type > r (
                    dynamic_cast< PulmonaryDiastolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryDiastolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanArterialPressure_)
                {
                  ::std::unique_ptr< PulmonaryMeanArterialPressure_type > r (
                    dynamic_cast< PulmonaryMeanArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanCapillaryFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanCapillaryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanCapillaryFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanCapillaryFlow_)
                {
                  ::std::unique_ptr< PulmonaryMeanCapillaryFlow_type > r (
                    dynamic_cast< PulmonaryMeanCapillaryFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanCapillaryFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryMeanShuntFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryMeanShuntFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryMeanShuntFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryMeanShuntFlow_)
                {
                  ::std::unique_ptr< PulmonaryMeanShuntFlow_type > r (
                    dynamic_cast< PulmonaryMeanShuntFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryMeanShuntFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonarySystolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonarySystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonarySystolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonarySystolicArterialPressure_)
                {
                  ::std::unique_ptr< PulmonarySystolicArterialPressure_type > r (
                    dynamic_cast< PulmonarySystolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonarySystolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVascularResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVascularResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVascularResistance_)
                {
                  ::std::unique_ptr< PulmonaryVascularResistance_type > r (
                    dynamic_cast< PulmonaryVascularResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVascularResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulmonaryVascularResistanceIndex
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulmonaryVascularResistanceIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulmonaryVascularResistanceIndex_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulmonaryVascularResistanceIndex_)
                {
                  ::std::unique_ptr< PulmonaryVascularResistanceIndex_type > r (
                    dynamic_cast< PulmonaryVascularResistanceIndex_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulmonaryVascularResistanceIndex_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulsePressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulsePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulsePressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulsePressure_)
                {
                  ::std::unique_ptr< PulsePressure_type > r (
                    dynamic_cast< PulsePressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulsePressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystemicVascularResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystemicVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystemicVascularResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystemicVascularResistance_)
                {
                  ::std::unique_ptr< SystemicVascularResistance_type > r (
                    dynamic_cast< SystemicVascularResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystemicVascularResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystolicArterialPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystolicArterialPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystolicArterialPressure_)
                {
                  ::std::unique_ptr< SystolicArterialPressure_type > r (
                    dynamic_cast< SystolicArterialPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystolicArterialPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CardiovascularSystemData* CardiovascularSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CardiovascularSystemData (*this, f, c);
        }

        CardiovascularSystemData& CardiovascularSystemData::
        operator= (const CardiovascularSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->ArterialPressure_ = x.ArterialPressure_;
            this->BloodVolume_ = x.BloodVolume_;
            this->CardiacIndex_ = x.CardiacIndex_;
            this->CardiacOutput_ = x.CardiacOutput_;
            this->CentralVenousPressure_ = x.CentralVenousPressure_;
            this->CerebralBloodFlow_ = x.CerebralBloodFlow_;
            this->CerebralPerfusionPressure_ = x.CerebralPerfusionPressure_;
            this->DiastolicArterialPressure_ = x.DiastolicArterialPressure_;
            this->HeartEjectionFraction_ = x.HeartEjectionFraction_;
            this->HeartRate_ = x.HeartRate_;
            this->HeartRhythm_ = x.HeartRhythm_;
            this->HeartStrokeVolume_ = x.HeartStrokeVolume_;
            this->IntracranialPressure_ = x.IntracranialPressure_;
            this->MeanArterialPressure_ = x.MeanArterialPressure_;
            this->MeanArterialCarbonDioxidePartialPressure_ = x.MeanArterialCarbonDioxidePartialPressure_;
            this->MeanArterialCarbonDioxidePartialPressureDelta_ = x.MeanArterialCarbonDioxidePartialPressureDelta_;
            this->MeanCentralVenousPressure_ = x.MeanCentralVenousPressure_;
            this->MeanSkinFlow_ = x.MeanSkinFlow_;
            this->PulmonaryArterialPressure_ = x.PulmonaryArterialPressure_;
            this->PulmonaryCapillariesWedgePressure_ = x.PulmonaryCapillariesWedgePressure_;
            this->PulmonaryDiastolicArterialPressure_ = x.PulmonaryDiastolicArterialPressure_;
            this->PulmonaryMeanArterialPressure_ = x.PulmonaryMeanArterialPressure_;
            this->PulmonaryMeanCapillaryFlow_ = x.PulmonaryMeanCapillaryFlow_;
            this->PulmonaryMeanShuntFlow_ = x.PulmonaryMeanShuntFlow_;
            this->PulmonarySystolicArterialPressure_ = x.PulmonarySystolicArterialPressure_;
            this->PulmonaryVascularResistance_ = x.PulmonaryVascularResistance_;
            this->PulmonaryVascularResistanceIndex_ = x.PulmonaryVascularResistanceIndex_;
            this->PulsePressure_ = x.PulsePressure_;
            this->SystemicVascularResistance_ = x.SystemicVascularResistance_;
            this->SystolicArterialPressure_ = x.SystolicArterialPressure_;
          }

          return *this;
        }

        CardiovascularSystemData::
        ~CardiovascularSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_type_factory_init (
          "CardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CardiovascularSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ArterialPressure ())
            {
              o << ::std::endl << "ArterialPressure: ";
              om.insert (o, *i.ArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BloodVolume ())
            {
              o << ::std::endl << "BloodVolume: ";
              om.insert (o, *i.BloodVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiacIndex ())
            {
              o << ::std::endl << "CardiacIndex: ";
              om.insert (o, *i.CardiacIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CardiacOutput ())
            {
              o << ::std::endl << "CardiacOutput: ";
              om.insert (o, *i.CardiacOutput ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralVenousPressure ())
            {
              o << ::std::endl << "CentralVenousPressure: ";
              om.insert (o, *i.CentralVenousPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CerebralBloodFlow ())
            {
              o << ::std::endl << "CerebralBloodFlow: ";
              om.insert (o, *i.CerebralBloodFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CerebralPerfusionPressure ())
            {
              o << ::std::endl << "CerebralPerfusionPressure: ";
              om.insert (o, *i.CerebralPerfusionPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DiastolicArterialPressure ())
            {
              o << ::std::endl << "DiastolicArterialPressure: ";
              om.insert (o, *i.DiastolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartEjectionFraction ())
            {
              o << ::std::endl << "HeartEjectionFraction: ";
              om.insert (o, *i.HeartEjectionFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRate ())
            {
              o << ::std::endl << "HeartRate: ";
              om.insert (o, *i.HeartRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRhythm ())
            {
              o << ::std::endl << "HeartRhythm: ";
              om.insert (o, *i.HeartRhythm ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartStrokeVolume ())
            {
              o << ::std::endl << "HeartStrokeVolume: ";
              om.insert (o, *i.HeartStrokeVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.IntracranialPressure ())
            {
              o << ::std::endl << "IntracranialPressure: ";
              om.insert (o, *i.IntracranialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialPressure ())
            {
              o << ::std::endl << "MeanArterialPressure: ";
              om.insert (o, *i.MeanArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressure ())
            {
              o << ::std::endl << "MeanArterialCarbonDioxidePartialPressure: ";
              om.insert (o, *i.MeanArterialCarbonDioxidePartialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressureDelta ())
            {
              o << ::std::endl << "MeanArterialCarbonDioxidePartialPressureDelta: ";
              om.insert (o, *i.MeanArterialCarbonDioxidePartialPressureDelta ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanCentralVenousPressure ())
            {
              o << ::std::endl << "MeanCentralVenousPressure: ";
              om.insert (o, *i.MeanCentralVenousPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanSkinFlow ())
            {
              o << ::std::endl << "MeanSkinFlow: ";
              om.insert (o, *i.MeanSkinFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryArterialPressure ())
            {
              o << ::std::endl << "PulmonaryArterialPressure: ";
              om.insert (o, *i.PulmonaryArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryCapillariesWedgePressure ())
            {
              o << ::std::endl << "PulmonaryCapillariesWedgePressure: ";
              om.insert (o, *i.PulmonaryCapillariesWedgePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryDiastolicArterialPressure ())
            {
              o << ::std::endl << "PulmonaryDiastolicArterialPressure: ";
              om.insert (o, *i.PulmonaryDiastolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanArterialPressure ())
            {
              o << ::std::endl << "PulmonaryMeanArterialPressure: ";
              om.insert (o, *i.PulmonaryMeanArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanCapillaryFlow ())
            {
              o << ::std::endl << "PulmonaryMeanCapillaryFlow: ";
              om.insert (o, *i.PulmonaryMeanCapillaryFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryMeanShuntFlow ())
            {
              o << ::std::endl << "PulmonaryMeanShuntFlow: ";
              om.insert (o, *i.PulmonaryMeanShuntFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonarySystolicArterialPressure ())
            {
              o << ::std::endl << "PulmonarySystolicArterialPressure: ";
              om.insert (o, *i.PulmonarySystolicArterialPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistance ())
            {
              o << ::std::endl << "PulmonaryVascularResistance: ";
              om.insert (o, *i.PulmonaryVascularResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistanceIndex ())
            {
              o << ::std::endl << "PulmonaryVascularResistanceIndex: ";
              om.insert (o, *i.PulmonaryVascularResistanceIndex ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulsePressure ())
            {
              o << ::std::endl << "PulsePressure: ";
              om.insert (o, *i.PulsePressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystemicVascularResistance ())
            {
              o << ::std::endl << "SystemicVascularResistance: ";
              om.insert (o, *i.SystemicVascularResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystolicArterialPressure ())
            {
              o << ::std::endl << "SystolicArterialPressure: ";
              om.insert (o, *i.SystolicArterialPressure ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CardiovascularSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // ArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ArterialPressure ())
            {
              const CardiovascularSystemData::ArterialPressure_type& x (*i.ArterialPressure ());
              if (typeid (CardiovascularSystemData::ArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BloodVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BloodVolume ())
            {
              const CardiovascularSystemData::BloodVolume_type& x (*i.BloodVolume ());
              if (typeid (CardiovascularSystemData::BloodVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BloodVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BloodVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiacIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiacIndex ())
            {
              const CardiovascularSystemData::CardiacIndex_type& x (*i.CardiacIndex ());
              if (typeid (CardiovascularSystemData::CardiacIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiacIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiacIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CardiacOutput
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CardiacOutput ())
            {
              const CardiovascularSystemData::CardiacOutput_type& x (*i.CardiacOutput ());
              if (typeid (CardiovascularSystemData::CardiacOutput_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CardiacOutput",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CardiacOutput",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CentralVenousPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralVenousPressure ())
            {
              const CardiovascularSystemData::CentralVenousPressure_type& x (*i.CentralVenousPressure ());
              if (typeid (CardiovascularSystemData::CentralVenousPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralVenousPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CerebralBloodFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CerebralBloodFlow ())
            {
              const CardiovascularSystemData::CerebralBloodFlow_type& x (*i.CerebralBloodFlow ());
              if (typeid (CardiovascularSystemData::CerebralBloodFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CerebralBloodFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CerebralBloodFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CerebralPerfusionPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CerebralPerfusionPressure ())
            {
              const CardiovascularSystemData::CerebralPerfusionPressure_type& x (*i.CerebralPerfusionPressure ());
              if (typeid (CardiovascularSystemData::CerebralPerfusionPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CerebralPerfusionPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CerebralPerfusionPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DiastolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DiastolicArterialPressure ())
            {
              const CardiovascularSystemData::DiastolicArterialPressure_type& x (*i.DiastolicArterialPressure ());
              if (typeid (CardiovascularSystemData::DiastolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DiastolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartEjectionFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartEjectionFraction ())
            {
              const CardiovascularSystemData::HeartEjectionFraction_type& x (*i.HeartEjectionFraction ());
              if (typeid (CardiovascularSystemData::HeartEjectionFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartEjectionFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartEjectionFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRate ())
            {
              const CardiovascularSystemData::HeartRate_type& x (*i.HeartRate ());
              if (typeid (CardiovascularSystemData::HeartRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRhythm
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRhythm ())
            {
              const CardiovascularSystemData::HeartRhythm_type& x (*i.HeartRhythm ());
              if (typeid (CardiovascularSystemData::HeartRhythm_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRhythm",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRhythm",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartStrokeVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartStrokeVolume ())
            {
              const CardiovascularSystemData::HeartStrokeVolume_type& x (*i.HeartStrokeVolume ());
              if (typeid (CardiovascularSystemData::HeartStrokeVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartStrokeVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartStrokeVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // IntracranialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.IntracranialPressure ())
            {
              const CardiovascularSystemData::IntracranialPressure_type& x (*i.IntracranialPressure ());
              if (typeid (CardiovascularSystemData::IntracranialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "IntracranialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "IntracranialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialPressure ())
            {
              const CardiovascularSystemData::MeanArterialPressure_type& x (*i.MeanArterialPressure ());
              if (typeid (CardiovascularSystemData::MeanArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialCarbonDioxidePartialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressure ())
            {
              const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_type& x (*i.MeanArterialCarbonDioxidePartialPressure ());
              if (typeid (CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialCarbonDioxidePartialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialCarbonDioxidePartialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanArterialCarbonDioxidePartialPressureDelta
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanArterialCarbonDioxidePartialPressureDelta ())
            {
              const CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_type& x (*i.MeanArterialCarbonDioxidePartialPressureDelta ());
              if (typeid (CardiovascularSystemData::MeanArterialCarbonDioxidePartialPressureDelta_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanArterialCarbonDioxidePartialPressureDelta",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanArterialCarbonDioxidePartialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanCentralVenousPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanCentralVenousPressure ())
            {
              const CardiovascularSystemData::MeanCentralVenousPressure_type& x (*i.MeanCentralVenousPressure ());
              if (typeid (CardiovascularSystemData::MeanCentralVenousPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanCentralVenousPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanCentralVenousPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanSkinFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanSkinFlow ())
            {
              const CardiovascularSystemData::MeanSkinFlow_type& x (*i.MeanSkinFlow ());
              if (typeid (CardiovascularSystemData::MeanSkinFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanSkinFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanSkinFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryArterialPressure_type& x (*i.PulmonaryArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryCapillariesWedgePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryCapillariesWedgePressure ())
            {
              const CardiovascularSystemData::PulmonaryCapillariesWedgePressure_type& x (*i.PulmonaryCapillariesWedgePressure ());
              if (typeid (CardiovascularSystemData::PulmonaryCapillariesWedgePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryCapillariesWedgePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryCapillariesWedgePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryDiastolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryDiastolicArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryDiastolicArterialPressure_type& x (*i.PulmonaryDiastolicArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryDiastolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryDiastolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryDiastolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanArterialPressure ())
            {
              const CardiovascularSystemData::PulmonaryMeanArterialPressure_type& x (*i.PulmonaryMeanArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanCapillaryFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanCapillaryFlow ())
            {
              const CardiovascularSystemData::PulmonaryMeanCapillaryFlow_type& x (*i.PulmonaryMeanCapillaryFlow ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanCapillaryFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanCapillaryFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanCapillaryFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryMeanShuntFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryMeanShuntFlow ())
            {
              const CardiovascularSystemData::PulmonaryMeanShuntFlow_type& x (*i.PulmonaryMeanShuntFlow ());
              if (typeid (CardiovascularSystemData::PulmonaryMeanShuntFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryMeanShuntFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryMeanShuntFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonarySystolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonarySystolicArterialPressure ())
            {
              const CardiovascularSystemData::PulmonarySystolicArterialPressure_type& x (*i.PulmonarySystolicArterialPressure ());
              if (typeid (CardiovascularSystemData::PulmonarySystolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonarySystolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonarySystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVascularResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistance ())
            {
              const CardiovascularSystemData::PulmonaryVascularResistance_type& x (*i.PulmonaryVascularResistance ());
              if (typeid (CardiovascularSystemData::PulmonaryVascularResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVascularResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulmonaryVascularResistanceIndex
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulmonaryVascularResistanceIndex ())
            {
              const CardiovascularSystemData::PulmonaryVascularResistanceIndex_type& x (*i.PulmonaryVascularResistanceIndex ());
              if (typeid (CardiovascularSystemData::PulmonaryVascularResistanceIndex_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulmonaryVascularResistanceIndex",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulmonaryVascularResistanceIndex",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulsePressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulsePressure ())
            {
              const CardiovascularSystemData::PulsePressure_type& x (*i.PulsePressure ());
              if (typeid (CardiovascularSystemData::PulsePressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulsePressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulsePressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystemicVascularResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystemicVascularResistance ())
            {
              const CardiovascularSystemData::SystemicVascularResistance_type& x (*i.SystemicVascularResistance ());
              if (typeid (CardiovascularSystemData::SystemicVascularResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystemicVascularResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystemicVascularResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystolicArterialPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystolicArterialPressure ())
            {
              const CardiovascularSystemData::SystolicArterialPressure_type& x (*i.SystolicArterialPressure ());
              if (typeid (CardiovascularSystemData::SystolicArterialPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystolicArterialPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystolicArterialPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CardiovascularSystemData >
        _xsd_CardiovascularSystemData_type_serializer_init (
          "CardiovascularSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


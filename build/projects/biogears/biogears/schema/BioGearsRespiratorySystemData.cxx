// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BioGearsRespiratorySystemData.hxx"

#include "RunningAverageData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsRespiratorySystemData
        // 

        const BioGearsRespiratorySystemData::InitialExpiratoryReserveVolume_L_type& BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L () const
        {
          return this->InitialExpiratoryReserveVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialExpiratoryReserveVolume_L_type& BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L ()
        {
          return this->InitialExpiratoryReserveVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialExpiratoryReserveVolume_L (const InitialExpiratoryReserveVolume_L_type& x)
        {
          this->InitialExpiratoryReserveVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L () const
        {
          return this->InitialFunctionalResidualCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L ()
        {
          return this->InitialFunctionalResidualCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialFunctionalResidualCapacity_L (const InitialFunctionalResidualCapacity_L_type& x)
        {
          this->InitialFunctionalResidualCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialInspiratoryCapacity_L_type& BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L () const
        {
          return this->InitialInspiratoryCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialInspiratoryCapacity_L_type& BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L ()
        {
          return this->InitialInspiratoryCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialInspiratoryCapacity_L (const InitialInspiratoryCapacity_L_type& x)
        {
          this->InitialInspiratoryCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::InitialResidualVolume_L_type& BioGearsRespiratorySystemData::
        InitialResidualVolume_L () const
        {
          return this->InitialResidualVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::InitialResidualVolume_L_type& BioGearsRespiratorySystemData::
        InitialResidualVolume_L ()
        {
          return this->InitialResidualVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InitialResidualVolume_L (const InitialResidualVolume_L_type& x)
        {
          this->InitialResidualVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::NotBreathing_type& BioGearsRespiratorySystemData::
        NotBreathing () const
        {
          return this->NotBreathing_.get ();
        }

        BioGearsRespiratorySystemData::NotBreathing_type& BioGearsRespiratorySystemData::
        NotBreathing ()
        {
          return this->NotBreathing_.get ();
        }

        void BioGearsRespiratorySystemData::
        NotBreathing (const NotBreathing_type& x)
        {
          this->NotBreathing_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathTotalVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L () const
        {
          return this->TopBreathTotalVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathTotalVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L ()
        {
          return this->TopBreathTotalVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathTotalVolume_L (const TopBreathTotalVolume_L_type& x)
        {
          this->TopBreathTotalVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathAlveoliVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L () const
        {
          return this->TopBreathAlveoliVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathAlveoliVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L ()
        {
          return this->TopBreathAlveoliVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathAlveoliVolume_L (const TopBreathAlveoliVolume_L_type& x)
        {
          this->TopBreathAlveoliVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathDeadSpaceVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L () const
        {
          return this->TopBreathDeadSpaceVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathDeadSpaceVolume_L_type& BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L ()
        {
          return this->TopBreathDeadSpaceVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathDeadSpaceVolume_L (const TopBreathDeadSpaceVolume_L_type& x)
        {
          this->TopBreathDeadSpaceVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::TopBreathPleuralPressure_cmH2O_type& BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O () const
        {
          return this->TopBreathPleuralPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::TopBreathPleuralPressure_cmH2O_type& BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O ()
        {
          return this->TopBreathPleuralPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        TopBreathPleuralPressure_cmH2O (const TopBreathPleuralPressure_cmH2O_type& x)
        {
          this->TopBreathPleuralPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::LastCardiacCycleBloodPH_type& BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH () const
        {
          return this->LastCardiacCycleBloodPH_.get ();
        }

        BioGearsRespiratorySystemData::LastCardiacCycleBloodPH_type& BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH ()
        {
          return this->LastCardiacCycleBloodPH_.get ();
        }

        void BioGearsRespiratorySystemData::
        LastCardiacCycleBloodPH (const LastCardiacCycleBloodPH_type& x)
        {
          this->LastCardiacCycleBloodPH_.set (x);
        }

        const BioGearsRespiratorySystemData::PreviousTotalLungVolume_L_type& BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L () const
        {
          return this->PreviousTotalLungVolume_L_.get ();
        }

        BioGearsRespiratorySystemData::PreviousTotalLungVolume_L_type& BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L ()
        {
          return this->PreviousTotalLungVolume_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        PreviousTotalLungVolume_L (const PreviousTotalLungVolume_L_type& x)
        {
          this->PreviousTotalLungVolume_L_.set (x);
        }

        const BioGearsRespiratorySystemData::BloodPHRunningAverage_type& BioGearsRespiratorySystemData::
        BloodPHRunningAverage () const
        {
          return this->BloodPHRunningAverage_.get ();
        }

        BioGearsRespiratorySystemData::BloodPHRunningAverage_type& BioGearsRespiratorySystemData::
        BloodPHRunningAverage ()
        {
          return this->BloodPHRunningAverage_.get ();
        }

        void BioGearsRespiratorySystemData::
        BloodPHRunningAverage (const BloodPHRunningAverage_type& x)
        {
          this->BloodPHRunningAverage_.set (x);
        }

        void BioGearsRespiratorySystemData::
        BloodPHRunningAverage (::std::unique_ptr< BloodPHRunningAverage_type > x)
        {
          this->BloodPHRunningAverage_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::BreathingCycle_type& BioGearsRespiratorySystemData::
        BreathingCycle () const
        {
          return this->BreathingCycle_.get ();
        }

        BioGearsRespiratorySystemData::BreathingCycle_type& BioGearsRespiratorySystemData::
        BreathingCycle ()
        {
          return this->BreathingCycle_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathingCycle (const BreathingCycle_type& x)
        {
          this->BreathingCycle_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialO2PartialPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialO2PartialPressure_mmHg () const
        {
          return this->ArterialO2PartialPressure_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialO2PartialPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialO2PartialPressure_mmHg ()
        {
          return this->ArterialO2PartialPressure_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialO2PartialPressure_mmHg (const ArterialO2PartialPressure_mmHg_type& x)
        {
          this->ArterialO2PartialPressure_mmHg_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialCO2PartialPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCO2PartialPressure_mmHg () const
        {
          return this->ArterialCO2PartialPressure_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialCO2PartialPressure_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCO2PartialPressure_mmHg ()
        {
          return this->ArterialCO2PartialPressure_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialCO2PartialPressure_mmHg (const ArterialCO2PartialPressure_mmHg_type& x)
        {
          this->ArterialCO2PartialPressure_mmHg_.set (x);
        }

        const BioGearsRespiratorySystemData::BreathingCycleTime_s_type& BioGearsRespiratorySystemData::
        BreathingCycleTime_s () const
        {
          return this->BreathingCycleTime_s_.get ();
        }

        BioGearsRespiratorySystemData::BreathingCycleTime_s_type& BioGearsRespiratorySystemData::
        BreathingCycleTime_s ()
        {
          return this->BreathingCycleTime_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathingCycleTime_s (const BreathingCycleTime_s_type& x)
        {
          this->BreathingCycleTime_s_.set (x);
        }

        const BioGearsRespiratorySystemData::BreathTimeExhale_min_type& BioGearsRespiratorySystemData::
        BreathTimeExhale_min () const
        {
          return this->BreathTimeExhale_min_.get ();
        }

        BioGearsRespiratorySystemData::BreathTimeExhale_min_type& BioGearsRespiratorySystemData::
        BreathTimeExhale_min ()
        {
          return this->BreathTimeExhale_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        BreathTimeExhale_min (const BreathTimeExhale_min_type& x)
        {
          this->BreathTimeExhale_min_.set (x);
        }

        const BioGearsRespiratorySystemData::DefaultDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O () const
        {
          return this->DefaultDrivePressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DefaultDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O ()
        {
          return this->DefaultDrivePressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DefaultDrivePressure_cmH2O (const DefaultDrivePressure_cmH2O_type& x)
        {
          this->DefaultDrivePressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::DriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressure_cmH2O () const
        {
          return this->DriverPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressure_cmH2O ()
        {
          return this->DriverPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DriverPressure_cmH2O (const DriverPressure_cmH2O_type& x)
        {
          this->DriverPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::DriverPressureMin_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O () const
        {
          return this->DriverPressureMin_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::DriverPressureMin_cmH2O_type& BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O ()
        {
          return this->DriverPressureMin_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        DriverPressureMin_cmH2O (const DriverPressureMin_cmH2O_type& x)
        {
          this->DriverPressureMin_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::ElapsedBreathingCycleTime_min_type& BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min () const
        {
          return this->ElapsedBreathingCycleTime_min_.get ();
        }

        BioGearsRespiratorySystemData::ElapsedBreathingCycleTime_min_type& BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min ()
        {
          return this->ElapsedBreathingCycleTime_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        ElapsedBreathingCycleTime_min (const ElapsedBreathingCycleTime_min_type& x)
        {
          this->ElapsedBreathingCycleTime_min_.set (x);
        }

        const BioGearsRespiratorySystemData::IEscaleFactor_type& BioGearsRespiratorySystemData::
        IEscaleFactor () const
        {
          return this->IEscaleFactor_.get ();
        }

        BioGearsRespiratorySystemData::IEscaleFactor_type& BioGearsRespiratorySystemData::
        IEscaleFactor ()
        {
          return this->IEscaleFactor_.get ();
        }

        void BioGearsRespiratorySystemData::
        IEscaleFactor (const IEscaleFactor_type& x)
        {
          this->IEscaleFactor_.set (x);
        }

        const BioGearsRespiratorySystemData::InstantaneousFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L () const
        {
          return this->InstantaneousFunctionalResidualCapacity_L_.get ();
        }

        BioGearsRespiratorySystemData::InstantaneousFunctionalResidualCapacity_L_type& BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L ()
        {
          return this->InstantaneousFunctionalResidualCapacity_L_.get ();
        }

        void BioGearsRespiratorySystemData::
        InstantaneousFunctionalResidualCapacity_L (const InstantaneousFunctionalResidualCapacity_L_type& x)
        {
          this->InstantaneousFunctionalResidualCapacity_L_.set (x);
        }

        const BioGearsRespiratorySystemData::MaxDriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O () const
        {
          return this->MaxDriverPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::MaxDriverPressure_cmH2O_type& BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O ()
        {
          return this->MaxDriverPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        MaxDriverPressure_cmH2O (const MaxDriverPressure_cmH2O_type& x)
        {
          this->MaxDriverPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::PeakRespiratoryDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O () const
        {
          return this->PeakRespiratoryDrivePressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::PeakRespiratoryDrivePressure_cmH2O_type& BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O ()
        {
          return this->PeakRespiratoryDrivePressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        PeakRespiratoryDrivePressure_cmH2O (const PeakRespiratoryDrivePressure_cmH2O_type& x)
        {
          this->PeakRespiratoryDrivePressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::PreviousTargetAlveolarVentilation_L_Per_min_type& BioGearsRespiratorySystemData::
        PreviousTargetAlveolarVentilation_L_Per_min () const
        {
          return this->PreviousTargetAlveolarVentilation_L_Per_min_.get ();
        }

        BioGearsRespiratorySystemData::PreviousTargetAlveolarVentilation_L_Per_min_type& BioGearsRespiratorySystemData::
        PreviousTargetAlveolarVentilation_L_Per_min ()
        {
          return this->PreviousTargetAlveolarVentilation_L_Per_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        PreviousTargetAlveolarVentilation_L_Per_min (const PreviousTargetAlveolarVentilation_L_Per_min_type& x)
        {
          this->PreviousTargetAlveolarVentilation_L_Per_min_.set (x);
        }

        const BioGearsRespiratorySystemData::VentilationFrequency_Per_min_type& BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min () const
        {
          return this->VentilationFrequency_Per_min_.get ();
        }

        BioGearsRespiratorySystemData::VentilationFrequency_Per_min_type& BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min ()
        {
          return this->VentilationFrequency_Per_min_.get ();
        }

        void BioGearsRespiratorySystemData::
        VentilationFrequency_Per_min (const VentilationFrequency_Per_min_type& x)
        {
          this->VentilationFrequency_Per_min_.set (x);
        }

        const BioGearsRespiratorySystemData::VentilationToTidalVolumeSlope_type& BioGearsRespiratorySystemData::
        VentilationToTidalVolumeSlope () const
        {
          return this->VentilationToTidalVolumeSlope_.get ();
        }

        BioGearsRespiratorySystemData::VentilationToTidalVolumeSlope_type& BioGearsRespiratorySystemData::
        VentilationToTidalVolumeSlope ()
        {
          return this->VentilationToTidalVolumeSlope_.get ();
        }

        void BioGearsRespiratorySystemData::
        VentilationToTidalVolumeSlope (const VentilationToTidalVolumeSlope_type& x)
        {
          this->VentilationToTidalVolumeSlope_.set (x);
        }

        const BioGearsRespiratorySystemData::ArterialO2RunningAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialO2RunningAverage_mmHg () const
        {
          return this->ArterialO2RunningAverage_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialO2RunningAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialO2RunningAverage_mmHg ()
        {
          return this->ArterialO2RunningAverage_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialO2RunningAverage_mmHg (const ArterialO2RunningAverage_mmHg_type& x)
        {
          this->ArterialO2RunningAverage_mmHg_.set (x);
        }

        void BioGearsRespiratorySystemData::
        ArterialO2RunningAverage_mmHg (::std::unique_ptr< ArterialO2RunningAverage_mmHg_type > x)
        {
          this->ArterialO2RunningAverage_mmHg_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::ArterialCO2RunningAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCO2RunningAverage_mmHg () const
        {
          return this->ArterialCO2RunningAverage_mmHg_.get ();
        }

        BioGearsRespiratorySystemData::ArterialCO2RunningAverage_mmHg_type& BioGearsRespiratorySystemData::
        ArterialCO2RunningAverage_mmHg ()
        {
          return this->ArterialCO2RunningAverage_mmHg_.get ();
        }

        void BioGearsRespiratorySystemData::
        ArterialCO2RunningAverage_mmHg (const ArterialCO2RunningAverage_mmHg_type& x)
        {
          this->ArterialCO2RunningAverage_mmHg_.set (x);
        }

        void BioGearsRespiratorySystemData::
        ArterialCO2RunningAverage_mmHg (::std::unique_ptr< ArterialCO2RunningAverage_mmHg_type > x)
        {
          this->ArterialCO2RunningAverage_mmHg_.set (std::move (x));
        }

        const BioGearsRespiratorySystemData::ConsciousBreathing_type& BioGearsRespiratorySystemData::
        ConsciousBreathing () const
        {
          return this->ConsciousBreathing_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousBreathing_type& BioGearsRespiratorySystemData::
        ConsciousBreathing ()
        {
          return this->ConsciousBreathing_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousBreathing (const ConsciousBreathing_type& x)
        {
          this->ConsciousBreathing_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousRespirationPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s () const
        {
          return this->ConsciousRespirationPeriod_s_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousRespirationPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s ()
        {
          return this->ConsciousRespirationPeriod_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousRespirationPeriod_s (const ConsciousRespirationPeriod_s_type& x)
        {
          this->ConsciousRespirationPeriod_s_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousRespirationRemainingPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s () const
        {
          return this->ConsciousRespirationRemainingPeriod_s_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousRespirationRemainingPeriod_s_type& BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s ()
        {
          return this->ConsciousRespirationRemainingPeriod_s_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousRespirationRemainingPeriod_s (const ConsciousRespirationRemainingPeriod_s_type& x)
        {
          this->ConsciousRespirationRemainingPeriod_s_.set (x);
        }

        const BioGearsRespiratorySystemData::ExpiratoryReserveVolumeFraction_type& BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction () const
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        BioGearsRespiratorySystemData::ExpiratoryReserveVolumeFraction_type& BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction ()
        {
          return this->ExpiratoryReserveVolumeFraction_.get ();
        }

        void BioGearsRespiratorySystemData::
        ExpiratoryReserveVolumeFraction (const ExpiratoryReserveVolumeFraction_type& x)
        {
          this->ExpiratoryReserveVolumeFraction_.set (x);
        }

        const BioGearsRespiratorySystemData::InspiratoryCapacityFraction_type& BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction () const
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        BioGearsRespiratorySystemData::InspiratoryCapacityFraction_type& BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction ()
        {
          return this->InspiratoryCapacityFraction_.get ();
        }

        void BioGearsRespiratorySystemData::
        InspiratoryCapacityFraction (const InspiratoryCapacityFraction_type& x)
        {
          this->InspiratoryCapacityFraction_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousStartPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O () const
        {
          return this->ConsciousStartPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousStartPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O ()
        {
          return this->ConsciousStartPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousStartPressure_cmH2O (const ConsciousStartPressure_cmH2O_type& x)
        {
          this->ConsciousStartPressure_cmH2O_.set (x);
        }

        const BioGearsRespiratorySystemData::ConsciousEndPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O () const
        {
          return this->ConsciousEndPressure_cmH2O_.get ();
        }

        BioGearsRespiratorySystemData::ConsciousEndPressure_cmH2O_type& BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O ()
        {
          return this->ConsciousEndPressure_cmH2O_.get ();
        }

        void BioGearsRespiratorySystemData::
        ConsciousEndPressure_cmH2O (const ConsciousEndPressure_cmH2O_type& x)
        {
          this->ConsciousEndPressure_cmH2O_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BioGearsRespiratorySystemData
        //

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData ()
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (this),
          InitialFunctionalResidualCapacity_L_ (this),
          InitialInspiratoryCapacity_L_ (this),
          InitialResidualVolume_L_ (this),
          NotBreathing_ (this),
          TopBreathTotalVolume_L_ (this),
          TopBreathAlveoliVolume_L_ (this),
          TopBreathDeadSpaceVolume_L_ (this),
          TopBreathPleuralPressure_cmH2O_ (this),
          LastCardiacCycleBloodPH_ (this),
          PreviousTotalLungVolume_L_ (this),
          BloodPHRunningAverage_ (this),
          BreathingCycle_ (this),
          ArterialO2PartialPressure_mmHg_ (this),
          ArterialCO2PartialPressure_mmHg_ (this),
          BreathingCycleTime_s_ (this),
          BreathTimeExhale_min_ (this),
          DefaultDrivePressure_cmH2O_ (this),
          DriverPressure_cmH2O_ (this),
          DriverPressureMin_cmH2O_ (this),
          ElapsedBreathingCycleTime_min_ (this),
          IEscaleFactor_ (this),
          InstantaneousFunctionalResidualCapacity_L_ (this),
          MaxDriverPressure_cmH2O_ (this),
          PeakRespiratoryDrivePressure_cmH2O_ (this),
          PreviousTargetAlveolarVentilation_L_Per_min_ (this),
          VentilationFrequency_Per_min_ (this),
          VentilationToTidalVolumeSlope_ (this),
          ArterialO2RunningAverage_mmHg_ (this),
          ArterialCO2RunningAverage_mmHg_ (this),
          ConsciousBreathing_ (this),
          ConsciousRespirationPeriod_s_ (this),
          ConsciousRespirationRemainingPeriod_s_ (this),
          ExpiratoryReserveVolumeFraction_ (this),
          InspiratoryCapacityFraction_ (this),
          ConsciousStartPressure_cmH2O_ (this),
          ConsciousEndPressure_cmH2O_ (this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type& InitialExpiratoryReserveVolume_L,
                                       const InitialFunctionalResidualCapacity_L_type& InitialFunctionalResidualCapacity_L,
                                       const InitialInspiratoryCapacity_L_type& InitialInspiratoryCapacity_L,
                                       const InitialResidualVolume_L_type& InitialResidualVolume_L,
                                       const NotBreathing_type& NotBreathing,
                                       const TopBreathTotalVolume_L_type& TopBreathTotalVolume_L,
                                       const TopBreathAlveoliVolume_L_type& TopBreathAlveoliVolume_L,
                                       const TopBreathDeadSpaceVolume_L_type& TopBreathDeadSpaceVolume_L,
                                       const TopBreathPleuralPressure_cmH2O_type& TopBreathPleuralPressure_cmH2O,
                                       const LastCardiacCycleBloodPH_type& LastCardiacCycleBloodPH,
                                       const PreviousTotalLungVolume_L_type& PreviousTotalLungVolume_L,
                                       const BloodPHRunningAverage_type& BloodPHRunningAverage,
                                       const BreathingCycle_type& BreathingCycle,
                                       const ArterialO2PartialPressure_mmHg_type& ArterialO2PartialPressure_mmHg,
                                       const ArterialCO2PartialPressure_mmHg_type& ArterialCO2PartialPressure_mmHg,
                                       const BreathingCycleTime_s_type& BreathingCycleTime_s,
                                       const BreathTimeExhale_min_type& BreathTimeExhale_min,
                                       const DefaultDrivePressure_cmH2O_type& DefaultDrivePressure_cmH2O,
                                       const DriverPressure_cmH2O_type& DriverPressure_cmH2O,
                                       const DriverPressureMin_cmH2O_type& DriverPressureMin_cmH2O,
                                       const ElapsedBreathingCycleTime_min_type& ElapsedBreathingCycleTime_min,
                                       const IEscaleFactor_type& IEscaleFactor,
                                       const InstantaneousFunctionalResidualCapacity_L_type& InstantaneousFunctionalResidualCapacity_L,
                                       const MaxDriverPressure_cmH2O_type& MaxDriverPressure_cmH2O,
                                       const PeakRespiratoryDrivePressure_cmH2O_type& PeakRespiratoryDrivePressure_cmH2O,
                                       const PreviousTargetAlveolarVentilation_L_Per_min_type& PreviousTargetAlveolarVentilation_L_Per_min,
                                       const VentilationFrequency_Per_min_type& VentilationFrequency_Per_min,
                                       const VentilationToTidalVolumeSlope_type& VentilationToTidalVolumeSlope,
                                       const ArterialO2RunningAverage_mmHg_type& ArterialO2RunningAverage_mmHg,
                                       const ArterialCO2RunningAverage_mmHg_type& ArterialCO2RunningAverage_mmHg,
                                       const ConsciousBreathing_type& ConsciousBreathing,
                                       const ConsciousRespirationPeriod_s_type& ConsciousRespirationPeriod_s,
                                       const ConsciousRespirationRemainingPeriod_s_type& ConsciousRespirationRemainingPeriod_s,
                                       const ExpiratoryReserveVolumeFraction_type& ExpiratoryReserveVolumeFraction,
                                       const InspiratoryCapacityFraction_type& InspiratoryCapacityFraction,
                                       const ConsciousStartPressure_cmH2O_type& ConsciousStartPressure_cmH2O,
                                       const ConsciousEndPressure_cmH2O_type& ConsciousEndPressure_cmH2O)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (InitialExpiratoryReserveVolume_L, this),
          InitialFunctionalResidualCapacity_L_ (InitialFunctionalResidualCapacity_L, this),
          InitialInspiratoryCapacity_L_ (InitialInspiratoryCapacity_L, this),
          InitialResidualVolume_L_ (InitialResidualVolume_L, this),
          NotBreathing_ (NotBreathing, this),
          TopBreathTotalVolume_L_ (TopBreathTotalVolume_L, this),
          TopBreathAlveoliVolume_L_ (TopBreathAlveoliVolume_L, this),
          TopBreathDeadSpaceVolume_L_ (TopBreathDeadSpaceVolume_L, this),
          TopBreathPleuralPressure_cmH2O_ (TopBreathPleuralPressure_cmH2O, this),
          LastCardiacCycleBloodPH_ (LastCardiacCycleBloodPH, this),
          PreviousTotalLungVolume_L_ (PreviousTotalLungVolume_L, this),
          BloodPHRunningAverage_ (BloodPHRunningAverage, this),
          BreathingCycle_ (BreathingCycle, this),
          ArterialO2PartialPressure_mmHg_ (ArterialO2PartialPressure_mmHg, this),
          ArterialCO2PartialPressure_mmHg_ (ArterialCO2PartialPressure_mmHg, this),
          BreathingCycleTime_s_ (BreathingCycleTime_s, this),
          BreathTimeExhale_min_ (BreathTimeExhale_min, this),
          DefaultDrivePressure_cmH2O_ (DefaultDrivePressure_cmH2O, this),
          DriverPressure_cmH2O_ (DriverPressure_cmH2O, this),
          DriverPressureMin_cmH2O_ (DriverPressureMin_cmH2O, this),
          ElapsedBreathingCycleTime_min_ (ElapsedBreathingCycleTime_min, this),
          IEscaleFactor_ (IEscaleFactor, this),
          InstantaneousFunctionalResidualCapacity_L_ (InstantaneousFunctionalResidualCapacity_L, this),
          MaxDriverPressure_cmH2O_ (MaxDriverPressure_cmH2O, this),
          PeakRespiratoryDrivePressure_cmH2O_ (PeakRespiratoryDrivePressure_cmH2O, this),
          PreviousTargetAlveolarVentilation_L_Per_min_ (PreviousTargetAlveolarVentilation_L_Per_min, this),
          VentilationFrequency_Per_min_ (VentilationFrequency_Per_min, this),
          VentilationToTidalVolumeSlope_ (VentilationToTidalVolumeSlope, this),
          ArterialO2RunningAverage_mmHg_ (ArterialO2RunningAverage_mmHg, this),
          ArterialCO2RunningAverage_mmHg_ (ArterialCO2RunningAverage_mmHg, this),
          ConsciousBreathing_ (ConsciousBreathing, this),
          ConsciousRespirationPeriod_s_ (ConsciousRespirationPeriod_s, this),
          ConsciousRespirationRemainingPeriod_s_ (ConsciousRespirationRemainingPeriod_s, this),
          ExpiratoryReserveVolumeFraction_ (ExpiratoryReserveVolumeFraction, this),
          InspiratoryCapacityFraction_ (InspiratoryCapacityFraction, this),
          ConsciousStartPressure_cmH2O_ (ConsciousStartPressure_cmH2O, this),
          ConsciousEndPressure_cmH2O_ (ConsciousEndPressure_cmH2O, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const InitialExpiratoryReserveVolume_L_type& InitialExpiratoryReserveVolume_L,
                                       const InitialFunctionalResidualCapacity_L_type& InitialFunctionalResidualCapacity_L,
                                       const InitialInspiratoryCapacity_L_type& InitialInspiratoryCapacity_L,
                                       const InitialResidualVolume_L_type& InitialResidualVolume_L,
                                       const NotBreathing_type& NotBreathing,
                                       const TopBreathTotalVolume_L_type& TopBreathTotalVolume_L,
                                       const TopBreathAlveoliVolume_L_type& TopBreathAlveoliVolume_L,
                                       const TopBreathDeadSpaceVolume_L_type& TopBreathDeadSpaceVolume_L,
                                       const TopBreathPleuralPressure_cmH2O_type& TopBreathPleuralPressure_cmH2O,
                                       const LastCardiacCycleBloodPH_type& LastCardiacCycleBloodPH,
                                       const PreviousTotalLungVolume_L_type& PreviousTotalLungVolume_L,
                                       ::std::unique_ptr< BloodPHRunningAverage_type > BloodPHRunningAverage,
                                       const BreathingCycle_type& BreathingCycle,
                                       const ArterialO2PartialPressure_mmHg_type& ArterialO2PartialPressure_mmHg,
                                       const ArterialCO2PartialPressure_mmHg_type& ArterialCO2PartialPressure_mmHg,
                                       const BreathingCycleTime_s_type& BreathingCycleTime_s,
                                       const BreathTimeExhale_min_type& BreathTimeExhale_min,
                                       const DefaultDrivePressure_cmH2O_type& DefaultDrivePressure_cmH2O,
                                       const DriverPressure_cmH2O_type& DriverPressure_cmH2O,
                                       const DriverPressureMin_cmH2O_type& DriverPressureMin_cmH2O,
                                       const ElapsedBreathingCycleTime_min_type& ElapsedBreathingCycleTime_min,
                                       const IEscaleFactor_type& IEscaleFactor,
                                       const InstantaneousFunctionalResidualCapacity_L_type& InstantaneousFunctionalResidualCapacity_L,
                                       const MaxDriverPressure_cmH2O_type& MaxDriverPressure_cmH2O,
                                       const PeakRespiratoryDrivePressure_cmH2O_type& PeakRespiratoryDrivePressure_cmH2O,
                                       const PreviousTargetAlveolarVentilation_L_Per_min_type& PreviousTargetAlveolarVentilation_L_Per_min,
                                       const VentilationFrequency_Per_min_type& VentilationFrequency_Per_min,
                                       const VentilationToTidalVolumeSlope_type& VentilationToTidalVolumeSlope,
                                       ::std::unique_ptr< ArterialO2RunningAverage_mmHg_type > ArterialO2RunningAverage_mmHg,
                                       ::std::unique_ptr< ArterialCO2RunningAverage_mmHg_type > ArterialCO2RunningAverage_mmHg,
                                       const ConsciousBreathing_type& ConsciousBreathing,
                                       const ConsciousRespirationPeriod_s_type& ConsciousRespirationPeriod_s,
                                       const ConsciousRespirationRemainingPeriod_s_type& ConsciousRespirationRemainingPeriod_s,
                                       const ExpiratoryReserveVolumeFraction_type& ExpiratoryReserveVolumeFraction,
                                       const InspiratoryCapacityFraction_type& InspiratoryCapacityFraction,
                                       const ConsciousStartPressure_cmH2O_type& ConsciousStartPressure_cmH2O,
                                       const ConsciousEndPressure_cmH2O_type& ConsciousEndPressure_cmH2O)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (),
          InitialExpiratoryReserveVolume_L_ (InitialExpiratoryReserveVolume_L, this),
          InitialFunctionalResidualCapacity_L_ (InitialFunctionalResidualCapacity_L, this),
          InitialInspiratoryCapacity_L_ (InitialInspiratoryCapacity_L, this),
          InitialResidualVolume_L_ (InitialResidualVolume_L, this),
          NotBreathing_ (NotBreathing, this),
          TopBreathTotalVolume_L_ (TopBreathTotalVolume_L, this),
          TopBreathAlveoliVolume_L_ (TopBreathAlveoliVolume_L, this),
          TopBreathDeadSpaceVolume_L_ (TopBreathDeadSpaceVolume_L, this),
          TopBreathPleuralPressure_cmH2O_ (TopBreathPleuralPressure_cmH2O, this),
          LastCardiacCycleBloodPH_ (LastCardiacCycleBloodPH, this),
          PreviousTotalLungVolume_L_ (PreviousTotalLungVolume_L, this),
          BloodPHRunningAverage_ (std::move (BloodPHRunningAverage), this),
          BreathingCycle_ (BreathingCycle, this),
          ArterialO2PartialPressure_mmHg_ (ArterialO2PartialPressure_mmHg, this),
          ArterialCO2PartialPressure_mmHg_ (ArterialCO2PartialPressure_mmHg, this),
          BreathingCycleTime_s_ (BreathingCycleTime_s, this),
          BreathTimeExhale_min_ (BreathTimeExhale_min, this),
          DefaultDrivePressure_cmH2O_ (DefaultDrivePressure_cmH2O, this),
          DriverPressure_cmH2O_ (DriverPressure_cmH2O, this),
          DriverPressureMin_cmH2O_ (DriverPressureMin_cmH2O, this),
          ElapsedBreathingCycleTime_min_ (ElapsedBreathingCycleTime_min, this),
          IEscaleFactor_ (IEscaleFactor, this),
          InstantaneousFunctionalResidualCapacity_L_ (InstantaneousFunctionalResidualCapacity_L, this),
          MaxDriverPressure_cmH2O_ (MaxDriverPressure_cmH2O, this),
          PeakRespiratoryDrivePressure_cmH2O_ (PeakRespiratoryDrivePressure_cmH2O, this),
          PreviousTargetAlveolarVentilation_L_Per_min_ (PreviousTargetAlveolarVentilation_L_Per_min, this),
          VentilationFrequency_Per_min_ (VentilationFrequency_Per_min, this),
          VentilationToTidalVolumeSlope_ (VentilationToTidalVolumeSlope, this),
          ArterialO2RunningAverage_mmHg_ (std::move (ArterialO2RunningAverage_mmHg), this),
          ArterialCO2RunningAverage_mmHg_ (std::move (ArterialCO2RunningAverage_mmHg), this),
          ConsciousBreathing_ (ConsciousBreathing, this),
          ConsciousRespirationPeriod_s_ (ConsciousRespirationPeriod_s, this),
          ConsciousRespirationRemainingPeriod_s_ (ConsciousRespirationRemainingPeriod_s, this),
          ExpiratoryReserveVolumeFraction_ (ExpiratoryReserveVolumeFraction, this),
          InspiratoryCapacityFraction_ (InspiratoryCapacityFraction, this),
          ConsciousStartPressure_cmH2O_ (ConsciousStartPressure_cmH2O, this),
          ConsciousEndPressure_cmH2O_ (ConsciousEndPressure_cmH2O, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const BioGearsRespiratorySystemData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (x, f, c),
          InitialExpiratoryReserveVolume_L_ (x.InitialExpiratoryReserveVolume_L_, f, this),
          InitialFunctionalResidualCapacity_L_ (x.InitialFunctionalResidualCapacity_L_, f, this),
          InitialInspiratoryCapacity_L_ (x.InitialInspiratoryCapacity_L_, f, this),
          InitialResidualVolume_L_ (x.InitialResidualVolume_L_, f, this),
          NotBreathing_ (x.NotBreathing_, f, this),
          TopBreathTotalVolume_L_ (x.TopBreathTotalVolume_L_, f, this),
          TopBreathAlveoliVolume_L_ (x.TopBreathAlveoliVolume_L_, f, this),
          TopBreathDeadSpaceVolume_L_ (x.TopBreathDeadSpaceVolume_L_, f, this),
          TopBreathPleuralPressure_cmH2O_ (x.TopBreathPleuralPressure_cmH2O_, f, this),
          LastCardiacCycleBloodPH_ (x.LastCardiacCycleBloodPH_, f, this),
          PreviousTotalLungVolume_L_ (x.PreviousTotalLungVolume_L_, f, this),
          BloodPHRunningAverage_ (x.BloodPHRunningAverage_, f, this),
          BreathingCycle_ (x.BreathingCycle_, f, this),
          ArterialO2PartialPressure_mmHg_ (x.ArterialO2PartialPressure_mmHg_, f, this),
          ArterialCO2PartialPressure_mmHg_ (x.ArterialCO2PartialPressure_mmHg_, f, this),
          BreathingCycleTime_s_ (x.BreathingCycleTime_s_, f, this),
          BreathTimeExhale_min_ (x.BreathTimeExhale_min_, f, this),
          DefaultDrivePressure_cmH2O_ (x.DefaultDrivePressure_cmH2O_, f, this),
          DriverPressure_cmH2O_ (x.DriverPressure_cmH2O_, f, this),
          DriverPressureMin_cmH2O_ (x.DriverPressureMin_cmH2O_, f, this),
          ElapsedBreathingCycleTime_min_ (x.ElapsedBreathingCycleTime_min_, f, this),
          IEscaleFactor_ (x.IEscaleFactor_, f, this),
          InstantaneousFunctionalResidualCapacity_L_ (x.InstantaneousFunctionalResidualCapacity_L_, f, this),
          MaxDriverPressure_cmH2O_ (x.MaxDriverPressure_cmH2O_, f, this),
          PeakRespiratoryDrivePressure_cmH2O_ (x.PeakRespiratoryDrivePressure_cmH2O_, f, this),
          PreviousTargetAlveolarVentilation_L_Per_min_ (x.PreviousTargetAlveolarVentilation_L_Per_min_, f, this),
          VentilationFrequency_Per_min_ (x.VentilationFrequency_Per_min_, f, this),
          VentilationToTidalVolumeSlope_ (x.VentilationToTidalVolumeSlope_, f, this),
          ArterialO2RunningAverage_mmHg_ (x.ArterialO2RunningAverage_mmHg_, f, this),
          ArterialCO2RunningAverage_mmHg_ (x.ArterialCO2RunningAverage_mmHg_, f, this),
          ConsciousBreathing_ (x.ConsciousBreathing_, f, this),
          ConsciousRespirationPeriod_s_ (x.ConsciousRespirationPeriod_s_, f, this),
          ConsciousRespirationRemainingPeriod_s_ (x.ConsciousRespirationRemainingPeriod_s_, f, this),
          ExpiratoryReserveVolumeFraction_ (x.ExpiratoryReserveVolumeFraction_, f, this),
          InspiratoryCapacityFraction_ (x.InspiratoryCapacityFraction_, f, this),
          ConsciousStartPressure_cmH2O_ (x.ConsciousStartPressure_cmH2O_, f, this),
          ConsciousEndPressure_cmH2O_ (x.ConsciousEndPressure_cmH2O_, f, this)
        {
        }

        BioGearsRespiratorySystemData::
        BioGearsRespiratorySystemData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::RespiratorySystemData (e, f | ::xml_schema::flags::base, c),
          InitialExpiratoryReserveVolume_L_ (this),
          InitialFunctionalResidualCapacity_L_ (this),
          InitialInspiratoryCapacity_L_ (this),
          InitialResidualVolume_L_ (this),
          NotBreathing_ (this),
          TopBreathTotalVolume_L_ (this),
          TopBreathAlveoliVolume_L_ (this),
          TopBreathDeadSpaceVolume_L_ (this),
          TopBreathPleuralPressure_cmH2O_ (this),
          LastCardiacCycleBloodPH_ (this),
          PreviousTotalLungVolume_L_ (this),
          BloodPHRunningAverage_ (this),
          BreathingCycle_ (this),
          ArterialO2PartialPressure_mmHg_ (this),
          ArterialCO2PartialPressure_mmHg_ (this),
          BreathingCycleTime_s_ (this),
          BreathTimeExhale_min_ (this),
          DefaultDrivePressure_cmH2O_ (this),
          DriverPressure_cmH2O_ (this),
          DriverPressureMin_cmH2O_ (this),
          ElapsedBreathingCycleTime_min_ (this),
          IEscaleFactor_ (this),
          InstantaneousFunctionalResidualCapacity_L_ (this),
          MaxDriverPressure_cmH2O_ (this),
          PeakRespiratoryDrivePressure_cmH2O_ (this),
          PreviousTargetAlveolarVentilation_L_Per_min_ (this),
          VentilationFrequency_Per_min_ (this),
          VentilationToTidalVolumeSlope_ (this),
          ArterialO2RunningAverage_mmHg_ (this),
          ArterialCO2RunningAverage_mmHg_ (this),
          ConsciousBreathing_ (this),
          ConsciousRespirationPeriod_s_ (this),
          ConsciousRespirationRemainingPeriod_s_ (this),
          ExpiratoryReserveVolumeFraction_ (this),
          InspiratoryCapacityFraction_ (this),
          ConsciousStartPressure_cmH2O_ (this),
          ConsciousEndPressure_cmH2O_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BioGearsRespiratorySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::RespiratorySystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InitialExpiratoryReserveVolume_L
            //
            if (n.name () == "InitialExpiratoryReserveVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialExpiratoryReserveVolume_L_.present ())
              {
                this->InitialExpiratoryReserveVolume_L_.set (InitialExpiratoryReserveVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialFunctionalResidualCapacity_L
            //
            if (n.name () == "InitialFunctionalResidualCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialFunctionalResidualCapacity_L_.present ())
              {
                this->InitialFunctionalResidualCapacity_L_.set (InitialFunctionalResidualCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialInspiratoryCapacity_L
            //
            if (n.name () == "InitialInspiratoryCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialInspiratoryCapacity_L_.present ())
              {
                this->InitialInspiratoryCapacity_L_.set (InitialInspiratoryCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // InitialResidualVolume_L
            //
            if (n.name () == "InitialResidualVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InitialResidualVolume_L_.present ())
              {
                this->InitialResidualVolume_L_.set (InitialResidualVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // NotBreathing
            //
            if (n.name () == "NotBreathing" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!NotBreathing_.present ())
              {
                this->NotBreathing_.set (NotBreathing_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathTotalVolume_L
            //
            if (n.name () == "TopBreathTotalVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathTotalVolume_L_.present ())
              {
                this->TopBreathTotalVolume_L_.set (TopBreathTotalVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathAlveoliVolume_L
            //
            if (n.name () == "TopBreathAlveoliVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathAlveoliVolume_L_.present ())
              {
                this->TopBreathAlveoliVolume_L_.set (TopBreathAlveoliVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathDeadSpaceVolume_L
            //
            if (n.name () == "TopBreathDeadSpaceVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathDeadSpaceVolume_L_.present ())
              {
                this->TopBreathDeadSpaceVolume_L_.set (TopBreathDeadSpaceVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // TopBreathPleuralPressure_cmH2O
            //
            if (n.name () == "TopBreathPleuralPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!TopBreathPleuralPressure_cmH2O_.present ())
              {
                this->TopBreathPleuralPressure_cmH2O_.set (TopBreathPleuralPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // LastCardiacCycleBloodPH
            //
            if (n.name () == "LastCardiacCycleBloodPH" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!LastCardiacCycleBloodPH_.present ())
              {
                this->LastCardiacCycleBloodPH_.set (LastCardiacCycleBloodPH_traits::create (i, f, this));
                continue;
              }
            }

            // PreviousTotalLungVolume_L
            //
            if (n.name () == "PreviousTotalLungVolume_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PreviousTotalLungVolume_L_.present ())
              {
                this->PreviousTotalLungVolume_L_.set (PreviousTotalLungVolume_L_traits::create (i, f, this));
                continue;
              }
            }

            // BloodPHRunningAverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodPHRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodPHRunningAverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BloodPHRunningAverage_.present ())
                {
                  ::std::unique_ptr< BloodPHRunningAverage_type > r (
                    dynamic_cast< BloodPHRunningAverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodPHRunningAverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BreathingCycle
            //
            if (n.name () == "BreathingCycle" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathingCycle_.present ())
              {
                this->BreathingCycle_.set (BreathingCycle_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialO2PartialPressure_mmHg
            //
            if (n.name () == "ArterialO2PartialPressure_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialO2PartialPressure_mmHg_.present ())
              {
                this->ArterialO2PartialPressure_mmHg_.set (ArterialO2PartialPressure_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialCO2PartialPressure_mmHg
            //
            if (n.name () == "ArterialCO2PartialPressure_mmHg" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ArterialCO2PartialPressure_mmHg_.present ())
              {
                this->ArterialCO2PartialPressure_mmHg_.set (ArterialCO2PartialPressure_mmHg_traits::create (i, f, this));
                continue;
              }
            }

            // BreathingCycleTime_s
            //
            if (n.name () == "BreathingCycleTime_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathingCycleTime_s_.present ())
              {
                this->BreathingCycleTime_s_.set (BreathingCycleTime_s_traits::create (i, f, this));
                continue;
              }
            }

            // BreathTimeExhale_min
            //
            if (n.name () == "BreathTimeExhale_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!BreathTimeExhale_min_.present ())
              {
                this->BreathTimeExhale_min_.set (BreathTimeExhale_min_traits::create (i, f, this));
                continue;
              }
            }

            // DefaultDrivePressure_cmH2O
            //
            if (n.name () == "DefaultDrivePressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DefaultDrivePressure_cmH2O_.present ())
              {
                this->DefaultDrivePressure_cmH2O_.set (DefaultDrivePressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // DriverPressure_cmH2O
            //
            if (n.name () == "DriverPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DriverPressure_cmH2O_.present ())
              {
                this->DriverPressure_cmH2O_.set (DriverPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // DriverPressureMin_cmH2O
            //
            if (n.name () == "DriverPressureMin_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!DriverPressureMin_cmH2O_.present ())
              {
                this->DriverPressureMin_cmH2O_.set (DriverPressureMin_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // ElapsedBreathingCycleTime_min
            //
            if (n.name () == "ElapsedBreathingCycleTime_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ElapsedBreathingCycleTime_min_.present ())
              {
                this->ElapsedBreathingCycleTime_min_.set (ElapsedBreathingCycleTime_min_traits::create (i, f, this));
                continue;
              }
            }

            // IEscaleFactor
            //
            if (n.name () == "IEscaleFactor" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!IEscaleFactor_.present ())
              {
                this->IEscaleFactor_.set (IEscaleFactor_traits::create (i, f, this));
                continue;
              }
            }

            // InstantaneousFunctionalResidualCapacity_L
            //
            if (n.name () == "InstantaneousFunctionalResidualCapacity_L" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InstantaneousFunctionalResidualCapacity_L_.present ())
              {
                this->InstantaneousFunctionalResidualCapacity_L_.set (InstantaneousFunctionalResidualCapacity_L_traits::create (i, f, this));
                continue;
              }
            }

            // MaxDriverPressure_cmH2O
            //
            if (n.name () == "MaxDriverPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!MaxDriverPressure_cmH2O_.present ())
              {
                this->MaxDriverPressure_cmH2O_.set (MaxDriverPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // PeakRespiratoryDrivePressure_cmH2O
            //
            if (n.name () == "PeakRespiratoryDrivePressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PeakRespiratoryDrivePressure_cmH2O_.present ())
              {
                this->PeakRespiratoryDrivePressure_cmH2O_.set (PeakRespiratoryDrivePressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // PreviousTargetAlveolarVentilation_L_Per_min
            //
            if (n.name () == "PreviousTargetAlveolarVentilation_L_Per_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!PreviousTargetAlveolarVentilation_L_Per_min_.present ())
              {
                this->PreviousTargetAlveolarVentilation_L_Per_min_.set (PreviousTargetAlveolarVentilation_L_Per_min_traits::create (i, f, this));
                continue;
              }
            }

            // VentilationFrequency_Per_min
            //
            if (n.name () == "VentilationFrequency_Per_min" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!VentilationFrequency_Per_min_.present ())
              {
                this->VentilationFrequency_Per_min_.set (VentilationFrequency_Per_min_traits::create (i, f, this));
                continue;
              }
            }

            // VentilationToTidalVolumeSlope
            //
            if (n.name () == "VentilationToTidalVolumeSlope" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!VentilationToTidalVolumeSlope_.present ())
              {
                this->VentilationToTidalVolumeSlope_.set (VentilationToTidalVolumeSlope_traits::create (i, f, this));
                continue;
              }
            }

            // ArterialO2RunningAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialO2RunningAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialO2RunningAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialO2RunningAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialO2RunningAverage_mmHg_type > r (
                    dynamic_cast< ArterialO2RunningAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialO2RunningAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ArterialCO2RunningAverage_mmHg
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ArterialCO2RunningAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ArterialCO2RunningAverage_mmHg_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ArterialCO2RunningAverage_mmHg_.present ())
                {
                  ::std::unique_ptr< ArterialCO2RunningAverage_mmHg_type > r (
                    dynamic_cast< ArterialCO2RunningAverage_mmHg_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ArterialCO2RunningAverage_mmHg_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConsciousBreathing
            //
            if (n.name () == "ConsciousBreathing" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousBreathing_.present ())
              {
                this->ConsciousBreathing_.set (ConsciousBreathing_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousRespirationPeriod_s
            //
            if (n.name () == "ConsciousRespirationPeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousRespirationPeriod_s_.present ())
              {
                this->ConsciousRespirationPeriod_s_.set (ConsciousRespirationPeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousRespirationRemainingPeriod_s
            //
            if (n.name () == "ConsciousRespirationRemainingPeriod_s" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousRespirationRemainingPeriod_s_.present ())
              {
                this->ConsciousRespirationRemainingPeriod_s_.set (ConsciousRespirationRemainingPeriod_s_traits::create (i, f, this));
                continue;
              }
            }

            // ExpiratoryReserveVolumeFraction
            //
            if (n.name () == "ExpiratoryReserveVolumeFraction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ExpiratoryReserveVolumeFraction_.present ())
              {
                this->ExpiratoryReserveVolumeFraction_.set (ExpiratoryReserveVolumeFraction_traits::create (i, f, this));
                continue;
              }
            }

            // InspiratoryCapacityFraction
            //
            if (n.name () == "InspiratoryCapacityFraction" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!InspiratoryCapacityFraction_.present ())
              {
                this->InspiratoryCapacityFraction_.set (InspiratoryCapacityFraction_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousStartPressure_cmH2O
            //
            if (n.name () == "ConsciousStartPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousStartPressure_cmH2O_.present ())
              {
                this->ConsciousStartPressure_cmH2O_.set (ConsciousStartPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            // ConsciousEndPressure_cmH2O
            //
            if (n.name () == "ConsciousEndPressure_cmH2O" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              if (!ConsciousEndPressure_cmH2O_.present ())
              {
                this->ConsciousEndPressure_cmH2O_.set (ConsciousEndPressure_cmH2O_traits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!InitialExpiratoryReserveVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialExpiratoryReserveVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialFunctionalResidualCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialFunctionalResidualCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialInspiratoryCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialInspiratoryCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InitialResidualVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InitialResidualVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!NotBreathing_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NotBreathing",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathTotalVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathTotalVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathAlveoliVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathAlveoliVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathDeadSpaceVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathDeadSpaceVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!TopBreathPleuralPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TopBreathPleuralPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LastCardiacCycleBloodPH_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LastCardiacCycleBloodPH",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PreviousTotalLungVolume_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PreviousTotalLungVolume_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BloodPHRunningAverage_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BloodPHRunningAverage",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathingCycle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathingCycle",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialO2PartialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialO2PartialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCO2PartialPressure_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCO2PartialPressure_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathingCycleTime_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathingCycleTime_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BreathTimeExhale_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BreathTimeExhale_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DefaultDrivePressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DefaultDrivePressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DriverPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DriverPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!DriverPressureMin_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DriverPressureMin_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ElapsedBreathingCycleTime_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElapsedBreathingCycleTime_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!IEscaleFactor_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IEscaleFactor",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InstantaneousFunctionalResidualCapacity_L_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InstantaneousFunctionalResidualCapacity_L",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!MaxDriverPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MaxDriverPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PeakRespiratoryDrivePressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PeakRespiratoryDrivePressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!PreviousTargetAlveolarVentilation_L_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PreviousTargetAlveolarVentilation_L_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!VentilationFrequency_Per_min_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VentilationFrequency_Per_min",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!VentilationToTidalVolumeSlope_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VentilationToTidalVolumeSlope",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialO2RunningAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialO2RunningAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ArterialCO2RunningAverage_mmHg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ArterialCO2RunningAverage_mmHg",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousBreathing_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousBreathing",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousRespirationPeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousRespirationPeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousRespirationRemainingPeriod_s_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousRespirationRemainingPeriod_s",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ExpiratoryReserveVolumeFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExpiratoryReserveVolumeFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!InspiratoryCapacityFraction_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InspiratoryCapacityFraction",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousStartPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousStartPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!ConsciousEndPressure_cmH2O_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConsciousEndPressure_cmH2O",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        BioGearsRespiratorySystemData* BioGearsRespiratorySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BioGearsRespiratorySystemData (*this, f, c);
        }

        BioGearsRespiratorySystemData& BioGearsRespiratorySystemData::
        operator= (const BioGearsRespiratorySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (*this) = x;
            this->InitialExpiratoryReserveVolume_L_ = x.InitialExpiratoryReserveVolume_L_;
            this->InitialFunctionalResidualCapacity_L_ = x.InitialFunctionalResidualCapacity_L_;
            this->InitialInspiratoryCapacity_L_ = x.InitialInspiratoryCapacity_L_;
            this->InitialResidualVolume_L_ = x.InitialResidualVolume_L_;
            this->NotBreathing_ = x.NotBreathing_;
            this->TopBreathTotalVolume_L_ = x.TopBreathTotalVolume_L_;
            this->TopBreathAlveoliVolume_L_ = x.TopBreathAlveoliVolume_L_;
            this->TopBreathDeadSpaceVolume_L_ = x.TopBreathDeadSpaceVolume_L_;
            this->TopBreathPleuralPressure_cmH2O_ = x.TopBreathPleuralPressure_cmH2O_;
            this->LastCardiacCycleBloodPH_ = x.LastCardiacCycleBloodPH_;
            this->PreviousTotalLungVolume_L_ = x.PreviousTotalLungVolume_L_;
            this->BloodPHRunningAverage_ = x.BloodPHRunningAverage_;
            this->BreathingCycle_ = x.BreathingCycle_;
            this->ArterialO2PartialPressure_mmHg_ = x.ArterialO2PartialPressure_mmHg_;
            this->ArterialCO2PartialPressure_mmHg_ = x.ArterialCO2PartialPressure_mmHg_;
            this->BreathingCycleTime_s_ = x.BreathingCycleTime_s_;
            this->BreathTimeExhale_min_ = x.BreathTimeExhale_min_;
            this->DefaultDrivePressure_cmH2O_ = x.DefaultDrivePressure_cmH2O_;
            this->DriverPressure_cmH2O_ = x.DriverPressure_cmH2O_;
            this->DriverPressureMin_cmH2O_ = x.DriverPressureMin_cmH2O_;
            this->ElapsedBreathingCycleTime_min_ = x.ElapsedBreathingCycleTime_min_;
            this->IEscaleFactor_ = x.IEscaleFactor_;
            this->InstantaneousFunctionalResidualCapacity_L_ = x.InstantaneousFunctionalResidualCapacity_L_;
            this->MaxDriverPressure_cmH2O_ = x.MaxDriverPressure_cmH2O_;
            this->PeakRespiratoryDrivePressure_cmH2O_ = x.PeakRespiratoryDrivePressure_cmH2O_;
            this->PreviousTargetAlveolarVentilation_L_Per_min_ = x.PreviousTargetAlveolarVentilation_L_Per_min_;
            this->VentilationFrequency_Per_min_ = x.VentilationFrequency_Per_min_;
            this->VentilationToTidalVolumeSlope_ = x.VentilationToTidalVolumeSlope_;
            this->ArterialO2RunningAverage_mmHg_ = x.ArterialO2RunningAverage_mmHg_;
            this->ArterialCO2RunningAverage_mmHg_ = x.ArterialCO2RunningAverage_mmHg_;
            this->ConsciousBreathing_ = x.ConsciousBreathing_;
            this->ConsciousRespirationPeriod_s_ = x.ConsciousRespirationPeriod_s_;
            this->ConsciousRespirationRemainingPeriod_s_ = x.ConsciousRespirationRemainingPeriod_s_;
            this->ExpiratoryReserveVolumeFraction_ = x.ExpiratoryReserveVolumeFraction_;
            this->InspiratoryCapacityFraction_ = x.InspiratoryCapacityFraction_;
            this->ConsciousStartPressure_cmH2O_ = x.ConsciousStartPressure_cmH2O_;
            this->ConsciousEndPressure_cmH2O_ = x.ConsciousEndPressure_cmH2O_;
          }

          return *this;
        }

        BioGearsRespiratorySystemData::
        ~BioGearsRespiratorySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_type_factory_init (
          "BioGearsRespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const BioGearsRespiratorySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (i);

          o << ::std::endl << "InitialExpiratoryReserveVolume_L: " << i.InitialExpiratoryReserveVolume_L ();
          o << ::std::endl << "InitialFunctionalResidualCapacity_L: " << i.InitialFunctionalResidualCapacity_L ();
          o << ::std::endl << "InitialInspiratoryCapacity_L: " << i.InitialInspiratoryCapacity_L ();
          o << ::std::endl << "InitialResidualVolume_L: " << i.InitialResidualVolume_L ();
          o << ::std::endl << "NotBreathing: " << i.NotBreathing ();
          o << ::std::endl << "TopBreathTotalVolume_L: " << i.TopBreathTotalVolume_L ();
          o << ::std::endl << "TopBreathAlveoliVolume_L: " << i.TopBreathAlveoliVolume_L ();
          o << ::std::endl << "TopBreathDeadSpaceVolume_L: " << i.TopBreathDeadSpaceVolume_L ();
          o << ::std::endl << "TopBreathPleuralPressure_cmH2O: " << i.TopBreathPleuralPressure_cmH2O ();
          o << ::std::endl << "LastCardiacCycleBloodPH: " << i.LastCardiacCycleBloodPH ();
          o << ::std::endl << "PreviousTotalLungVolume_L: " << i.PreviousTotalLungVolume_L ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BloodPHRunningAverage: ";
            om.insert (o, i.BloodPHRunningAverage ());
          }

          o << ::std::endl << "BreathingCycle: " << i.BreathingCycle ();
          o << ::std::endl << "ArterialO2PartialPressure_mmHg: " << i.ArterialO2PartialPressure_mmHg ();
          o << ::std::endl << "ArterialCO2PartialPressure_mmHg: " << i.ArterialCO2PartialPressure_mmHg ();
          o << ::std::endl << "BreathingCycleTime_s: " << i.BreathingCycleTime_s ();
          o << ::std::endl << "BreathTimeExhale_min: " << i.BreathTimeExhale_min ();
          o << ::std::endl << "DefaultDrivePressure_cmH2O: " << i.DefaultDrivePressure_cmH2O ();
          o << ::std::endl << "DriverPressure_cmH2O: " << i.DriverPressure_cmH2O ();
          o << ::std::endl << "DriverPressureMin_cmH2O: " << i.DriverPressureMin_cmH2O ();
          o << ::std::endl << "ElapsedBreathingCycleTime_min: " << i.ElapsedBreathingCycleTime_min ();
          o << ::std::endl << "IEscaleFactor: " << i.IEscaleFactor ();
          o << ::std::endl << "InstantaneousFunctionalResidualCapacity_L: " << i.InstantaneousFunctionalResidualCapacity_L ();
          o << ::std::endl << "MaxDriverPressure_cmH2O: " << i.MaxDriverPressure_cmH2O ();
          o << ::std::endl << "PeakRespiratoryDrivePressure_cmH2O: " << i.PeakRespiratoryDrivePressure_cmH2O ();
          o << ::std::endl << "PreviousTargetAlveolarVentilation_L_Per_min: " << i.PreviousTargetAlveolarVentilation_L_Per_min ();
          o << ::std::endl << "VentilationFrequency_Per_min: " << i.VentilationFrequency_Per_min ();
          o << ::std::endl << "VentilationToTidalVolumeSlope: " << i.VentilationToTidalVolumeSlope ();
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialO2RunningAverage_mmHg: ";
            om.insert (o, i.ArterialO2RunningAverage_mmHg ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ArterialCO2RunningAverage_mmHg: ";
            om.insert (o, i.ArterialCO2RunningAverage_mmHg ());
          }

          o << ::std::endl << "ConsciousBreathing: " << i.ConsciousBreathing ();
          o << ::std::endl << "ConsciousRespirationPeriod_s: " << i.ConsciousRespirationPeriod_s ();
          o << ::std::endl << "ConsciousRespirationRemainingPeriod_s: " << i.ConsciousRespirationRemainingPeriod_s ();
          o << ::std::endl << "ExpiratoryReserveVolumeFraction: " << i.ExpiratoryReserveVolumeFraction ();
          o << ::std::endl << "InspiratoryCapacityFraction: " << i.InspiratoryCapacityFraction ();
          o << ::std::endl << "ConsciousStartPressure_cmH2O: " << i.ConsciousStartPressure_cmH2O ();
          o << ::std::endl << "ConsciousEndPressure_cmH2O: " << i.ConsciousEndPressure_cmH2O ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const BioGearsRespiratorySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::RespiratorySystemData& > (i);

          // InitialExpiratoryReserveVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialExpiratoryReserveVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialExpiratoryReserveVolume_L ());
          }

          // InitialFunctionalResidualCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialFunctionalResidualCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialFunctionalResidualCapacity_L ());
          }

          // InitialInspiratoryCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialInspiratoryCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialInspiratoryCapacity_L ());
          }

          // InitialResidualVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InitialResidualVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InitialResidualVolume_L ());
          }

          // NotBreathing
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NotBreathing",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.NotBreathing ();
          }

          // TopBreathTotalVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathTotalVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathTotalVolume_L ());
          }

          // TopBreathAlveoliVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathAlveoliVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathAlveoliVolume_L ());
          }

          // TopBreathDeadSpaceVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathDeadSpaceVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathDeadSpaceVolume_L ());
          }

          // TopBreathPleuralPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TopBreathPleuralPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.TopBreathPleuralPressure_cmH2O ());
          }

          // LastCardiacCycleBloodPH
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LastCardiacCycleBloodPH",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.LastCardiacCycleBloodPH ());
          }

          // PreviousTotalLungVolume_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PreviousTotalLungVolume_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PreviousTotalLungVolume_L ());
          }

          // BloodPHRunningAverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::BloodPHRunningAverage_type& x (i.BloodPHRunningAverage ());
            if (typeid (BioGearsRespiratorySystemData::BloodPHRunningAverage_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BloodPHRunningAverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BloodPHRunningAverage",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BreathingCycle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathingCycle",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.BreathingCycle ();
          }

          // ArterialO2PartialPressure_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialO2PartialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialO2PartialPressure_mmHg ());
          }

          // ArterialCO2PartialPressure_mmHg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ArterialCO2PartialPressure_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ArterialCO2PartialPressure_mmHg ());
          }

          // BreathingCycleTime_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathingCycleTime_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.BreathingCycleTime_s ());
          }

          // BreathTimeExhale_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BreathTimeExhale_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.BreathTimeExhale_min ());
          }

          // DefaultDrivePressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DefaultDrivePressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DefaultDrivePressure_cmH2O ());
          }

          // DriverPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DriverPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DriverPressure_cmH2O ());
          }

          // DriverPressureMin_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DriverPressureMin_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.DriverPressureMin_cmH2O ());
          }

          // ElapsedBreathingCycleTime_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElapsedBreathingCycleTime_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ElapsedBreathingCycleTime_min ());
          }

          // IEscaleFactor
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IEscaleFactor",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.IEscaleFactor ());
          }

          // InstantaneousFunctionalResidualCapacity_L
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InstantaneousFunctionalResidualCapacity_L",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InstantaneousFunctionalResidualCapacity_L ());
          }

          // MaxDriverPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MaxDriverPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.MaxDriverPressure_cmH2O ());
          }

          // PeakRespiratoryDrivePressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PeakRespiratoryDrivePressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PeakRespiratoryDrivePressure_cmH2O ());
          }

          // PreviousTargetAlveolarVentilation_L_Per_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PreviousTargetAlveolarVentilation_L_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.PreviousTargetAlveolarVentilation_L_Per_min ());
          }

          // VentilationFrequency_Per_min
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VentilationFrequency_Per_min",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.VentilationFrequency_Per_min ());
          }

          // VentilationToTidalVolumeSlope
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VentilationToTidalVolumeSlope",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.VentilationToTidalVolumeSlope ());
          }

          // ArterialO2RunningAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::ArterialO2RunningAverage_mmHg_type& x (i.ArterialO2RunningAverage_mmHg ());
            if (typeid (BioGearsRespiratorySystemData::ArterialO2RunningAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialO2RunningAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialO2RunningAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ArterialCO2RunningAverage_mmHg
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const BioGearsRespiratorySystemData::ArterialCO2RunningAverage_mmHg_type& x (i.ArterialCO2RunningAverage_mmHg ());
            if (typeid (BioGearsRespiratorySystemData::ArterialCO2RunningAverage_mmHg_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ArterialCO2RunningAverage_mmHg",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ArterialCO2RunningAverage_mmHg",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // ConsciousBreathing
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousBreathing",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << i.ConsciousBreathing ();
          }

          // ConsciousRespirationPeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousRespirationPeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousRespirationPeriod_s ());
          }

          // ConsciousRespirationRemainingPeriod_s
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousRespirationRemainingPeriod_s",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousRespirationRemainingPeriod_s ());
          }

          // ExpiratoryReserveVolumeFraction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExpiratoryReserveVolumeFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ExpiratoryReserveVolumeFraction ());
          }

          // InspiratoryCapacityFraction
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InspiratoryCapacityFraction",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.InspiratoryCapacityFraction ());
          }

          // ConsciousStartPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousStartPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousStartPressure_cmH2O ());
          }

          // ConsciousEndPressure_cmH2O
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConsciousEndPressure_cmH2O",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << ::xml_schema::as_double(i.ConsciousEndPressure_cmH2O ());
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BioGearsRespiratorySystemData >
        _xsd_BioGearsRespiratorySystemData_type_serializer_init (
          "BioGearsRespiratorySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "FluidCompartmentData.hxx"

#include "ScalarVolumePerTimeData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarVolumeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // FluidCompartmentData
        // 

        const FluidCompartmentData::InFlow_optional& FluidCompartmentData::
        InFlow () const
        {
          return this->InFlow_;
        }

        FluidCompartmentData::InFlow_optional& FluidCompartmentData::
        InFlow ()
        {
          return this->InFlow_;
        }

        void FluidCompartmentData::
        InFlow (const InFlow_type& x)
        {
          this->InFlow_.set (x);
        }

        void FluidCompartmentData::
        InFlow (const InFlow_optional& x)
        {
          this->InFlow_ = x;
        }

        void FluidCompartmentData::
        InFlow (::std::unique_ptr< InFlow_type > x)
        {
          this->InFlow_.set (std::move (x));
        }

        const FluidCompartmentData::OutFlow_optional& FluidCompartmentData::
        OutFlow () const
        {
          return this->OutFlow_;
        }

        FluidCompartmentData::OutFlow_optional& FluidCompartmentData::
        OutFlow ()
        {
          return this->OutFlow_;
        }

        void FluidCompartmentData::
        OutFlow (const OutFlow_type& x)
        {
          this->OutFlow_.set (x);
        }

        void FluidCompartmentData::
        OutFlow (const OutFlow_optional& x)
        {
          this->OutFlow_ = x;
        }

        void FluidCompartmentData::
        OutFlow (::std::unique_ptr< OutFlow_type > x)
        {
          this->OutFlow_.set (std::move (x));
        }

        const FluidCompartmentData::Pressure_optional& FluidCompartmentData::
        Pressure () const
        {
          return this->Pressure_;
        }

        FluidCompartmentData::Pressure_optional& FluidCompartmentData::
        Pressure ()
        {
          return this->Pressure_;
        }

        void FluidCompartmentData::
        Pressure (const Pressure_type& x)
        {
          this->Pressure_.set (x);
        }

        void FluidCompartmentData::
        Pressure (const Pressure_optional& x)
        {
          this->Pressure_ = x;
        }

        void FluidCompartmentData::
        Pressure (::std::unique_ptr< Pressure_type > x)
        {
          this->Pressure_.set (std::move (x));
        }

        const FluidCompartmentData::Volume_optional& FluidCompartmentData::
        Volume () const
        {
          return this->Volume_;
        }

        FluidCompartmentData::Volume_optional& FluidCompartmentData::
        Volume ()
        {
          return this->Volume_;
        }

        void FluidCompartmentData::
        Volume (const Volume_type& x)
        {
          this->Volume_.set (x);
        }

        void FluidCompartmentData::
        Volume (const Volume_optional& x)
        {
          this->Volume_ = x;
        }

        void FluidCompartmentData::
        Volume (::std::unique_ptr< Volume_type > x)
        {
          this->Volume_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // FluidCompartmentData
        //

        FluidCompartmentData::
        FluidCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentData (),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (Name),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (std::move (Name)),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const FluidCompartmentData& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (x, f, c),
          InFlow_ (x.InFlow_, f, this),
          OutFlow_ (x.OutFlow_, f, this),
          Pressure_ (x.Pressure_, f, this),
          Volume_ (x.Volume_, f, this)
        {
        }

        FluidCompartmentData::
        FluidCompartmentData (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (e, f | ::xml_schema::flags::base, c),
          InFlow_ (this),
          OutFlow_ (this),
          Pressure_ (this),
          Volume_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void FluidCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InFlow_)
                {
                  ::std::unique_ptr< InFlow_type > r (
                    dynamic_cast< InFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OutFlow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OutFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OutFlow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OutFlow_)
                {
                  ::std::unique_ptr< OutFlow_type > r (
                    dynamic_cast< OutFlow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OutFlow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Pressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Pressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Pressure_)
                {
                  ::std::unique_ptr< Pressure_type > r (
                    dynamic_cast< Pressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Pressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Volume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Volume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Volume_)
                {
                  ::std::unique_ptr< Volume_type > r (
                    dynamic_cast< Volume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Volume_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        FluidCompartmentData* FluidCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class FluidCompartmentData (*this, f, c);
        }

        FluidCompartmentData& FluidCompartmentData::
        operator= (const FluidCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentData& > (*this) = x;
            this->InFlow_ = x.InFlow_;
            this->OutFlow_ = x.OutFlow_;
            this->Pressure_ = x.Pressure_;
            this->Volume_ = x.Volume_;
          }

          return *this;
        }

        FluidCompartmentData::
        ~FluidCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_type_factory_init (
          "FluidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const FluidCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InFlow ())
            {
              o << ::std::endl << "InFlow: ";
              om.insert (o, *i.InFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OutFlow ())
            {
              o << ::std::endl << "OutFlow: ";
              om.insert (o, *i.OutFlow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              o << ::std::endl << "Pressure: ";
              om.insert (o, *i.Pressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Volume ())
            {
              o << ::std::endl << "Volume: ";
              om.insert (o, *i.Volume ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const FluidCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          // InFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InFlow ())
            {
              const FluidCompartmentData::InFlow_type& x (*i.InFlow ());
              if (typeid (FluidCompartmentData::InFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // OutFlow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OutFlow ())
            {
              const FluidCompartmentData::OutFlow_type& x (*i.OutFlow ());
              if (typeid (FluidCompartmentData::OutFlow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OutFlow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OutFlow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Pressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Pressure ())
            {
              const FluidCompartmentData::Pressure_type& x (*i.Pressure ());
              if (typeid (FluidCompartmentData::Pressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Pressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Pressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Volume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Volume ())
            {
              const FluidCompartmentData::Volume_type& x (*i.Volume ());
              if (typeid (FluidCompartmentData::Volume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Volume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Volume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FluidCompartmentData >
        _xsd_FluidCompartmentData_type_serializer_init (
          "FluidCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


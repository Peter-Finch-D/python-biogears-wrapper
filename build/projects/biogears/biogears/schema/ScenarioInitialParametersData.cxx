// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ScenarioInitialParametersData.hxx"

#include "PatientData.hxx"

#include "ConditionData.hxx"

#include "PhysiologyEngineConfigurationData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ScenarioInitialParametersData
        // 

        const ScenarioInitialParametersData::Patient_optional& ScenarioInitialParametersData::
        Patient () const
        {
          return this->Patient_;
        }

        ScenarioInitialParametersData::Patient_optional& ScenarioInitialParametersData::
        Patient ()
        {
          return this->Patient_;
        }

        void ScenarioInitialParametersData::
        Patient (const Patient_type& x)
        {
          this->Patient_.set (x);
        }

        void ScenarioInitialParametersData::
        Patient (const Patient_optional& x)
        {
          this->Patient_ = x;
        }

        void ScenarioInitialParametersData::
        Patient (::std::unique_ptr< Patient_type > x)
        {
          this->Patient_.set (std::move (x));
        }

        const ScenarioInitialParametersData::PatientFile_optional& ScenarioInitialParametersData::
        PatientFile () const
        {
          return this->PatientFile_;
        }

        ScenarioInitialParametersData::PatientFile_optional& ScenarioInitialParametersData::
        PatientFile ()
        {
          return this->PatientFile_;
        }

        void ScenarioInitialParametersData::
        PatientFile (const PatientFile_type& x)
        {
          this->PatientFile_.set (x);
        }

        void ScenarioInitialParametersData::
        PatientFile (const PatientFile_optional& x)
        {
          this->PatientFile_ = x;
        }

        void ScenarioInitialParametersData::
        PatientFile (::std::unique_ptr< PatientFile_type > x)
        {
          this->PatientFile_.set (std::move (x));
        }

        const ScenarioInitialParametersData::Condition_sequence& ScenarioInitialParametersData::
        Condition () const
        {
          return this->Condition_;
        }

        ScenarioInitialParametersData::Condition_sequence& ScenarioInitialParametersData::
        Condition ()
        {
          return this->Condition_;
        }

        void ScenarioInitialParametersData::
        Condition (const Condition_sequence& s)
        {
          this->Condition_ = s;
        }

        const ScenarioInitialParametersData::Configuration_optional& ScenarioInitialParametersData::
        Configuration () const
        {
          return this->Configuration_;
        }

        ScenarioInitialParametersData::Configuration_optional& ScenarioInitialParametersData::
        Configuration ()
        {
          return this->Configuration_;
        }

        void ScenarioInitialParametersData::
        Configuration (const Configuration_type& x)
        {
          this->Configuration_.set (x);
        }

        void ScenarioInitialParametersData::
        Configuration (const Configuration_optional& x)
        {
          this->Configuration_ = x;
        }

        void ScenarioInitialParametersData::
        Configuration (::std::unique_ptr< Configuration_type > x)
        {
          this->Configuration_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ScenarioInitialParametersData
        //

        ScenarioInitialParametersData::
        ScenarioInitialParametersData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          Patient_ (this),
          PatientFile_ (this),
          Condition_ (this),
          Configuration_ (this)
        {
        }

        ScenarioInitialParametersData::
        ScenarioInitialParametersData (const ScenarioInitialParametersData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          Patient_ (x.Patient_, f, this),
          PatientFile_ (x.PatientFile_, f, this),
          Condition_ (x.Condition_, f, this),
          Configuration_ (x.Configuration_, f, this)
        {
        }

        ScenarioInitialParametersData::
        ScenarioInitialParametersData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          Patient_ (this),
          PatientFile_ (this),
          Condition_ (this),
          Configuration_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ScenarioInitialParametersData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Patient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Patient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Patient_)
                {
                  ::std::unique_ptr< Patient_type > r (
                    dynamic_cast< Patient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Patient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PatientFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PatientFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PatientFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PatientFile_)
                {
                  ::std::unique_ptr< PatientFile_type > r (
                    dynamic_cast< PatientFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PatientFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Condition
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Condition_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< Condition_type > r (
                  dynamic_cast< Condition_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->Condition_.push_back (::std::move (r));
                continue;
              }
            }

            // Configuration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Configuration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Configuration_)
                {
                  ::std::unique_ptr< Configuration_type > r (
                    dynamic_cast< Configuration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Configuration_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ScenarioInitialParametersData* ScenarioInitialParametersData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ScenarioInitialParametersData (*this, f, c);
        }

        ScenarioInitialParametersData& ScenarioInitialParametersData::
        operator= (const ScenarioInitialParametersData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->Patient_ = x.Patient_;
            this->PatientFile_ = x.PatientFile_;
            this->Condition_ = x.Condition_;
            this->Configuration_ = x.Configuration_;
          }

          return *this;
        }

        ScenarioInitialParametersData::
        ~ScenarioInitialParametersData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_type_factory_init (
          "ScenarioInitialParametersData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ScenarioInitialParametersData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Patient ())
            {
              o << ::std::endl << "Patient: ";
              om.insert (o, *i.Patient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PatientFile ())
            {
              o << ::std::endl << "PatientFile: ";
              om.insert (o, *i.PatientFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (ScenarioInitialParametersData::Condition_const_iterator
                 b (i.Condition ().begin ()), e (i.Condition ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "Condition: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              o << ::std::endl << "Configuration: ";
              om.insert (o, *i.Configuration ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ScenarioInitialParametersData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // Patient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Patient ())
            {
              const ScenarioInitialParametersData::Patient_type& x (*i.Patient ());
              if (typeid (ScenarioInitialParametersData::Patient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Patient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Patient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PatientFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PatientFile ())
            {
              const ScenarioInitialParametersData::PatientFile_type& x (*i.PatientFile ());
              if (typeid (ScenarioInitialParametersData::PatientFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PatientFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PatientFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Condition
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (ScenarioInitialParametersData::Condition_const_iterator
                 b (i.Condition ().begin ()), n (i.Condition ().end ());
                 b != n; ++b)
            {
              if (typeid (ScenarioInitialParametersData::Condition_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Condition",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "Condition",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // Configuration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Configuration ())
            {
              const ScenarioInitialParametersData::Configuration_type& x (*i.Configuration ());
              if (typeid (ScenarioInitialParametersData::Configuration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Configuration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Configuration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ScenarioInitialParametersData >
        _xsd_ScenarioInitialParametersData_type_serializer_init (
          "ScenarioInitialParametersData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


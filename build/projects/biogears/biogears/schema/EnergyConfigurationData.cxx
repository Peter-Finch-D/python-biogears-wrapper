// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EnergyConfigurationData.hxx"

#include "ScalarHeatCapacitancePerMassData.hxx"

#include "ScalarTemperatureData.hxx"

#include "ScalarEnergyPerAmountData.hxx"

#include "ScalarHeatConductanceData.hxx"

#include "ScalarEnergyPerMassData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnergyConfigurationData
        // 

        const EnergyConfigurationData::BodySpecificHeat_optional& EnergyConfigurationData::
        BodySpecificHeat () const
        {
          return this->BodySpecificHeat_;
        }

        EnergyConfigurationData::BodySpecificHeat_optional& EnergyConfigurationData::
        BodySpecificHeat ()
        {
          return this->BodySpecificHeat_;
        }

        void EnergyConfigurationData::
        BodySpecificHeat (const BodySpecificHeat_type& x)
        {
          this->BodySpecificHeat_.set (x);
        }

        void EnergyConfigurationData::
        BodySpecificHeat (const BodySpecificHeat_optional& x)
        {
          this->BodySpecificHeat_ = x;
        }

        void EnergyConfigurationData::
        BodySpecificHeat (::std::unique_ptr< BodySpecificHeat_type > x)
        {
          this->BodySpecificHeat_.set (std::move (x));
        }

        const EnergyConfigurationData::CoreTemperatureLow_optional& EnergyConfigurationData::
        CoreTemperatureLow () const
        {
          return this->CoreTemperatureLow_;
        }

        EnergyConfigurationData::CoreTemperatureLow_optional& EnergyConfigurationData::
        CoreTemperatureLow ()
        {
          return this->CoreTemperatureLow_;
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (const CoreTemperatureLow_type& x)
        {
          this->CoreTemperatureLow_.set (x);
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (const CoreTemperatureLow_optional& x)
        {
          this->CoreTemperatureLow_ = x;
        }

        void EnergyConfigurationData::
        CoreTemperatureLow (::std::unique_ptr< CoreTemperatureLow_type > x)
        {
          this->CoreTemperatureLow_.set (std::move (x));
        }

        const EnergyConfigurationData::CoreTemperatureHigh_optional& EnergyConfigurationData::
        CoreTemperatureHigh () const
        {
          return this->CoreTemperatureHigh_;
        }

        EnergyConfigurationData::CoreTemperatureHigh_optional& EnergyConfigurationData::
        CoreTemperatureHigh ()
        {
          return this->CoreTemperatureHigh_;
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (const CoreTemperatureHigh_type& x)
        {
          this->CoreTemperatureHigh_.set (x);
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (const CoreTemperatureHigh_optional& x)
        {
          this->CoreTemperatureHigh_ = x;
        }

        void EnergyConfigurationData::
        CoreTemperatureHigh (::std::unique_ptr< CoreTemperatureHigh_type > x)
        {
          this->CoreTemperatureHigh_.set (std::move (x));
        }

        const EnergyConfigurationData::DeltaCoreTemperatureLow_optional& EnergyConfigurationData::
        DeltaCoreTemperatureLow () const
        {
          return this->DeltaCoreTemperatureLow_;
        }

        EnergyConfigurationData::DeltaCoreTemperatureLow_optional& EnergyConfigurationData::
        DeltaCoreTemperatureLow ()
        {
          return this->DeltaCoreTemperatureLow_;
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_type& x)
        {
          this->DeltaCoreTemperatureLow_.set (x);
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (const DeltaCoreTemperatureLow_optional& x)
        {
          this->DeltaCoreTemperatureLow_ = x;
        }

        void EnergyConfigurationData::
        DeltaCoreTemperatureLow (::std::unique_ptr< DeltaCoreTemperatureLow_type > x)
        {
          this->DeltaCoreTemperatureLow_.set (std::move (x));
        }

        const EnergyConfigurationData::EnergyPerATP_optional& EnergyConfigurationData::
        EnergyPerATP () const
        {
          return this->EnergyPerATP_;
        }

        EnergyConfigurationData::EnergyPerATP_optional& EnergyConfigurationData::
        EnergyPerATP ()
        {
          return this->EnergyPerATP_;
        }

        void EnergyConfigurationData::
        EnergyPerATP (const EnergyPerATP_type& x)
        {
          this->EnergyPerATP_.set (x);
        }

        void EnergyConfigurationData::
        EnergyPerATP (const EnergyPerATP_optional& x)
        {
          this->EnergyPerATP_ = x;
        }

        void EnergyConfigurationData::
        EnergyPerATP (::std::unique_ptr< EnergyPerATP_type > x)
        {
          this->EnergyPerATP_.set (std::move (x));
        }

        const EnergyConfigurationData::SweatHeatTransfer_optional& EnergyConfigurationData::
        SweatHeatTransfer () const
        {
          return this->SweatHeatTransfer_;
        }

        EnergyConfigurationData::SweatHeatTransfer_optional& EnergyConfigurationData::
        SweatHeatTransfer ()
        {
          return this->SweatHeatTransfer_;
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (const SweatHeatTransfer_type& x)
        {
          this->SweatHeatTransfer_.set (x);
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (const SweatHeatTransfer_optional& x)
        {
          this->SweatHeatTransfer_ = x;
        }

        void EnergyConfigurationData::
        SweatHeatTransfer (::std::unique_ptr< SweatHeatTransfer_type > x)
        {
          this->SweatHeatTransfer_.set (std::move (x));
        }

        const EnergyConfigurationData::VaporizationEnergy_optional& EnergyConfigurationData::
        VaporizationEnergy () const
        {
          return this->VaporizationEnergy_;
        }

        EnergyConfigurationData::VaporizationEnergy_optional& EnergyConfigurationData::
        VaporizationEnergy ()
        {
          return this->VaporizationEnergy_;
        }

        void EnergyConfigurationData::
        VaporizationEnergy (const VaporizationEnergy_type& x)
        {
          this->VaporizationEnergy_.set (x);
        }

        void EnergyConfigurationData::
        VaporizationEnergy (const VaporizationEnergy_optional& x)
        {
          this->VaporizationEnergy_ = x;
        }

        void EnergyConfigurationData::
        VaporizationEnergy (::std::unique_ptr< VaporizationEnergy_type > x)
        {
          this->VaporizationEnergy_.set (std::move (x));
        }

        const EnergyConfigurationData::VaporSpecificHeat_optional& EnergyConfigurationData::
        VaporSpecificHeat () const
        {
          return this->VaporSpecificHeat_;
        }

        EnergyConfigurationData::VaporSpecificHeat_optional& EnergyConfigurationData::
        VaporSpecificHeat ()
        {
          return this->VaporSpecificHeat_;
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (const VaporSpecificHeat_type& x)
        {
          this->VaporSpecificHeat_.set (x);
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (const VaporSpecificHeat_optional& x)
        {
          this->VaporSpecificHeat_ = x;
        }

        void EnergyConfigurationData::
        VaporSpecificHeat (::std::unique_ptr< VaporSpecificHeat_type > x)
        {
          this->VaporSpecificHeat_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnergyConfigurationData
        //

        EnergyConfigurationData::
        EnergyConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          BodySpecificHeat_ (this),
          CoreTemperatureLow_ (this),
          CoreTemperatureHigh_ (this),
          DeltaCoreTemperatureLow_ (this),
          EnergyPerATP_ (this),
          SweatHeatTransfer_ (this),
          VaporizationEnergy_ (this),
          VaporSpecificHeat_ (this)
        {
        }

        EnergyConfigurationData::
        EnergyConfigurationData (const EnergyConfigurationData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          BodySpecificHeat_ (x.BodySpecificHeat_, f, this),
          CoreTemperatureLow_ (x.CoreTemperatureLow_, f, this),
          CoreTemperatureHigh_ (x.CoreTemperatureHigh_, f, this),
          DeltaCoreTemperatureLow_ (x.DeltaCoreTemperatureLow_, f, this),
          EnergyPerATP_ (x.EnergyPerATP_, f, this),
          SweatHeatTransfer_ (x.SweatHeatTransfer_, f, this),
          VaporizationEnergy_ (x.VaporizationEnergy_, f, this),
          VaporSpecificHeat_ (x.VaporSpecificHeat_, f, this)
        {
        }

        EnergyConfigurationData::
        EnergyConfigurationData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          BodySpecificHeat_ (this),
          CoreTemperatureLow_ (this),
          CoreTemperatureHigh_ (this),
          DeltaCoreTemperatureLow_ (this),
          EnergyPerATP_ (this),
          SweatHeatTransfer_ (this),
          VaporizationEnergy_ (this),
          VaporSpecificHeat_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnergyConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BodySpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BodySpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BodySpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BodySpecificHeat_)
                {
                  ::std::unique_ptr< BodySpecificHeat_type > r (
                    dynamic_cast< BodySpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BodySpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperatureLow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperatureLow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperatureLow_)
                {
                  ::std::unique_ptr< CoreTemperatureLow_type > r (
                    dynamic_cast< CoreTemperatureLow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperatureLow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperatureHigh
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperatureHigh",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperatureHigh_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperatureHigh_)
                {
                  ::std::unique_ptr< CoreTemperatureHigh_type > r (
                    dynamic_cast< CoreTemperatureHigh_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperatureHigh_.set (::std::move (r));
                  continue;
                }
              }
            }

            // DeltaCoreTemperatureLow
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "DeltaCoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< DeltaCoreTemperatureLow_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->DeltaCoreTemperatureLow_)
                {
                  ::std::unique_ptr< DeltaCoreTemperatureLow_type > r (
                    dynamic_cast< DeltaCoreTemperatureLow_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->DeltaCoreTemperatureLow_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EnergyPerATP
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EnergyPerATP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EnergyPerATP_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EnergyPerATP_)
                {
                  ::std::unique_ptr< EnergyPerATP_type > r (
                    dynamic_cast< EnergyPerATP_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EnergyPerATP_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SweatHeatTransfer
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SweatHeatTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SweatHeatTransfer_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SweatHeatTransfer_)
                {
                  ::std::unique_ptr< SweatHeatTransfer_type > r (
                    dynamic_cast< SweatHeatTransfer_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SweatHeatTransfer_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VaporizationEnergy
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VaporizationEnergy",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VaporizationEnergy_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VaporizationEnergy_)
                {
                  ::std::unique_ptr< VaporizationEnergy_type > r (
                    dynamic_cast< VaporizationEnergy_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VaporizationEnergy_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VaporSpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VaporSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VaporSpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VaporSpecificHeat_)
                {
                  ::std::unique_ptr< VaporSpecificHeat_type > r (
                    dynamic_cast< VaporSpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VaporSpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnergyConfigurationData* EnergyConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnergyConfigurationData (*this, f, c);
        }

        EnergyConfigurationData& EnergyConfigurationData::
        operator= (const EnergyConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->BodySpecificHeat_ = x.BodySpecificHeat_;
            this->CoreTemperatureLow_ = x.CoreTemperatureLow_;
            this->CoreTemperatureHigh_ = x.CoreTemperatureHigh_;
            this->DeltaCoreTemperatureLow_ = x.DeltaCoreTemperatureLow_;
            this->EnergyPerATP_ = x.EnergyPerATP_;
            this->SweatHeatTransfer_ = x.SweatHeatTransfer_;
            this->VaporizationEnergy_ = x.VaporizationEnergy_;
            this->VaporSpecificHeat_ = x.VaporSpecificHeat_;
          }

          return *this;
        }

        EnergyConfigurationData::
        ~EnergyConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_type_factory_init (
          "EnergyConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const EnergyConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BodySpecificHeat ())
            {
              o << ::std::endl << "BodySpecificHeat: ";
              om.insert (o, *i.BodySpecificHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperatureLow ())
            {
              o << ::std::endl << "CoreTemperatureLow: ";
              om.insert (o, *i.CoreTemperatureLow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperatureHigh ())
            {
              o << ::std::endl << "CoreTemperatureHigh: ";
              om.insert (o, *i.CoreTemperatureHigh ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.DeltaCoreTemperatureLow ())
            {
              o << ::std::endl << "DeltaCoreTemperatureLow: ";
              om.insert (o, *i.DeltaCoreTemperatureLow ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EnergyPerATP ())
            {
              o << ::std::endl << "EnergyPerATP: ";
              om.insert (o, *i.EnergyPerATP ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SweatHeatTransfer ())
            {
              o << ::std::endl << "SweatHeatTransfer: ";
              om.insert (o, *i.SweatHeatTransfer ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VaporizationEnergy ())
            {
              o << ::std::endl << "VaporizationEnergy: ";
              om.insert (o, *i.VaporizationEnergy ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VaporSpecificHeat ())
            {
              o << ::std::endl << "VaporSpecificHeat: ";
              om.insert (o, *i.VaporSpecificHeat ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const EnergyConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // BodySpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BodySpecificHeat ())
            {
              const EnergyConfigurationData::BodySpecificHeat_type& x (*i.BodySpecificHeat ());
              if (typeid (EnergyConfigurationData::BodySpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BodySpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BodySpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperatureLow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperatureLow ())
            {
              const EnergyConfigurationData::CoreTemperatureLow_type& x (*i.CoreTemperatureLow ());
              if (typeid (EnergyConfigurationData::CoreTemperatureLow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperatureLow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperatureHigh
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperatureHigh ())
            {
              const EnergyConfigurationData::CoreTemperatureHigh_type& x (*i.CoreTemperatureHigh ());
              if (typeid (EnergyConfigurationData::CoreTemperatureHigh_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperatureHigh",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperatureHigh",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // DeltaCoreTemperatureLow
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.DeltaCoreTemperatureLow ())
            {
              const EnergyConfigurationData::DeltaCoreTemperatureLow_type& x (*i.DeltaCoreTemperatureLow ());
              if (typeid (EnergyConfigurationData::DeltaCoreTemperatureLow_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "DeltaCoreTemperatureLow",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "DeltaCoreTemperatureLow",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EnergyPerATP
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EnergyPerATP ())
            {
              const EnergyConfigurationData::EnergyPerATP_type& x (*i.EnergyPerATP ());
              if (typeid (EnergyConfigurationData::EnergyPerATP_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EnergyPerATP",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EnergyPerATP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SweatHeatTransfer
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SweatHeatTransfer ())
            {
              const EnergyConfigurationData::SweatHeatTransfer_type& x (*i.SweatHeatTransfer ());
              if (typeid (EnergyConfigurationData::SweatHeatTransfer_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SweatHeatTransfer",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SweatHeatTransfer",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VaporizationEnergy
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VaporizationEnergy ())
            {
              const EnergyConfigurationData::VaporizationEnergy_type& x (*i.VaporizationEnergy ());
              if (typeid (EnergyConfigurationData::VaporizationEnergy_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VaporizationEnergy",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VaporizationEnergy",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VaporSpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VaporSpecificHeat ())
            {
              const EnergyConfigurationData::VaporSpecificHeat_type& x (*i.VaporSpecificHeat ());
              if (typeid (EnergyConfigurationData::VaporSpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VaporSpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VaporSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnergyConfigurationData >
        _xsd_EnergyConfigurationData_type_serializer_init (
          "EnergyConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


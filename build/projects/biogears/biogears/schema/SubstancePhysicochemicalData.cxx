// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SubstancePhysicochemicalData.hxx"

#include "ScalarData.hxx"

#include "enumSubstanceBindingProtein.hxx"

#include "ScalarFractionData.hxx"

#include "enumSubstanceIonicState.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstancePhysicochemicalData
        // 

        const SubstancePhysicochemicalData::AcidDissociationConstant_type& SubstancePhysicochemicalData::
        AcidDissociationConstant () const
        {
          return this->AcidDissociationConstant_.get ();
        }

        SubstancePhysicochemicalData::AcidDissociationConstant_type& SubstancePhysicochemicalData::
        AcidDissociationConstant ()
        {
          return this->AcidDissociationConstant_.get ();
        }

        void SubstancePhysicochemicalData::
        AcidDissociationConstant (const AcidDissociationConstant_type& x)
        {
          this->AcidDissociationConstant_.set (x);
        }

        void SubstancePhysicochemicalData::
        AcidDissociationConstant (::std::unique_ptr< AcidDissociationConstant_type > x)
        {
          this->AcidDissociationConstant_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::BindingProtein_type& SubstancePhysicochemicalData::
        BindingProtein () const
        {
          return this->BindingProtein_.get ();
        }

        SubstancePhysicochemicalData::BindingProtein_type& SubstancePhysicochemicalData::
        BindingProtein ()
        {
          return this->BindingProtein_.get ();
        }

        void SubstancePhysicochemicalData::
        BindingProtein (const BindingProtein_type& x)
        {
          this->BindingProtein_.set (x);
        }

        void SubstancePhysicochemicalData::
        BindingProtein (::std::unique_ptr< BindingProtein_type > x)
        {
          this->BindingProtein_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::BloodPlasmaRatio_type& SubstancePhysicochemicalData::
        BloodPlasmaRatio () const
        {
          return this->BloodPlasmaRatio_.get ();
        }

        SubstancePhysicochemicalData::BloodPlasmaRatio_type& SubstancePhysicochemicalData::
        BloodPlasmaRatio ()
        {
          return this->BloodPlasmaRatio_.get ();
        }

        void SubstancePhysicochemicalData::
        BloodPlasmaRatio (const BloodPlasmaRatio_type& x)
        {
          this->BloodPlasmaRatio_.set (x);
        }

        void SubstancePhysicochemicalData::
        BloodPlasmaRatio (::std::unique_ptr< BloodPlasmaRatio_type > x)
        {
          this->BloodPlasmaRatio_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::FractionUnboundInPlasma_type& SubstancePhysicochemicalData::
        FractionUnboundInPlasma () const
        {
          return this->FractionUnboundInPlasma_.get ();
        }

        SubstancePhysicochemicalData::FractionUnboundInPlasma_type& SubstancePhysicochemicalData::
        FractionUnboundInPlasma ()
        {
          return this->FractionUnboundInPlasma_.get ();
        }

        void SubstancePhysicochemicalData::
        FractionUnboundInPlasma (const FractionUnboundInPlasma_type& x)
        {
          this->FractionUnboundInPlasma_.set (x);
        }

        void SubstancePhysicochemicalData::
        FractionUnboundInPlasma (::std::unique_ptr< FractionUnboundInPlasma_type > x)
        {
          this->FractionUnboundInPlasma_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::IonicState_type& SubstancePhysicochemicalData::
        IonicState () const
        {
          return this->IonicState_.get ();
        }

        SubstancePhysicochemicalData::IonicState_type& SubstancePhysicochemicalData::
        IonicState ()
        {
          return this->IonicState_.get ();
        }

        void SubstancePhysicochemicalData::
        IonicState (const IonicState_type& x)
        {
          this->IonicState_.set (x);
        }

        void SubstancePhysicochemicalData::
        IonicState (::std::unique_ptr< IonicState_type > x)
        {
          this->IonicState_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::LogP_type& SubstancePhysicochemicalData::
        LogP () const
        {
          return this->LogP_.get ();
        }

        SubstancePhysicochemicalData::LogP_type& SubstancePhysicochemicalData::
        LogP ()
        {
          return this->LogP_.get ();
        }

        void SubstancePhysicochemicalData::
        LogP (const LogP_type& x)
        {
          this->LogP_.set (x);
        }

        void SubstancePhysicochemicalData::
        LogP (::std::unique_ptr< LogP_type > x)
        {
          this->LogP_.set (std::move (x));
        }

        const SubstancePhysicochemicalData::OralAbsorptionRateConstant_optional& SubstancePhysicochemicalData::
        OralAbsorptionRateConstant () const
        {
          return this->OralAbsorptionRateConstant_;
        }

        SubstancePhysicochemicalData::OralAbsorptionRateConstant_optional& SubstancePhysicochemicalData::
        OralAbsorptionRateConstant ()
        {
          return this->OralAbsorptionRateConstant_;
        }

        void SubstancePhysicochemicalData::
        OralAbsorptionRateConstant (const OralAbsorptionRateConstant_type& x)
        {
          this->OralAbsorptionRateConstant_.set (x);
        }

        void SubstancePhysicochemicalData::
        OralAbsorptionRateConstant (const OralAbsorptionRateConstant_optional& x)
        {
          this->OralAbsorptionRateConstant_ = x;
        }

        void SubstancePhysicochemicalData::
        OralAbsorptionRateConstant (::std::unique_ptr< OralAbsorptionRateConstant_type > x)
        {
          this->OralAbsorptionRateConstant_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // SubstancePhysicochemicalData
        //

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AcidDissociationConstant_ (this),
          BindingProtein_ (this),
          BloodPlasmaRatio_ (this),
          FractionUnboundInPlasma_ (this),
          IonicState_ (this),
          LogP_ (this),
          OralAbsorptionRateConstant_ (this)
        {
        }

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData (const AcidDissociationConstant_type& AcidDissociationConstant,
                                      const BindingProtein_type& BindingProtein,
                                      const BloodPlasmaRatio_type& BloodPlasmaRatio,
                                      const FractionUnboundInPlasma_type& FractionUnboundInPlasma,
                                      const IonicState_type& IonicState,
                                      const LogP_type& LogP)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AcidDissociationConstant_ (AcidDissociationConstant, this),
          BindingProtein_ (BindingProtein, this),
          BloodPlasmaRatio_ (BloodPlasmaRatio, this),
          FractionUnboundInPlasma_ (FractionUnboundInPlasma, this),
          IonicState_ (IonicState, this),
          LogP_ (LogP, this),
          OralAbsorptionRateConstant_ (this)
        {
        }

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData (::std::unique_ptr< AcidDissociationConstant_type > AcidDissociationConstant,
                                      const BindingProtein_type& BindingProtein,
                                      ::std::unique_ptr< BloodPlasmaRatio_type > BloodPlasmaRatio,
                                      ::std::unique_ptr< FractionUnboundInPlasma_type > FractionUnboundInPlasma,
                                      const IonicState_type& IonicState,
                                      ::std::unique_ptr< LogP_type > LogP)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AcidDissociationConstant_ (std::move (AcidDissociationConstant), this),
          BindingProtein_ (BindingProtein, this),
          BloodPlasmaRatio_ (std::move (BloodPlasmaRatio), this),
          FractionUnboundInPlasma_ (std::move (FractionUnboundInPlasma), this),
          IonicState_ (IonicState, this),
          LogP_ (std::move (LogP), this),
          OralAbsorptionRateConstant_ (this)
        {
        }

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData (::std::unique_ptr< AcidDissociationConstant_type > AcidDissociationConstant,
                                      ::std::unique_ptr< BindingProtein_type > BindingProtein,
                                      ::std::unique_ptr< BloodPlasmaRatio_type > BloodPlasmaRatio,
                                      ::std::unique_ptr< FractionUnboundInPlasma_type > FractionUnboundInPlasma,
                                      ::std::unique_ptr< IonicState_type > IonicState,
                                      ::std::unique_ptr< LogP_type > LogP)
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AcidDissociationConstant_ (std::move (AcidDissociationConstant), this),
          BindingProtein_ (std::move (BindingProtein), this),
          BloodPlasmaRatio_ (std::move (BloodPlasmaRatio), this),
          FractionUnboundInPlasma_ (std::move (FractionUnboundInPlasma), this),
          IonicState_ (std::move (IonicState), this),
          LogP_ (std::move (LogP), this),
          OralAbsorptionRateConstant_ (this)
        {
        }

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData (const SubstancePhysicochemicalData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          AcidDissociationConstant_ (x.AcidDissociationConstant_, f, this),
          BindingProtein_ (x.BindingProtein_, f, this),
          BloodPlasmaRatio_ (x.BloodPlasmaRatio_, f, this),
          FractionUnboundInPlasma_ (x.FractionUnboundInPlasma_, f, this),
          IonicState_ (x.IonicState_, f, this),
          LogP_ (x.LogP_, f, this),
          OralAbsorptionRateConstant_ (x.OralAbsorptionRateConstant_, f, this)
        {
        }

        SubstancePhysicochemicalData::
        SubstancePhysicochemicalData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          AcidDissociationConstant_ (this),
          BindingProtein_ (this),
          BloodPlasmaRatio_ (this),
          FractionUnboundInPlasma_ (this),
          IonicState_ (this),
          LogP_ (this),
          OralAbsorptionRateConstant_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void SubstancePhysicochemicalData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AcidDissociationConstant
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AcidDissociationConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AcidDissociationConstant_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!AcidDissociationConstant_.present ())
                {
                  ::std::unique_ptr< AcidDissociationConstant_type > r (
                    dynamic_cast< AcidDissociationConstant_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AcidDissociationConstant_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BindingProtein
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BindingProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BindingProtein_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BindingProtein_.present ())
                {
                  ::std::unique_ptr< BindingProtein_type > r (
                    dynamic_cast< BindingProtein_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BindingProtein_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BloodPlasmaRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BloodPlasmaRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BloodPlasmaRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!BloodPlasmaRatio_.present ())
                {
                  ::std::unique_ptr< BloodPlasmaRatio_type > r (
                    dynamic_cast< BloodPlasmaRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BloodPlasmaRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FractionUnboundInPlasma
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FractionUnboundInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FractionUnboundInPlasma_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!FractionUnboundInPlasma_.present ())
                {
                  ::std::unique_ptr< FractionUnboundInPlasma_type > r (
                    dynamic_cast< FractionUnboundInPlasma_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FractionUnboundInPlasma_.set (::std::move (r));
                  continue;
                }
              }
            }

            // IonicState
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "IonicState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< IonicState_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!IonicState_.present ())
                {
                  ::std::unique_ptr< IonicState_type > r (
                    dynamic_cast< IonicState_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->IonicState_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LogP
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LogP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LogP_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!LogP_.present ())
                {
                  ::std::unique_ptr< LogP_type > r (
                    dynamic_cast< LogP_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LogP_.set (::std::move (r));
                  continue;
                }
              }
            }

            // OralAbsorptionRateConstant
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "OralAbsorptionRateConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< OralAbsorptionRateConstant_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->OralAbsorptionRateConstant_)
                {
                  ::std::unique_ptr< OralAbsorptionRateConstant_type > r (
                    dynamic_cast< OralAbsorptionRateConstant_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->OralAbsorptionRateConstant_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!AcidDissociationConstant_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AcidDissociationConstant",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BindingProtein_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BindingProtein",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!BloodPlasmaRatio_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BloodPlasmaRatio",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!FractionUnboundInPlasma_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FractionUnboundInPlasma",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!IonicState_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IonicState",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!LogP_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogP",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        SubstancePhysicochemicalData* SubstancePhysicochemicalData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class SubstancePhysicochemicalData (*this, f, c);
        }

        SubstancePhysicochemicalData& SubstancePhysicochemicalData::
        operator= (const SubstancePhysicochemicalData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->AcidDissociationConstant_ = x.AcidDissociationConstant_;
            this->BindingProtein_ = x.BindingProtein_;
            this->BloodPlasmaRatio_ = x.BloodPlasmaRatio_;
            this->FractionUnboundInPlasma_ = x.FractionUnboundInPlasma_;
            this->IonicState_ = x.IonicState_;
            this->LogP_ = x.LogP_;
            this->OralAbsorptionRateConstant_ = x.OralAbsorptionRateConstant_;
          }

          return *this;
        }

        SubstancePhysicochemicalData::
        ~SubstancePhysicochemicalData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubstancePhysicochemicalData >
        _xsd_SubstancePhysicochemicalData_type_factory_init (
          "SubstancePhysicochemicalData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const SubstancePhysicochemicalData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "AcidDissociationConstant: ";
            om.insert (o, i.AcidDissociationConstant ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BindingProtein: ";
            om.insert (o, i.BindingProtein ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "BloodPlasmaRatio: ";
            om.insert (o, i.BloodPlasmaRatio ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "FractionUnboundInPlasma: ";
            om.insert (o, i.FractionUnboundInPlasma ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "IonicState: ";
            om.insert (o, i.IonicState ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "LogP: ";
            om.insert (o, i.LogP ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.OralAbsorptionRateConstant ())
            {
              o << ::std::endl << "OralAbsorptionRateConstant: ";
              om.insert (o, *i.OralAbsorptionRateConstant ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubstancePhysicochemicalData >
        _xsd_SubstancePhysicochemicalData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const SubstancePhysicochemicalData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // AcidDissociationConstant
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::AcidDissociationConstant_type& x (i.AcidDissociationConstant ());
            if (typeid (SubstancePhysicochemicalData::AcidDissociationConstant_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "AcidDissociationConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "AcidDissociationConstant",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BindingProtein
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::BindingProtein_type& x (i.BindingProtein ());
            if (typeid (SubstancePhysicochemicalData::BindingProtein_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BindingProtein",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BindingProtein",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // BloodPlasmaRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::BloodPlasmaRatio_type& x (i.BloodPlasmaRatio ());
            if (typeid (SubstancePhysicochemicalData::BloodPlasmaRatio_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "BloodPlasmaRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "BloodPlasmaRatio",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FractionUnboundInPlasma
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::FractionUnboundInPlasma_type& x (i.FractionUnboundInPlasma ());
            if (typeid (SubstancePhysicochemicalData::FractionUnboundInPlasma_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "FractionUnboundInPlasma",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "FractionUnboundInPlasma",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // IonicState
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::IonicState_type& x (i.IonicState ());
            if (typeid (SubstancePhysicochemicalData::IonicState_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "IonicState",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "IonicState",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // LogP
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const SubstancePhysicochemicalData::LogP_type& x (i.LogP ());
            if (typeid (SubstancePhysicochemicalData::LogP_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "LogP",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "LogP",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // OralAbsorptionRateConstant
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.OralAbsorptionRateConstant ())
            {
              const SubstancePhysicochemicalData::OralAbsorptionRateConstant_type& x (*i.OralAbsorptionRateConstant ());
              if (typeid (SubstancePhysicochemicalData::OralAbsorptionRateConstant_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "OralAbsorptionRateConstant",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "OralAbsorptionRateConstant",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubstancePhysicochemicalData >
        _xsd_SubstancePhysicochemicalData_type_serializer_init (
          "SubstancePhysicochemicalData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


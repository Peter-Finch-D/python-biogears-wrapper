// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "NeedleDecompressionData.hxx"

#include "enumOnOff.hxx"

#include "enumSide.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // NeedleDecompressionData
        // 

        const NeedleDecompressionData::State_type& NeedleDecompressionData::
        State () const
        {
          return this->State_.get ();
        }

        NeedleDecompressionData::State_type& NeedleDecompressionData::
        State ()
        {
          return this->State_.get ();
        }

        void NeedleDecompressionData::
        State (const State_type& x)
        {
          this->State_.set (x);
        }

        void NeedleDecompressionData::
        State (::std::unique_ptr< State_type > x)
        {
          this->State_.set (std::move (x));
        }

        const NeedleDecompressionData::Side_type& NeedleDecompressionData::
        Side () const
        {
          return this->Side_.get ();
        }

        NeedleDecompressionData::Side_type& NeedleDecompressionData::
        Side ()
        {
          return this->Side_.get ();
        }

        void NeedleDecompressionData::
        Side (const Side_type& x)
        {
          this->Side_.set (x);
        }

        void NeedleDecompressionData::
        Side (::std::unique_ptr< Side_type > x)
        {
          this->Side_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // NeedleDecompressionData
        //

        NeedleDecompressionData::
        NeedleDecompressionData ()
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (this),
          Side_ (this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const State_type& State,
                                 const Side_type& Side)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (),
          State_ (State, this),
          Side_ (Side, this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const NeedleDecompressionData& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (x, f, c),
          State_ (x.State_, f, this),
          Side_ (x.Side_, f, this)
        {
        }

        NeedleDecompressionData::
        NeedleDecompressionData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientActionData (e, f | ::xml_schema::flags::base, c),
          State_ (this),
          Side_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NeedleDecompressionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientActionData::parse (p, f);

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "State" && n.namespace_ ().empty ())
            {
              this->State_.set (State_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "Side" && n.namespace_ ().empty ())
            {
              this->Side_.set (Side_traits::create (i, f, this));
              continue;
            }
          }

          if (!State_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "State",
              "");
          }

          if (!Side_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Side",
              "");
          }
        }

        NeedleDecompressionData* NeedleDecompressionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NeedleDecompressionData (*this, f, c);
        }

        NeedleDecompressionData& NeedleDecompressionData::
        operator= (const NeedleDecompressionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientActionData& > (*this) = x;
            this->State_ = x.State_;
            this->Side_ = x.Side_;
          }

          return *this;
        }

        NeedleDecompressionData::
        ~NeedleDecompressionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_type_factory_init (
          "NeedleDecompressionData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const NeedleDecompressionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          o << ::std::endl << "State: " << i.State ();
          o << ::std::endl << "Side: " << i.Side ();
          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const NeedleDecompressionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientActionData& > (i);

          // State
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "State",
                e));

            a << i.State ();
          }

          // Side
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Side",
                e));

            a << i.Side ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NeedleDecompressionData >
        _xsd_NeedleDecompressionData_type_serializer_init (
          "NeedleDecompressionData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


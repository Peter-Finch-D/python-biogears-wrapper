// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "TissueCompartmentData.hxx"

#include "ScalarMassPerMassData.hxx"

#include "ScalarVolumeData.hxx"

#include "ScalarElectricPotentialData.hxx"

#include "ScalarFractionData.hxx"

#include "Scalar0To1Data.hxx"

#include "ScalarData.hxx"

#include "ScalarMassData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TissueCompartmentData
        // 

        const TissueCompartmentData::AcidicPhospohlipidConcentration_optional& TissueCompartmentData::
        AcidicPhospohlipidConcentration () const
        {
          return this->AcidicPhospohlipidConcentration_;
        }

        TissueCompartmentData::AcidicPhospohlipidConcentration_optional& TissueCompartmentData::
        AcidicPhospohlipidConcentration ()
        {
          return this->AcidicPhospohlipidConcentration_;
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_type& x)
        {
          this->AcidicPhospohlipidConcentration_.set (x);
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_optional& x)
        {
          this->AcidicPhospohlipidConcentration_ = x;
        }

        void TissueCompartmentData::
        AcidicPhospohlipidConcentration (::std::unique_ptr< AcidicPhospohlipidConcentration_type > x)
        {
          this->AcidicPhospohlipidConcentration_.set (std::move (x));
        }

        const TissueCompartmentData::MatrixVolume_optional& TissueCompartmentData::
        MatrixVolume () const
        {
          return this->MatrixVolume_;
        }

        TissueCompartmentData::MatrixVolume_optional& TissueCompartmentData::
        MatrixVolume ()
        {
          return this->MatrixVolume_;
        }

        void TissueCompartmentData::
        MatrixVolume (const MatrixVolume_type& x)
        {
          this->MatrixVolume_.set (x);
        }

        void TissueCompartmentData::
        MatrixVolume (const MatrixVolume_optional& x)
        {
          this->MatrixVolume_ = x;
        }

        void TissueCompartmentData::
        MatrixVolume (::std::unique_ptr< MatrixVolume_type > x)
        {
          this->MatrixVolume_.set (std::move (x));
        }

        const TissueCompartmentData::MembranePotential_optional& TissueCompartmentData::
        MembranePotential () const
        {
          return this->MembranePotential_;
        }

        TissueCompartmentData::MembranePotential_optional& TissueCompartmentData::
        MembranePotential ()
        {
          return this->MembranePotential_;
        }

        void TissueCompartmentData::
        MembranePotential (const MembranePotential_type& x)
        {
          this->MembranePotential_.set (x);
        }

        void TissueCompartmentData::
        MembranePotential (const MembranePotential_optional& x)
        {
          this->MembranePotential_ = x;
        }

        void TissueCompartmentData::
        MembranePotential (::std::unique_ptr< MembranePotential_type > x)
        {
          this->MembranePotential_.set (std::move (x));
        }

        const TissueCompartmentData::NeutralLipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralLipidsVolumeFraction () const
        {
          return this->NeutralLipidsVolumeFraction_;
        }

        TissueCompartmentData::NeutralLipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralLipidsVolumeFraction ()
        {
          return this->NeutralLipidsVolumeFraction_;
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_type& x)
        {
          this->NeutralLipidsVolumeFraction_.set (x);
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_optional& x)
        {
          this->NeutralLipidsVolumeFraction_ = x;
        }

        void TissueCompartmentData::
        NeutralLipidsVolumeFraction (::std::unique_ptr< NeutralLipidsVolumeFraction_type > x)
        {
          this->NeutralLipidsVolumeFraction_.set (std::move (x));
        }

        const TissueCompartmentData::NeutralPhospholipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction () const
        {
          return this->NeutralPhospholipidsVolumeFraction_;
        }

        TissueCompartmentData::NeutralPhospholipidsVolumeFraction_optional& TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction ()
        {
          return this->NeutralPhospholipidsVolumeFraction_;
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_type& x)
        {
          this->NeutralPhospholipidsVolumeFraction_.set (x);
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_optional& x)
        {
          this->NeutralPhospholipidsVolumeFraction_ = x;
        }

        void TissueCompartmentData::
        NeutralPhospholipidsVolumeFraction (::std::unique_ptr< NeutralPhospholipidsVolumeFraction_type > x)
        {
          this->NeutralPhospholipidsVolumeFraction_.set (std::move (x));
        }

        const TissueCompartmentData::ReflectionCoefficient_optional& TissueCompartmentData::
        ReflectionCoefficient () const
        {
          return this->ReflectionCoefficient_;
        }

        TissueCompartmentData::ReflectionCoefficient_optional& TissueCompartmentData::
        ReflectionCoefficient ()
        {
          return this->ReflectionCoefficient_;
        }

        void TissueCompartmentData::
        ReflectionCoefficient (const ReflectionCoefficient_type& x)
        {
          this->ReflectionCoefficient_.set (x);
        }

        void TissueCompartmentData::
        ReflectionCoefficient (const ReflectionCoefficient_optional& x)
        {
          this->ReflectionCoefficient_ = x;
        }

        void TissueCompartmentData::
        ReflectionCoefficient (::std::unique_ptr< ReflectionCoefficient_type > x)
        {
          this->ReflectionCoefficient_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaAlbuminRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlbuminRatio () const
        {
          return this->TissueToPlasmaAlbuminRatio_;
        }

        TissueCompartmentData::TissueToPlasmaAlbuminRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlbuminRatio ()
        {
          return this->TissueToPlasmaAlbuminRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_type& x)
        {
          this->TissueToPlasmaAlbuminRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_optional& x)
        {
          this->TissueToPlasmaAlbuminRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlbuminRatio (::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > x)
        {
          this->TissueToPlasmaAlbuminRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio () const
        {
          return this->TissueToPlasmaAlphaAcidGlycoproteinRatio_;
        }

        TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio ()
        {
          return this->TissueToPlasmaAlphaAcidGlycoproteinRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_type& x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaAlphaAcidGlycoproteinRatio (::std::unique_ptr< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > x)
        {
          this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TissueToPlasmaLipoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio () const
        {
          return this->TissueToPlasmaLipoproteinRatio_;
        }

        TissueCompartmentData::TissueToPlasmaLipoproteinRatio_optional& TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio ()
        {
          return this->TissueToPlasmaLipoproteinRatio_;
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_type& x)
        {
          this->TissueToPlasmaLipoproteinRatio_.set (x);
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_optional& x)
        {
          this->TissueToPlasmaLipoproteinRatio_ = x;
        }

        void TissueCompartmentData::
        TissueToPlasmaLipoproteinRatio (::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > x)
        {
          this->TissueToPlasmaLipoproteinRatio_.set (std::move (x));
        }

        const TissueCompartmentData::TotalMass_optional& TissueCompartmentData::
        TotalMass () const
        {
          return this->TotalMass_;
        }

        TissueCompartmentData::TotalMass_optional& TissueCompartmentData::
        TotalMass ()
        {
          return this->TotalMass_;
        }

        void TissueCompartmentData::
        TotalMass (const TotalMass_type& x)
        {
          this->TotalMass_.set (x);
        }

        void TissueCompartmentData::
        TotalMass (const TotalMass_optional& x)
        {
          this->TotalMass_ = x;
        }

        void TissueCompartmentData::
        TotalMass (::std::unique_ptr< TotalMass_type > x)
        {
          this->TotalMass_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // TissueCompartmentData
        //

        TissueCompartmentData::
        TissueCompartmentData ()
        : ::mil::tatrc::physiology::datamodel::CompartmentData (),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (Name),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (std::move (Name)),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const TissueCompartmentData& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (x, f, c),
          AcidicPhospohlipidConcentration_ (x.AcidicPhospohlipidConcentration_, f, this),
          MatrixVolume_ (x.MatrixVolume_, f, this),
          MembranePotential_ (x.MembranePotential_, f, this),
          NeutralLipidsVolumeFraction_ (x.NeutralLipidsVolumeFraction_, f, this),
          NeutralPhospholipidsVolumeFraction_ (x.NeutralPhospholipidsVolumeFraction_, f, this),
          ReflectionCoefficient_ (x.ReflectionCoefficient_, f, this),
          TissueToPlasmaAlbuminRatio_ (x.TissueToPlasmaAlbuminRatio_, f, this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (x.TissueToPlasmaAlphaAcidGlycoproteinRatio_, f, this),
          TissueToPlasmaLipoproteinRatio_ (x.TissueToPlasmaLipoproteinRatio_, f, this),
          TotalMass_ (x.TotalMass_, f, this)
        {
        }

        TissueCompartmentData::
        TissueCompartmentData (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CompartmentData (e, f | ::xml_schema::flags::base, c),
          AcidicPhospohlipidConcentration_ (this),
          MatrixVolume_ (this),
          MembranePotential_ (this),
          NeutralLipidsVolumeFraction_ (this),
          NeutralPhospholipidsVolumeFraction_ (this),
          ReflectionCoefficient_ (this),
          TissueToPlasmaAlbuminRatio_ (this),
          TissueToPlasmaAlphaAcidGlycoproteinRatio_ (this),
          TissueToPlasmaLipoproteinRatio_ (this),
          TotalMass_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void TissueCompartmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CompartmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AcidicPhospohlipidConcentration
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AcidicPhospohlipidConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AcidicPhospohlipidConcentration_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AcidicPhospohlipidConcentration_)
                {
                  ::std::unique_ptr< AcidicPhospohlipidConcentration_type > r (
                    dynamic_cast< AcidicPhospohlipidConcentration_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AcidicPhospohlipidConcentration_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MatrixVolume
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MatrixVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MatrixVolume_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MatrixVolume_)
                {
                  ::std::unique_ptr< MatrixVolume_type > r (
                    dynamic_cast< MatrixVolume_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MatrixVolume_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MembranePotential
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MembranePotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MembranePotential_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MembranePotential_)
                {
                  ::std::unique_ptr< MembranePotential_type > r (
                    dynamic_cast< MembranePotential_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MembranePotential_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutralLipidsVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutralLipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutralLipidsVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeutralLipidsVolumeFraction_)
                {
                  ::std::unique_ptr< NeutralLipidsVolumeFraction_type > r (
                    dynamic_cast< NeutralLipidsVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutralLipidsVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeutralPhospholipidsVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeutralPhospholipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeutralPhospholipidsVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeutralPhospholipidsVolumeFraction_)
                {
                  ::std::unique_ptr< NeutralPhospholipidsVolumeFraction_type > r (
                    dynamic_cast< NeutralPhospholipidsVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeutralPhospholipidsVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReflectionCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReflectionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReflectionCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReflectionCoefficient_)
                {
                  ::std::unique_ptr< ReflectionCoefficient_type > r (
                    dynamic_cast< ReflectionCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReflectionCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaAlbuminRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaAlbuminRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaAlbuminRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaAlbuminRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > r (
                    dynamic_cast< TissueToPlasmaAlbuminRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaAlbuminRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaAlphaAcidGlycoproteinRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaAlphaAcidGlycoproteinRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaAlphaAcidGlycoproteinRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > r (
                    dynamic_cast< TissueToPlasmaAlphaAcidGlycoproteinRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaAlphaAcidGlycoproteinRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TissueToPlasmaLipoproteinRatio
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueToPlasmaLipoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueToPlasmaLipoproteinRatio_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TissueToPlasmaLipoproteinRatio_)
                {
                  ::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > r (
                    dynamic_cast< TissueToPlasmaLipoproteinRatio_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TissueToPlasmaLipoproteinRatio_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalMass
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalMass_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalMass_)
                {
                  ::std::unique_ptr< TotalMass_type > r (
                    dynamic_cast< TotalMass_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalMass_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        TissueCompartmentData* TissueCompartmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class TissueCompartmentData (*this, f, c);
        }

        TissueCompartmentData& TissueCompartmentData::
        operator= (const TissueCompartmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CompartmentData& > (*this) = x;
            this->AcidicPhospohlipidConcentration_ = x.AcidicPhospohlipidConcentration_;
            this->MatrixVolume_ = x.MatrixVolume_;
            this->MembranePotential_ = x.MembranePotential_;
            this->NeutralLipidsVolumeFraction_ = x.NeutralLipidsVolumeFraction_;
            this->NeutralPhospholipidsVolumeFraction_ = x.NeutralPhospholipidsVolumeFraction_;
            this->ReflectionCoefficient_ = x.ReflectionCoefficient_;
            this->TissueToPlasmaAlbuminRatio_ = x.TissueToPlasmaAlbuminRatio_;
            this->TissueToPlasmaAlphaAcidGlycoproteinRatio_ = x.TissueToPlasmaAlphaAcidGlycoproteinRatio_;
            this->TissueToPlasmaLipoproteinRatio_ = x.TissueToPlasmaLipoproteinRatio_;
            this->TotalMass_ = x.TotalMass_;
          }

          return *this;
        }

        TissueCompartmentData::
        ~TissueCompartmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_type_factory_init (
          "TissueCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const TissueCompartmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AcidicPhospohlipidConcentration ())
            {
              o << ::std::endl << "AcidicPhospohlipidConcentration: ";
              om.insert (o, *i.AcidicPhospohlipidConcentration ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MatrixVolume ())
            {
              o << ::std::endl << "MatrixVolume: ";
              om.insert (o, *i.MatrixVolume ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MembranePotential ())
            {
              o << ::std::endl << "MembranePotential: ";
              om.insert (o, *i.MembranePotential ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeutralLipidsVolumeFraction ())
            {
              o << ::std::endl << "NeutralLipidsVolumeFraction: ";
              om.insert (o, *i.NeutralLipidsVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeutralPhospholipidsVolumeFraction ())
            {
              o << ::std::endl << "NeutralPhospholipidsVolumeFraction: ";
              om.insert (o, *i.NeutralPhospholipidsVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReflectionCoefficient ())
            {
              o << ::std::endl << "ReflectionCoefficient: ";
              om.insert (o, *i.ReflectionCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlbuminRatio ())
            {
              o << ::std::endl << "TissueToPlasmaAlbuminRatio: ";
              om.insert (o, *i.TissueToPlasmaAlbuminRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlphaAcidGlycoproteinRatio ())
            {
              o << ::std::endl << "TissueToPlasmaAlphaAcidGlycoproteinRatio: ";
              om.insert (o, *i.TissueToPlasmaAlphaAcidGlycoproteinRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TissueToPlasmaLipoproteinRatio ())
            {
              o << ::std::endl << "TissueToPlasmaLipoproteinRatio: ";
              om.insert (o, *i.TissueToPlasmaLipoproteinRatio ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalMass ())
            {
              o << ::std::endl << "TotalMass: ";
              om.insert (o, *i.TotalMass ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const TissueCompartmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CompartmentData& > (i);

          // AcidicPhospohlipidConcentration
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AcidicPhospohlipidConcentration ())
            {
              const TissueCompartmentData::AcidicPhospohlipidConcentration_type& x (*i.AcidicPhospohlipidConcentration ());
              if (typeid (TissueCompartmentData::AcidicPhospohlipidConcentration_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AcidicPhospohlipidConcentration",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AcidicPhospohlipidConcentration",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MatrixVolume
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MatrixVolume ())
            {
              const TissueCompartmentData::MatrixVolume_type& x (*i.MatrixVolume ());
              if (typeid (TissueCompartmentData::MatrixVolume_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MatrixVolume",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MatrixVolume",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MembranePotential
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MembranePotential ())
            {
              const TissueCompartmentData::MembranePotential_type& x (*i.MembranePotential ());
              if (typeid (TissueCompartmentData::MembranePotential_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MembranePotential",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MembranePotential",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeutralLipidsVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeutralLipidsVolumeFraction ())
            {
              const TissueCompartmentData::NeutralLipidsVolumeFraction_type& x (*i.NeutralLipidsVolumeFraction ());
              if (typeid (TissueCompartmentData::NeutralLipidsVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeutralLipidsVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeutralLipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeutralPhospholipidsVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeutralPhospholipidsVolumeFraction ())
            {
              const TissueCompartmentData::NeutralPhospholipidsVolumeFraction_type& x (*i.NeutralPhospholipidsVolumeFraction ());
              if (typeid (TissueCompartmentData::NeutralPhospholipidsVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeutralPhospholipidsVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeutralPhospholipidsVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ReflectionCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReflectionCoefficient ())
            {
              const TissueCompartmentData::ReflectionCoefficient_type& x (*i.ReflectionCoefficient ());
              if (typeid (TissueCompartmentData::ReflectionCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReflectionCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReflectionCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaAlbuminRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlbuminRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaAlbuminRatio_type& x (*i.TissueToPlasmaAlbuminRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaAlbuminRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaAlbuminRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaAlbuminRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaAlphaAcidGlycoproteinRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaAlphaAcidGlycoproteinRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_type& x (*i.TissueToPlasmaAlphaAcidGlycoproteinRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaAlphaAcidGlycoproteinRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaAlphaAcidGlycoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TissueToPlasmaLipoproteinRatio
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TissueToPlasmaLipoproteinRatio ())
            {
              const TissueCompartmentData::TissueToPlasmaLipoproteinRatio_type& x (*i.TissueToPlasmaLipoproteinRatio ());
              if (typeid (TissueCompartmentData::TissueToPlasmaLipoproteinRatio_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueToPlasmaLipoproteinRatio",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TissueToPlasmaLipoproteinRatio",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalMass
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalMass ())
            {
              const TissueCompartmentData::TotalMass_type& x (*i.TotalMass ());
              if (typeid (TissueCompartmentData::TotalMass_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalMass",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalMass",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TissueCompartmentData >
        _xsd_TissueCompartmentData_type_serializer_init (
          "TissueCompartmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


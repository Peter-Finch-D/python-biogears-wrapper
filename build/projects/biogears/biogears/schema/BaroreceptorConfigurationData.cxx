// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "BaroreceptorConfigurationData.hxx"

#include "ScalarData.hxx"

#include "ScalarTimeData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BaroreceptorConfigurationData
        // 

        const BaroreceptorConfigurationData::ResponseSlope_optional& BaroreceptorConfigurationData::
        ResponseSlope () const
        {
          return this->ResponseSlope_;
        }

        BaroreceptorConfigurationData::ResponseSlope_optional& BaroreceptorConfigurationData::
        ResponseSlope ()
        {
          return this->ResponseSlope_;
        }

        void BaroreceptorConfigurationData::
        ResponseSlope (const ResponseSlope_type& x)
        {
          this->ResponseSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        ResponseSlope (const ResponseSlope_optional& x)
        {
          this->ResponseSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        ResponseSlope (::std::unique_ptr< ResponseSlope_type > x)
        {
          this->ResponseSlope_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::HeartRateDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        HeartRateDistributedTimeDelay () const
        {
          return this->HeartRateDistributedTimeDelay_;
        }

        BaroreceptorConfigurationData::HeartRateDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        HeartRateDistributedTimeDelay ()
        {
          return this->HeartRateDistributedTimeDelay_;
        }

        void BaroreceptorConfigurationData::
        HeartRateDistributedTimeDelay (const HeartRateDistributedTimeDelay_type& x)
        {
          this->HeartRateDistributedTimeDelay_.set (x);
        }

        void BaroreceptorConfigurationData::
        HeartRateDistributedTimeDelay (const HeartRateDistributedTimeDelay_optional& x)
        {
          this->HeartRateDistributedTimeDelay_ = x;
        }

        void BaroreceptorConfigurationData::
        HeartRateDistributedTimeDelay (::std::unique_ptr< HeartRateDistributedTimeDelay_type > x)
        {
          this->HeartRateDistributedTimeDelay_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::HeartElastanceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        HeartElastanceDistributedTimeDelay () const
        {
          return this->HeartElastanceDistributedTimeDelay_;
        }

        BaroreceptorConfigurationData::HeartElastanceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        HeartElastanceDistributedTimeDelay ()
        {
          return this->HeartElastanceDistributedTimeDelay_;
        }

        void BaroreceptorConfigurationData::
        HeartElastanceDistributedTimeDelay (const HeartElastanceDistributedTimeDelay_type& x)
        {
          this->HeartElastanceDistributedTimeDelay_.set (x);
        }

        void BaroreceptorConfigurationData::
        HeartElastanceDistributedTimeDelay (const HeartElastanceDistributedTimeDelay_optional& x)
        {
          this->HeartElastanceDistributedTimeDelay_ = x;
        }

        void BaroreceptorConfigurationData::
        HeartElastanceDistributedTimeDelay (::std::unique_ptr< HeartElastanceDistributedTimeDelay_type > x)
        {
          this->HeartElastanceDistributedTimeDelay_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::SystemicResistanceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        SystemicResistanceDistributedTimeDelay () const
        {
          return this->SystemicResistanceDistributedTimeDelay_;
        }

        BaroreceptorConfigurationData::SystemicResistanceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        SystemicResistanceDistributedTimeDelay ()
        {
          return this->SystemicResistanceDistributedTimeDelay_;
        }

        void BaroreceptorConfigurationData::
        SystemicResistanceDistributedTimeDelay (const SystemicResistanceDistributedTimeDelay_type& x)
        {
          this->SystemicResistanceDistributedTimeDelay_.set (x);
        }

        void BaroreceptorConfigurationData::
        SystemicResistanceDistributedTimeDelay (const SystemicResistanceDistributedTimeDelay_optional& x)
        {
          this->SystemicResistanceDistributedTimeDelay_ = x;
        }

        void BaroreceptorConfigurationData::
        SystemicResistanceDistributedTimeDelay (::std::unique_ptr< SystemicResistanceDistributedTimeDelay_type > x)
        {
          this->SystemicResistanceDistributedTimeDelay_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::VenousComplianceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        VenousComplianceDistributedTimeDelay () const
        {
          return this->VenousComplianceDistributedTimeDelay_;
        }

        BaroreceptorConfigurationData::VenousComplianceDistributedTimeDelay_optional& BaroreceptorConfigurationData::
        VenousComplianceDistributedTimeDelay ()
        {
          return this->VenousComplianceDistributedTimeDelay_;
        }

        void BaroreceptorConfigurationData::
        VenousComplianceDistributedTimeDelay (const VenousComplianceDistributedTimeDelay_type& x)
        {
          this->VenousComplianceDistributedTimeDelay_.set (x);
        }

        void BaroreceptorConfigurationData::
        VenousComplianceDistributedTimeDelay (const VenousComplianceDistributedTimeDelay_optional& x)
        {
          this->VenousComplianceDistributedTimeDelay_ = x;
        }

        void BaroreceptorConfigurationData::
        VenousComplianceDistributedTimeDelay (::std::unique_ptr< VenousComplianceDistributedTimeDelay_type > x)
        {
          this->VenousComplianceDistributedTimeDelay_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedHeartRateIntercept_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateIntercept () const
        {
          return this->NormalizedHeartRateIntercept_;
        }

        BaroreceptorConfigurationData::NormalizedHeartRateIntercept_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateIntercept ()
        {
          return this->NormalizedHeartRateIntercept_;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateIntercept (const NormalizedHeartRateIntercept_type& x)
        {
          this->NormalizedHeartRateIntercept_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateIntercept (const NormalizedHeartRateIntercept_optional& x)
        {
          this->NormalizedHeartRateIntercept_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateIntercept (::std::unique_ptr< NormalizedHeartRateIntercept_type > x)
        {
          this->NormalizedHeartRateIntercept_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedHeartRateSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateSympatheticSlope () const
        {
          return this->NormalizedHeartRateSympatheticSlope_;
        }

        BaroreceptorConfigurationData::NormalizedHeartRateSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateSympatheticSlope ()
        {
          return this->NormalizedHeartRateSympatheticSlope_;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateSympatheticSlope (const NormalizedHeartRateSympatheticSlope_type& x)
        {
          this->NormalizedHeartRateSympatheticSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateSympatheticSlope (const NormalizedHeartRateSympatheticSlope_optional& x)
        {
          this->NormalizedHeartRateSympatheticSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateSympatheticSlope (::std::unique_ptr< NormalizedHeartRateSympatheticSlope_type > x)
        {
          this->NormalizedHeartRateSympatheticSlope_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedHeartRateParasympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateParasympatheticSlope () const
        {
          return this->NormalizedHeartRateParasympatheticSlope_;
        }

        BaroreceptorConfigurationData::NormalizedHeartRateParasympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartRateParasympatheticSlope ()
        {
          return this->NormalizedHeartRateParasympatheticSlope_;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateParasympatheticSlope (const NormalizedHeartRateParasympatheticSlope_type& x)
        {
          this->NormalizedHeartRateParasympatheticSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateParasympatheticSlope (const NormalizedHeartRateParasympatheticSlope_optional& x)
        {
          this->NormalizedHeartRateParasympatheticSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartRateParasympatheticSlope (::std::unique_ptr< NormalizedHeartRateParasympatheticSlope_type > x)
        {
          this->NormalizedHeartRateParasympatheticSlope_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedHeartElastanceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedHeartElastanceIntercept () const
        {
          return this->NormalizedHeartElastanceIntercept_;
        }

        BaroreceptorConfigurationData::NormalizedHeartElastanceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedHeartElastanceIntercept ()
        {
          return this->NormalizedHeartElastanceIntercept_;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceIntercept (const NormalizedHeartElastanceIntercept_type& x)
        {
          this->NormalizedHeartElastanceIntercept_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceIntercept (const NormalizedHeartElastanceIntercept_optional& x)
        {
          this->NormalizedHeartElastanceIntercept_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceIntercept (::std::unique_ptr< NormalizedHeartElastanceIntercept_type > x)
        {
          this->NormalizedHeartElastanceIntercept_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedHeartElastanceSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartElastanceSympatheticSlope () const
        {
          return this->NormalizedHeartElastanceSympatheticSlope_;
        }

        BaroreceptorConfigurationData::NormalizedHeartElastanceSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedHeartElastanceSympatheticSlope ()
        {
          return this->NormalizedHeartElastanceSympatheticSlope_;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceSympatheticSlope (const NormalizedHeartElastanceSympatheticSlope_type& x)
        {
          this->NormalizedHeartElastanceSympatheticSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceSympatheticSlope (const NormalizedHeartElastanceSympatheticSlope_optional& x)
        {
          this->NormalizedHeartElastanceSympatheticSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedHeartElastanceSympatheticSlope (::std::unique_ptr< NormalizedHeartElastanceSympatheticSlope_type > x)
        {
          this->NormalizedHeartElastanceSympatheticSlope_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedResistanceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedResistanceIntercept () const
        {
          return this->NormalizedResistanceIntercept_;
        }

        BaroreceptorConfigurationData::NormalizedResistanceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedResistanceIntercept ()
        {
          return this->NormalizedResistanceIntercept_;
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceIntercept (const NormalizedResistanceIntercept_type& x)
        {
          this->NormalizedResistanceIntercept_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceIntercept (const NormalizedResistanceIntercept_optional& x)
        {
          this->NormalizedResistanceIntercept_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceIntercept (::std::unique_ptr< NormalizedResistanceIntercept_type > x)
        {
          this->NormalizedResistanceIntercept_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedResistanceSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedResistanceSympatheticSlope () const
        {
          return this->NormalizedResistanceSympatheticSlope_;
        }

        BaroreceptorConfigurationData::NormalizedResistanceSympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedResistanceSympatheticSlope ()
        {
          return this->NormalizedResistanceSympatheticSlope_;
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceSympatheticSlope (const NormalizedResistanceSympatheticSlope_type& x)
        {
          this->NormalizedResistanceSympatheticSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceSympatheticSlope (const NormalizedResistanceSympatheticSlope_optional& x)
        {
          this->NormalizedResistanceSympatheticSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedResistanceSympatheticSlope (::std::unique_ptr< NormalizedResistanceSympatheticSlope_type > x)
        {
          this->NormalizedResistanceSympatheticSlope_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedComplianceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedComplianceIntercept () const
        {
          return this->NormalizedComplianceIntercept_;
        }

        BaroreceptorConfigurationData::NormalizedComplianceIntercept_optional& BaroreceptorConfigurationData::
        NormalizedComplianceIntercept ()
        {
          return this->NormalizedComplianceIntercept_;
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceIntercept (const NormalizedComplianceIntercept_type& x)
        {
          this->NormalizedComplianceIntercept_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceIntercept (const NormalizedComplianceIntercept_optional& x)
        {
          this->NormalizedComplianceIntercept_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceIntercept (::std::unique_ptr< NormalizedComplianceIntercept_type > x)
        {
          this->NormalizedComplianceIntercept_.set (std::move (x));
        }

        const BaroreceptorConfigurationData::NormalizedComplianceParasympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedComplianceParasympatheticSlope () const
        {
          return this->NormalizedComplianceParasympatheticSlope_;
        }

        BaroreceptorConfigurationData::NormalizedComplianceParasympatheticSlope_optional& BaroreceptorConfigurationData::
        NormalizedComplianceParasympatheticSlope ()
        {
          return this->NormalizedComplianceParasympatheticSlope_;
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceParasympatheticSlope (const NormalizedComplianceParasympatheticSlope_type& x)
        {
          this->NormalizedComplianceParasympatheticSlope_.set (x);
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceParasympatheticSlope (const NormalizedComplianceParasympatheticSlope_optional& x)
        {
          this->NormalizedComplianceParasympatheticSlope_ = x;
        }

        void BaroreceptorConfigurationData::
        NormalizedComplianceParasympatheticSlope (::std::unique_ptr< NormalizedComplianceParasympatheticSlope_type > x)
        {
          this->NormalizedComplianceParasympatheticSlope_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // BaroreceptorConfigurationData
        //

        BaroreceptorConfigurationData::
        BaroreceptorConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          ResponseSlope_ (this),
          HeartRateDistributedTimeDelay_ (this),
          HeartElastanceDistributedTimeDelay_ (this),
          SystemicResistanceDistributedTimeDelay_ (this),
          VenousComplianceDistributedTimeDelay_ (this),
          NormalizedHeartRateIntercept_ (this),
          NormalizedHeartRateSympatheticSlope_ (this),
          NormalizedHeartRateParasympatheticSlope_ (this),
          NormalizedHeartElastanceIntercept_ (this),
          NormalizedHeartElastanceSympatheticSlope_ (this),
          NormalizedResistanceIntercept_ (this),
          NormalizedResistanceSympatheticSlope_ (this),
          NormalizedComplianceIntercept_ (this),
          NormalizedComplianceParasympatheticSlope_ (this)
        {
        }

        BaroreceptorConfigurationData::
        BaroreceptorConfigurationData (const BaroreceptorConfigurationData& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          ResponseSlope_ (x.ResponseSlope_, f, this),
          HeartRateDistributedTimeDelay_ (x.HeartRateDistributedTimeDelay_, f, this),
          HeartElastanceDistributedTimeDelay_ (x.HeartElastanceDistributedTimeDelay_, f, this),
          SystemicResistanceDistributedTimeDelay_ (x.SystemicResistanceDistributedTimeDelay_, f, this),
          VenousComplianceDistributedTimeDelay_ (x.VenousComplianceDistributedTimeDelay_, f, this),
          NormalizedHeartRateIntercept_ (x.NormalizedHeartRateIntercept_, f, this),
          NormalizedHeartRateSympatheticSlope_ (x.NormalizedHeartRateSympatheticSlope_, f, this),
          NormalizedHeartRateParasympatheticSlope_ (x.NormalizedHeartRateParasympatheticSlope_, f, this),
          NormalizedHeartElastanceIntercept_ (x.NormalizedHeartElastanceIntercept_, f, this),
          NormalizedHeartElastanceSympatheticSlope_ (x.NormalizedHeartElastanceSympatheticSlope_, f, this),
          NormalizedResistanceIntercept_ (x.NormalizedResistanceIntercept_, f, this),
          NormalizedResistanceSympatheticSlope_ (x.NormalizedResistanceSympatheticSlope_, f, this),
          NormalizedComplianceIntercept_ (x.NormalizedComplianceIntercept_, f, this),
          NormalizedComplianceParasympatheticSlope_ (x.NormalizedComplianceParasympatheticSlope_, f, this)
        {
        }

        BaroreceptorConfigurationData::
        BaroreceptorConfigurationData (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          ResponseSlope_ (this),
          HeartRateDistributedTimeDelay_ (this),
          HeartElastanceDistributedTimeDelay_ (this),
          SystemicResistanceDistributedTimeDelay_ (this),
          VenousComplianceDistributedTimeDelay_ (this),
          NormalizedHeartRateIntercept_ (this),
          NormalizedHeartRateSympatheticSlope_ (this),
          NormalizedHeartRateParasympatheticSlope_ (this),
          NormalizedHeartElastanceIntercept_ (this),
          NormalizedHeartElastanceSympatheticSlope_ (this),
          NormalizedResistanceIntercept_ (this),
          NormalizedResistanceSympatheticSlope_ (this),
          NormalizedComplianceIntercept_ (this),
          NormalizedComplianceParasympatheticSlope_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void BaroreceptorConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ResponseSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ResponseSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ResponseSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ResponseSlope_)
                {
                  ::std::unique_ptr< ResponseSlope_type > r (
                    dynamic_cast< ResponseSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ResponseSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRateDistributedTimeDelay
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateDistributedTimeDelay_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRateDistributedTimeDelay_)
                {
                  ::std::unique_ptr< HeartRateDistributedTimeDelay_type > r (
                    dynamic_cast< HeartRateDistributedTimeDelay_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateDistributedTimeDelay_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartElastanceDistributedTimeDelay
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartElastanceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartElastanceDistributedTimeDelay_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartElastanceDistributedTimeDelay_)
                {
                  ::std::unique_ptr< HeartElastanceDistributedTimeDelay_type > r (
                    dynamic_cast< HeartElastanceDistributedTimeDelay_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartElastanceDistributedTimeDelay_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SystemicResistanceDistributedTimeDelay
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SystemicResistanceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SystemicResistanceDistributedTimeDelay_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SystemicResistanceDistributedTimeDelay_)
                {
                  ::std::unique_ptr< SystemicResistanceDistributedTimeDelay_type > r (
                    dynamic_cast< SystemicResistanceDistributedTimeDelay_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SystemicResistanceDistributedTimeDelay_.set (::std::move (r));
                  continue;
                }
              }
            }

            // VenousComplianceDistributedTimeDelay
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "VenousComplianceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< VenousComplianceDistributedTimeDelay_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->VenousComplianceDistributedTimeDelay_)
                {
                  ::std::unique_ptr< VenousComplianceDistributedTimeDelay_type > r (
                    dynamic_cast< VenousComplianceDistributedTimeDelay_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->VenousComplianceDistributedTimeDelay_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedHeartRateIntercept
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedHeartRateIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedHeartRateIntercept_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedHeartRateIntercept_)
                {
                  ::std::unique_ptr< NormalizedHeartRateIntercept_type > r (
                    dynamic_cast< NormalizedHeartRateIntercept_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedHeartRateIntercept_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedHeartRateSympatheticSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedHeartRateSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedHeartRateSympatheticSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedHeartRateSympatheticSlope_)
                {
                  ::std::unique_ptr< NormalizedHeartRateSympatheticSlope_type > r (
                    dynamic_cast< NormalizedHeartRateSympatheticSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedHeartRateSympatheticSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedHeartRateParasympatheticSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedHeartRateParasympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedHeartRateParasympatheticSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedHeartRateParasympatheticSlope_)
                {
                  ::std::unique_ptr< NormalizedHeartRateParasympatheticSlope_type > r (
                    dynamic_cast< NormalizedHeartRateParasympatheticSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedHeartRateParasympatheticSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedHeartElastanceIntercept
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedHeartElastanceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedHeartElastanceIntercept_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedHeartElastanceIntercept_)
                {
                  ::std::unique_ptr< NormalizedHeartElastanceIntercept_type > r (
                    dynamic_cast< NormalizedHeartElastanceIntercept_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedHeartElastanceIntercept_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedHeartElastanceSympatheticSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedHeartElastanceSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedHeartElastanceSympatheticSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedHeartElastanceSympatheticSlope_)
                {
                  ::std::unique_ptr< NormalizedHeartElastanceSympatheticSlope_type > r (
                    dynamic_cast< NormalizedHeartElastanceSympatheticSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedHeartElastanceSympatheticSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedResistanceIntercept
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedResistanceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedResistanceIntercept_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedResistanceIntercept_)
                {
                  ::std::unique_ptr< NormalizedResistanceIntercept_type > r (
                    dynamic_cast< NormalizedResistanceIntercept_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedResistanceIntercept_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedResistanceSympatheticSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedResistanceSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedResistanceSympatheticSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedResistanceSympatheticSlope_)
                {
                  ::std::unique_ptr< NormalizedResistanceSympatheticSlope_type > r (
                    dynamic_cast< NormalizedResistanceSympatheticSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedResistanceSympatheticSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedComplianceIntercept
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedComplianceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedComplianceIntercept_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedComplianceIntercept_)
                {
                  ::std::unique_ptr< NormalizedComplianceIntercept_type > r (
                    dynamic_cast< NormalizedComplianceIntercept_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedComplianceIntercept_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NormalizedComplianceParasympatheticSlope
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NormalizedComplianceParasympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NormalizedComplianceParasympatheticSlope_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NormalizedComplianceParasympatheticSlope_)
                {
                  ::std::unique_ptr< NormalizedComplianceParasympatheticSlope_type > r (
                    dynamic_cast< NormalizedComplianceParasympatheticSlope_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NormalizedComplianceParasympatheticSlope_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        BaroreceptorConfigurationData* BaroreceptorConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class BaroreceptorConfigurationData (*this, f, c);
        }

        BaroreceptorConfigurationData& BaroreceptorConfigurationData::
        operator= (const BaroreceptorConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->ResponseSlope_ = x.ResponseSlope_;
            this->HeartRateDistributedTimeDelay_ = x.HeartRateDistributedTimeDelay_;
            this->HeartElastanceDistributedTimeDelay_ = x.HeartElastanceDistributedTimeDelay_;
            this->SystemicResistanceDistributedTimeDelay_ = x.SystemicResistanceDistributedTimeDelay_;
            this->VenousComplianceDistributedTimeDelay_ = x.VenousComplianceDistributedTimeDelay_;
            this->NormalizedHeartRateIntercept_ = x.NormalizedHeartRateIntercept_;
            this->NormalizedHeartRateSympatheticSlope_ = x.NormalizedHeartRateSympatheticSlope_;
            this->NormalizedHeartRateParasympatheticSlope_ = x.NormalizedHeartRateParasympatheticSlope_;
            this->NormalizedHeartElastanceIntercept_ = x.NormalizedHeartElastanceIntercept_;
            this->NormalizedHeartElastanceSympatheticSlope_ = x.NormalizedHeartElastanceSympatheticSlope_;
            this->NormalizedResistanceIntercept_ = x.NormalizedResistanceIntercept_;
            this->NormalizedResistanceSympatheticSlope_ = x.NormalizedResistanceSympatheticSlope_;
            this->NormalizedComplianceIntercept_ = x.NormalizedComplianceIntercept_;
            this->NormalizedComplianceParasympatheticSlope_ = x.NormalizedComplianceParasympatheticSlope_;
          }

          return *this;
        }

        BaroreceptorConfigurationData::
        ~BaroreceptorConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, BaroreceptorConfigurationData >
        _xsd_BaroreceptorConfigurationData_type_factory_init (
          "BaroreceptorConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const BaroreceptorConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ResponseSlope ())
            {
              o << ::std::endl << "ResponseSlope: ";
              om.insert (o, *i.ResponseSlope ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRateDistributedTimeDelay ())
            {
              o << ::std::endl << "HeartRateDistributedTimeDelay: ";
              om.insert (o, *i.HeartRateDistributedTimeDelay ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartElastanceDistributedTimeDelay ())
            {
              o << ::std::endl << "HeartElastanceDistributedTimeDelay: ";
              om.insert (o, *i.HeartElastanceDistributedTimeDelay ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SystemicResistanceDistributedTimeDelay ())
            {
              o << ::std::endl << "SystemicResistanceDistributedTimeDelay: ";
              om.insert (o, *i.SystemicResistanceDistributedTimeDelay ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.VenousComplianceDistributedTimeDelay ())
            {
              o << ::std::endl << "VenousComplianceDistributedTimeDelay: ";
              om.insert (o, *i.VenousComplianceDistributedTimeDelay ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedHeartRateIntercept ())
            {
              o << ::std::endl << "NormalizedHeartRateIntercept: ";
              om.insert (o, *i.NormalizedHeartRateIntercept ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedHeartRateSympatheticSlope ())
            {
              o << ::std::endl << "NormalizedHeartRateSympatheticSlope: ";
              om.insert (o, *i.NormalizedHeartRateSympatheticSlope ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedHeartRateParasympatheticSlope ())
            {
              o << ::std::endl << "NormalizedHeartRateParasympatheticSlope: ";
              om.insert (o, *i.NormalizedHeartRateParasympatheticSlope ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedHeartElastanceIntercept ())
            {
              o << ::std::endl << "NormalizedHeartElastanceIntercept: ";
              om.insert (o, *i.NormalizedHeartElastanceIntercept ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedHeartElastanceSympatheticSlope ())
            {
              o << ::std::endl << "NormalizedHeartElastanceSympatheticSlope: ";
              om.insert (o, *i.NormalizedHeartElastanceSympatheticSlope ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedResistanceIntercept ())
            {
              o << ::std::endl << "NormalizedResistanceIntercept: ";
              om.insert (o, *i.NormalizedResistanceIntercept ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedResistanceSympatheticSlope ())
            {
              o << ::std::endl << "NormalizedResistanceSympatheticSlope: ";
              om.insert (o, *i.NormalizedResistanceSympatheticSlope ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedComplianceIntercept ())
            {
              o << ::std::endl << "NormalizedComplianceIntercept: ";
              om.insert (o, *i.NormalizedComplianceIntercept ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NormalizedComplianceParasympatheticSlope ())
            {
              o << ::std::endl << "NormalizedComplianceParasympatheticSlope: ";
              om.insert (o, *i.NormalizedComplianceParasympatheticSlope ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, BaroreceptorConfigurationData >
        _xsd_BaroreceptorConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const BaroreceptorConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // ResponseSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ResponseSlope ())
            {
              const BaroreceptorConfigurationData::ResponseSlope_type& x (*i.ResponseSlope ());
              if (typeid (BaroreceptorConfigurationData::ResponseSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ResponseSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ResponseSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRateDistributedTimeDelay
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRateDistributedTimeDelay ())
            {
              const BaroreceptorConfigurationData::HeartRateDistributedTimeDelay_type& x (*i.HeartRateDistributedTimeDelay ());
              if (typeid (BaroreceptorConfigurationData::HeartRateDistributedTimeDelay_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRateDistributedTimeDelay",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRateDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartElastanceDistributedTimeDelay
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartElastanceDistributedTimeDelay ())
            {
              const BaroreceptorConfigurationData::HeartElastanceDistributedTimeDelay_type& x (*i.HeartElastanceDistributedTimeDelay ());
              if (typeid (BaroreceptorConfigurationData::HeartElastanceDistributedTimeDelay_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartElastanceDistributedTimeDelay",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartElastanceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SystemicResistanceDistributedTimeDelay
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SystemicResistanceDistributedTimeDelay ())
            {
              const BaroreceptorConfigurationData::SystemicResistanceDistributedTimeDelay_type& x (*i.SystemicResistanceDistributedTimeDelay ());
              if (typeid (BaroreceptorConfigurationData::SystemicResistanceDistributedTimeDelay_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SystemicResistanceDistributedTimeDelay",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SystemicResistanceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // VenousComplianceDistributedTimeDelay
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.VenousComplianceDistributedTimeDelay ())
            {
              const BaroreceptorConfigurationData::VenousComplianceDistributedTimeDelay_type& x (*i.VenousComplianceDistributedTimeDelay ());
              if (typeid (BaroreceptorConfigurationData::VenousComplianceDistributedTimeDelay_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "VenousComplianceDistributedTimeDelay",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "VenousComplianceDistributedTimeDelay",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedHeartRateIntercept
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedHeartRateIntercept ())
            {
              const BaroreceptorConfigurationData::NormalizedHeartRateIntercept_type& x (*i.NormalizedHeartRateIntercept ());
              if (typeid (BaroreceptorConfigurationData::NormalizedHeartRateIntercept_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedHeartRateIntercept",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedHeartRateIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedHeartRateSympatheticSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedHeartRateSympatheticSlope ())
            {
              const BaroreceptorConfigurationData::NormalizedHeartRateSympatheticSlope_type& x (*i.NormalizedHeartRateSympatheticSlope ());
              if (typeid (BaroreceptorConfigurationData::NormalizedHeartRateSympatheticSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedHeartRateSympatheticSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedHeartRateSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedHeartRateParasympatheticSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedHeartRateParasympatheticSlope ())
            {
              const BaroreceptorConfigurationData::NormalizedHeartRateParasympatheticSlope_type& x (*i.NormalizedHeartRateParasympatheticSlope ());
              if (typeid (BaroreceptorConfigurationData::NormalizedHeartRateParasympatheticSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedHeartRateParasympatheticSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedHeartRateParasympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedHeartElastanceIntercept
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedHeartElastanceIntercept ())
            {
              const BaroreceptorConfigurationData::NormalizedHeartElastanceIntercept_type& x (*i.NormalizedHeartElastanceIntercept ());
              if (typeid (BaroreceptorConfigurationData::NormalizedHeartElastanceIntercept_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedHeartElastanceIntercept",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedHeartElastanceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedHeartElastanceSympatheticSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedHeartElastanceSympatheticSlope ())
            {
              const BaroreceptorConfigurationData::NormalizedHeartElastanceSympatheticSlope_type& x (*i.NormalizedHeartElastanceSympatheticSlope ());
              if (typeid (BaroreceptorConfigurationData::NormalizedHeartElastanceSympatheticSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedHeartElastanceSympatheticSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedHeartElastanceSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedResistanceIntercept
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedResistanceIntercept ())
            {
              const BaroreceptorConfigurationData::NormalizedResistanceIntercept_type& x (*i.NormalizedResistanceIntercept ());
              if (typeid (BaroreceptorConfigurationData::NormalizedResistanceIntercept_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedResistanceIntercept",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedResistanceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedResistanceSympatheticSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedResistanceSympatheticSlope ())
            {
              const BaroreceptorConfigurationData::NormalizedResistanceSympatheticSlope_type& x (*i.NormalizedResistanceSympatheticSlope ());
              if (typeid (BaroreceptorConfigurationData::NormalizedResistanceSympatheticSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedResistanceSympatheticSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedResistanceSympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedComplianceIntercept
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedComplianceIntercept ())
            {
              const BaroreceptorConfigurationData::NormalizedComplianceIntercept_type& x (*i.NormalizedComplianceIntercept ());
              if (typeid (BaroreceptorConfigurationData::NormalizedComplianceIntercept_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedComplianceIntercept",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedComplianceIntercept",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NormalizedComplianceParasympatheticSlope
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NormalizedComplianceParasympatheticSlope ())
            {
              const BaroreceptorConfigurationData::NormalizedComplianceParasympatheticSlope_type& x (*i.NormalizedComplianceParasympatheticSlope ());
              if (typeid (BaroreceptorConfigurationData::NormalizedComplianceParasympatheticSlope_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NormalizedComplianceParasympatheticSlope",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NormalizedComplianceParasympatheticSlope",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BaroreceptorConfigurationData >
        _xsd_BaroreceptorConfigurationData_type_serializer_init (
          "BaroreceptorConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


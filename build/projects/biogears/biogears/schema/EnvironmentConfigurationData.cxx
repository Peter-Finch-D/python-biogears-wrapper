// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EnvironmentConfigurationData.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarHeatCapacitancePerMassData.hxx"

#include "ScalarMassPerAmountData.hxx"

#include "EnvironmentalConditionsData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentConfigurationData
        // 

        const EnvironmentConfigurationData::AirDensity_optional& EnvironmentConfigurationData::
        AirDensity () const
        {
          return this->AirDensity_;
        }

        EnvironmentConfigurationData::AirDensity_optional& EnvironmentConfigurationData::
        AirDensity ()
        {
          return this->AirDensity_;
        }

        void EnvironmentConfigurationData::
        AirDensity (const AirDensity_type& x)
        {
          this->AirDensity_.set (x);
        }

        void EnvironmentConfigurationData::
        AirDensity (const AirDensity_optional& x)
        {
          this->AirDensity_ = x;
        }

        void EnvironmentConfigurationData::
        AirDensity (::std::unique_ptr< AirDensity_type > x)
        {
          this->AirDensity_.set (std::move (x));
        }

        const EnvironmentConfigurationData::AirSpecificHeat_optional& EnvironmentConfigurationData::
        AirSpecificHeat () const
        {
          return this->AirSpecificHeat_;
        }

        EnvironmentConfigurationData::AirSpecificHeat_optional& EnvironmentConfigurationData::
        AirSpecificHeat ()
        {
          return this->AirSpecificHeat_;
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (const AirSpecificHeat_type& x)
        {
          this->AirSpecificHeat_.set (x);
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (const AirSpecificHeat_optional& x)
        {
          this->AirSpecificHeat_ = x;
        }

        void EnvironmentConfigurationData::
        AirSpecificHeat (::std::unique_ptr< AirSpecificHeat_type > x)
        {
          this->AirSpecificHeat_.set (std::move (x));
        }

        const EnvironmentConfigurationData::MolarMassOfDryAir_optional& EnvironmentConfigurationData::
        MolarMassOfDryAir () const
        {
          return this->MolarMassOfDryAir_;
        }

        EnvironmentConfigurationData::MolarMassOfDryAir_optional& EnvironmentConfigurationData::
        MolarMassOfDryAir ()
        {
          return this->MolarMassOfDryAir_;
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (const MolarMassOfDryAir_type& x)
        {
          this->MolarMassOfDryAir_.set (x);
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (const MolarMassOfDryAir_optional& x)
        {
          this->MolarMassOfDryAir_ = x;
        }

        void EnvironmentConfigurationData::
        MolarMassOfDryAir (::std::unique_ptr< MolarMassOfDryAir_type > x)
        {
          this->MolarMassOfDryAir_.set (std::move (x));
        }

        const EnvironmentConfigurationData::MolarMassOfWaterVapor_optional& EnvironmentConfigurationData::
        MolarMassOfWaterVapor () const
        {
          return this->MolarMassOfWaterVapor_;
        }

        EnvironmentConfigurationData::MolarMassOfWaterVapor_optional& EnvironmentConfigurationData::
        MolarMassOfWaterVapor ()
        {
          return this->MolarMassOfWaterVapor_;
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (const MolarMassOfWaterVapor_type& x)
        {
          this->MolarMassOfWaterVapor_.set (x);
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (const MolarMassOfWaterVapor_optional& x)
        {
          this->MolarMassOfWaterVapor_ = x;
        }

        void EnvironmentConfigurationData::
        MolarMassOfWaterVapor (::std::unique_ptr< MolarMassOfWaterVapor_type > x)
        {
          this->MolarMassOfWaterVapor_.set (std::move (x));
        }

        const EnvironmentConfigurationData::InitialEnvironmentalConditions_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditions () const
        {
          return this->InitialEnvironmentalConditions_;
        }

        EnvironmentConfigurationData::InitialEnvironmentalConditions_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditions ()
        {
          return this->InitialEnvironmentalConditions_;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (const InitialEnvironmentalConditions_type& x)
        {
          this->InitialEnvironmentalConditions_.set (x);
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (const InitialEnvironmentalConditions_optional& x)
        {
          this->InitialEnvironmentalConditions_ = x;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditions (::std::unique_ptr< InitialEnvironmentalConditions_type > x)
        {
          this->InitialEnvironmentalConditions_.set (std::move (x));
        }

        const EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile () const
        {
          return this->InitialEnvironmentalConditionsFile_;
        }

        EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_optional& EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile ()
        {
          return this->InitialEnvironmentalConditionsFile_;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_type& x)
        {
          this->InitialEnvironmentalConditionsFile_.set (x);
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (const InitialEnvironmentalConditionsFile_optional& x)
        {
          this->InitialEnvironmentalConditionsFile_ = x;
        }

        void EnvironmentConfigurationData::
        InitialEnvironmentalConditionsFile (::std::unique_ptr< InitialEnvironmentalConditionsFile_type > x)
        {
          this->InitialEnvironmentalConditionsFile_.set (std::move (x));
        }

        const EnvironmentConfigurationData::WaterDensity_optional& EnvironmentConfigurationData::
        WaterDensity () const
        {
          return this->WaterDensity_;
        }

        EnvironmentConfigurationData::WaterDensity_optional& EnvironmentConfigurationData::
        WaterDensity ()
        {
          return this->WaterDensity_;
        }

        void EnvironmentConfigurationData::
        WaterDensity (const WaterDensity_type& x)
        {
          this->WaterDensity_.set (x);
        }

        void EnvironmentConfigurationData::
        WaterDensity (const WaterDensity_optional& x)
        {
          this->WaterDensity_ = x;
        }

        void EnvironmentConfigurationData::
        WaterDensity (::std::unique_ptr< WaterDensity_type > x)
        {
          this->WaterDensity_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentConfigurationData
        //

        EnvironmentConfigurationData::
        EnvironmentConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          AirDensity_ (this),
          AirSpecificHeat_ (this),
          MolarMassOfDryAir_ (this),
          MolarMassOfWaterVapor_ (this),
          InitialEnvironmentalConditions_ (this),
          InitialEnvironmentalConditionsFile_ (this),
          WaterDensity_ (this)
        {
        }

        EnvironmentConfigurationData::
        EnvironmentConfigurationData (const EnvironmentConfigurationData& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          AirDensity_ (x.AirDensity_, f, this),
          AirSpecificHeat_ (x.AirSpecificHeat_, f, this),
          MolarMassOfDryAir_ (x.MolarMassOfDryAir_, f, this),
          MolarMassOfWaterVapor_ (x.MolarMassOfWaterVapor_, f, this),
          InitialEnvironmentalConditions_ (x.InitialEnvironmentalConditions_, f, this),
          InitialEnvironmentalConditionsFile_ (x.InitialEnvironmentalConditionsFile_, f, this),
          WaterDensity_ (x.WaterDensity_, f, this)
        {
        }

        EnvironmentConfigurationData::
        EnvironmentConfigurationData (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          AirDensity_ (this),
          AirSpecificHeat_ (this),
          MolarMassOfDryAir_ (this),
          MolarMassOfWaterVapor_ (this),
          InitialEnvironmentalConditions_ (this),
          InitialEnvironmentalConditionsFile_ (this),
          WaterDensity_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AirDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirDensity_)
                {
                  ::std::unique_ptr< AirDensity_type > r (
                    dynamic_cast< AirDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirSpecificHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirSpecificHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirSpecificHeat_)
                {
                  ::std::unique_ptr< AirSpecificHeat_type > r (
                    dynamic_cast< AirSpecificHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirSpecificHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MolarMassOfDryAir
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MolarMassOfDryAir",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MolarMassOfDryAir_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MolarMassOfDryAir_)
                {
                  ::std::unique_ptr< MolarMassOfDryAir_type > r (
                    dynamic_cast< MolarMassOfDryAir_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MolarMassOfDryAir_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MolarMassOfWaterVapor
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MolarMassOfWaterVapor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MolarMassOfWaterVapor_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MolarMassOfWaterVapor_)
                {
                  ::std::unique_ptr< MolarMassOfWaterVapor_type > r (
                    dynamic_cast< MolarMassOfWaterVapor_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MolarMassOfWaterVapor_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InitialEnvironmentalConditions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialEnvironmentalConditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialEnvironmentalConditions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InitialEnvironmentalConditions_)
                {
                  ::std::unique_ptr< InitialEnvironmentalConditions_type > r (
                    dynamic_cast< InitialEnvironmentalConditions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialEnvironmentalConditions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // InitialEnvironmentalConditionsFile
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "InitialEnvironmentalConditionsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< InitialEnvironmentalConditionsFile_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->InitialEnvironmentalConditionsFile_)
                {
                  ::std::unique_ptr< InitialEnvironmentalConditionsFile_type > r (
                    dynamic_cast< InitialEnvironmentalConditionsFile_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->InitialEnvironmentalConditionsFile_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WaterDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WaterDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WaterDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WaterDensity_)
                {
                  ::std::unique_ptr< WaterDensity_type > r (
                    dynamic_cast< WaterDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WaterDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnvironmentConfigurationData* EnvironmentConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentConfigurationData (*this, f, c);
        }

        EnvironmentConfigurationData& EnvironmentConfigurationData::
        operator= (const EnvironmentConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->AirDensity_ = x.AirDensity_;
            this->AirSpecificHeat_ = x.AirSpecificHeat_;
            this->MolarMassOfDryAir_ = x.MolarMassOfDryAir_;
            this->MolarMassOfWaterVapor_ = x.MolarMassOfWaterVapor_;
            this->InitialEnvironmentalConditions_ = x.InitialEnvironmentalConditions_;
            this->InitialEnvironmentalConditionsFile_ = x.InitialEnvironmentalConditionsFile_;
            this->WaterDensity_ = x.WaterDensity_;
          }

          return *this;
        }

        EnvironmentConfigurationData::
        ~EnvironmentConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_type_factory_init (
          "EnvironmentConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              o << ::std::endl << "AirDensity: ";
              om.insert (o, *i.AirDensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirSpecificHeat ())
            {
              o << ::std::endl << "AirSpecificHeat: ";
              om.insert (o, *i.AirSpecificHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MolarMassOfDryAir ())
            {
              o << ::std::endl << "MolarMassOfDryAir: ";
              om.insert (o, *i.MolarMassOfDryAir ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MolarMassOfWaterVapor ())
            {
              o << ::std::endl << "MolarMassOfWaterVapor: ";
              om.insert (o, *i.MolarMassOfWaterVapor ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditions ())
            {
              o << ::std::endl << "InitialEnvironmentalConditions: ";
              om.insert (o, *i.InitialEnvironmentalConditions ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditionsFile ())
            {
              o << ::std::endl << "InitialEnvironmentalConditionsFile: ";
              om.insert (o, *i.InitialEnvironmentalConditionsFile ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WaterDensity ())
            {
              o << ::std::endl << "WaterDensity: ";
              om.insert (o, *i.WaterDensity ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // AirDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              const EnvironmentConfigurationData::AirDensity_type& x (*i.AirDensity ());
              if (typeid (EnvironmentConfigurationData::AirDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirSpecificHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirSpecificHeat ())
            {
              const EnvironmentConfigurationData::AirSpecificHeat_type& x (*i.AirSpecificHeat ());
              if (typeid (EnvironmentConfigurationData::AirSpecificHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirSpecificHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirSpecificHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MolarMassOfDryAir
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MolarMassOfDryAir ())
            {
              const EnvironmentConfigurationData::MolarMassOfDryAir_type& x (*i.MolarMassOfDryAir ());
              if (typeid (EnvironmentConfigurationData::MolarMassOfDryAir_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MolarMassOfDryAir",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MolarMassOfDryAir",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MolarMassOfWaterVapor
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MolarMassOfWaterVapor ())
            {
              const EnvironmentConfigurationData::MolarMassOfWaterVapor_type& x (*i.MolarMassOfWaterVapor ());
              if (typeid (EnvironmentConfigurationData::MolarMassOfWaterVapor_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MolarMassOfWaterVapor",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MolarMassOfWaterVapor",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InitialEnvironmentalConditions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditions ())
            {
              const EnvironmentConfigurationData::InitialEnvironmentalConditions_type& x (*i.InitialEnvironmentalConditions ());
              if (typeid (EnvironmentConfigurationData::InitialEnvironmentalConditions_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InitialEnvironmentalConditions",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InitialEnvironmentalConditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // InitialEnvironmentalConditionsFile
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.InitialEnvironmentalConditionsFile ())
            {
              const EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_type& x (*i.InitialEnvironmentalConditionsFile ());
              if (typeid (EnvironmentConfigurationData::InitialEnvironmentalConditionsFile_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "InitialEnvironmentalConditionsFile",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "InitialEnvironmentalConditionsFile",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WaterDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WaterDensity ())
            {
              const EnvironmentConfigurationData::WaterDensity_type& x (*i.WaterDensity ());
              if (typeid (EnvironmentConfigurationData::WaterDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WaterDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WaterDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentConfigurationData >
        _xsd_EnvironmentConfigurationData_type_serializer_init (
          "EnvironmentConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


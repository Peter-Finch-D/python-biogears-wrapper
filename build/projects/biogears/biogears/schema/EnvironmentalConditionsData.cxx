// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EnvironmentalConditionsData.hxx"

#include "enumSurroundingType.hxx"

#include "ScalarMassPerVolumeData.hxx"

#include "ScalarLengthPerTimeData.hxx"

#include "ScalarTemperatureData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarHeatResistanceAreaData.hxx"

#include "ScalarFractionData.hxx"

#include "SubstanceFractionData.hxx"

#include "SubstanceConcentrationData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentalConditionsData
        // 

        const EnvironmentalConditionsData::SurroundingType_optional& EnvironmentalConditionsData::
        SurroundingType () const
        {
          return this->SurroundingType_;
        }

        EnvironmentalConditionsData::SurroundingType_optional& EnvironmentalConditionsData::
        SurroundingType ()
        {
          return this->SurroundingType_;
        }

        void EnvironmentalConditionsData::
        SurroundingType (const SurroundingType_type& x)
        {
          this->SurroundingType_.set (x);
        }

        void EnvironmentalConditionsData::
        SurroundingType (const SurroundingType_optional& x)
        {
          this->SurroundingType_ = x;
        }

        void EnvironmentalConditionsData::
        SurroundingType (::std::unique_ptr< SurroundingType_type > x)
        {
          this->SurroundingType_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AirDensity_optional& EnvironmentalConditionsData::
        AirDensity () const
        {
          return this->AirDensity_;
        }

        EnvironmentalConditionsData::AirDensity_optional& EnvironmentalConditionsData::
        AirDensity ()
        {
          return this->AirDensity_;
        }

        void EnvironmentalConditionsData::
        AirDensity (const AirDensity_type& x)
        {
          this->AirDensity_.set (x);
        }

        void EnvironmentalConditionsData::
        AirDensity (const AirDensity_optional& x)
        {
          this->AirDensity_ = x;
        }

        void EnvironmentalConditionsData::
        AirDensity (::std::unique_ptr< AirDensity_type > x)
        {
          this->AirDensity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AirVelocity_optional& EnvironmentalConditionsData::
        AirVelocity () const
        {
          return this->AirVelocity_;
        }

        EnvironmentalConditionsData::AirVelocity_optional& EnvironmentalConditionsData::
        AirVelocity ()
        {
          return this->AirVelocity_;
        }

        void EnvironmentalConditionsData::
        AirVelocity (const AirVelocity_type& x)
        {
          this->AirVelocity_.set (x);
        }

        void EnvironmentalConditionsData::
        AirVelocity (const AirVelocity_optional& x)
        {
          this->AirVelocity_ = x;
        }

        void EnvironmentalConditionsData::
        AirVelocity (::std::unique_ptr< AirVelocity_type > x)
        {
          this->AirVelocity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AmbientTemperature_optional& EnvironmentalConditionsData::
        AmbientTemperature () const
        {
          return this->AmbientTemperature_;
        }

        EnvironmentalConditionsData::AmbientTemperature_optional& EnvironmentalConditionsData::
        AmbientTemperature ()
        {
          return this->AmbientTemperature_;
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (const AmbientTemperature_type& x)
        {
          this->AmbientTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (const AmbientTemperature_optional& x)
        {
          this->AmbientTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        AmbientTemperature (::std::unique_ptr< AmbientTemperature_type > x)
        {
          this->AmbientTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AtmosphericPressure_optional& EnvironmentalConditionsData::
        AtmosphericPressure () const
        {
          return this->AtmosphericPressure_;
        }

        EnvironmentalConditionsData::AtmosphericPressure_optional& EnvironmentalConditionsData::
        AtmosphericPressure ()
        {
          return this->AtmosphericPressure_;
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (const AtmosphericPressure_type& x)
        {
          this->AtmosphericPressure_.set (x);
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (const AtmosphericPressure_optional& x)
        {
          this->AtmosphericPressure_ = x;
        }

        void EnvironmentalConditionsData::
        AtmosphericPressure (::std::unique_ptr< AtmosphericPressure_type > x)
        {
          this->AtmosphericPressure_.set (std::move (x));
        }

        const EnvironmentalConditionsData::ClothingResistance_optional& EnvironmentalConditionsData::
        ClothingResistance () const
        {
          return this->ClothingResistance_;
        }

        EnvironmentalConditionsData::ClothingResistance_optional& EnvironmentalConditionsData::
        ClothingResistance ()
        {
          return this->ClothingResistance_;
        }

        void EnvironmentalConditionsData::
        ClothingResistance (const ClothingResistance_type& x)
        {
          this->ClothingResistance_.set (x);
        }

        void EnvironmentalConditionsData::
        ClothingResistance (const ClothingResistance_optional& x)
        {
          this->ClothingResistance_ = x;
        }

        void EnvironmentalConditionsData::
        ClothingResistance (::std::unique_ptr< ClothingResistance_type > x)
        {
          this->ClothingResistance_.set (std::move (x));
        }

        const EnvironmentalConditionsData::Emissivity_optional& EnvironmentalConditionsData::
        Emissivity () const
        {
          return this->Emissivity_;
        }

        EnvironmentalConditionsData::Emissivity_optional& EnvironmentalConditionsData::
        Emissivity ()
        {
          return this->Emissivity_;
        }

        void EnvironmentalConditionsData::
        Emissivity (const Emissivity_type& x)
        {
          this->Emissivity_.set (x);
        }

        void EnvironmentalConditionsData::
        Emissivity (const Emissivity_optional& x)
        {
          this->Emissivity_ = x;
        }

        void EnvironmentalConditionsData::
        Emissivity (::std::unique_ptr< Emissivity_type > x)
        {
          this->Emissivity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::MeanRadiantTemperature_optional& EnvironmentalConditionsData::
        MeanRadiantTemperature () const
        {
          return this->MeanRadiantTemperature_;
        }

        EnvironmentalConditionsData::MeanRadiantTemperature_optional& EnvironmentalConditionsData::
        MeanRadiantTemperature ()
        {
          return this->MeanRadiantTemperature_;
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (const MeanRadiantTemperature_type& x)
        {
          this->MeanRadiantTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (const MeanRadiantTemperature_optional& x)
        {
          this->MeanRadiantTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        MeanRadiantTemperature (::std::unique_ptr< MeanRadiantTemperature_type > x)
        {
          this->MeanRadiantTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::RelativeHumidity_optional& EnvironmentalConditionsData::
        RelativeHumidity () const
        {
          return this->RelativeHumidity_;
        }

        EnvironmentalConditionsData::RelativeHumidity_optional& EnvironmentalConditionsData::
        RelativeHumidity ()
        {
          return this->RelativeHumidity_;
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (const RelativeHumidity_type& x)
        {
          this->RelativeHumidity_.set (x);
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (const RelativeHumidity_optional& x)
        {
          this->RelativeHumidity_ = x;
        }

        void EnvironmentalConditionsData::
        RelativeHumidity (::std::unique_ptr< RelativeHumidity_type > x)
        {
          this->RelativeHumidity_.set (std::move (x));
        }

        const EnvironmentalConditionsData::RespirationAmbientTemperature_optional& EnvironmentalConditionsData::
        RespirationAmbientTemperature () const
        {
          return this->RespirationAmbientTemperature_;
        }

        EnvironmentalConditionsData::RespirationAmbientTemperature_optional& EnvironmentalConditionsData::
        RespirationAmbientTemperature ()
        {
          return this->RespirationAmbientTemperature_;
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (const RespirationAmbientTemperature_type& x)
        {
          this->RespirationAmbientTemperature_.set (x);
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (const RespirationAmbientTemperature_optional& x)
        {
          this->RespirationAmbientTemperature_ = x;
        }

        void EnvironmentalConditionsData::
        RespirationAmbientTemperature (::std::unique_ptr< RespirationAmbientTemperature_type > x)
        {
          this->RespirationAmbientTemperature_.set (std::move (x));
        }

        const EnvironmentalConditionsData::AmbientGas_sequence& EnvironmentalConditionsData::
        AmbientGas () const
        {
          return this->AmbientGas_;
        }

        EnvironmentalConditionsData::AmbientGas_sequence& EnvironmentalConditionsData::
        AmbientGas ()
        {
          return this->AmbientGas_;
        }

        void EnvironmentalConditionsData::
        AmbientGas (const AmbientGas_sequence& s)
        {
          this->AmbientGas_ = s;
        }

        const EnvironmentalConditionsData::AmbientAerosol_sequence& EnvironmentalConditionsData::
        AmbientAerosol () const
        {
          return this->AmbientAerosol_;
        }

        EnvironmentalConditionsData::AmbientAerosol_sequence& EnvironmentalConditionsData::
        AmbientAerosol ()
        {
          return this->AmbientAerosol_;
        }

        void EnvironmentalConditionsData::
        AmbientAerosol (const AmbientAerosol_sequence& s)
        {
          this->AmbientAerosol_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentalConditionsData
        //

        EnvironmentalConditionsData::
        EnvironmentalConditionsData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          SurroundingType_ (this),
          AirDensity_ (this),
          AirVelocity_ (this),
          AmbientTemperature_ (this),
          AtmosphericPressure_ (this),
          ClothingResistance_ (this),
          Emissivity_ (this),
          MeanRadiantTemperature_ (this),
          RelativeHumidity_ (this),
          RespirationAmbientTemperature_ (this),
          AmbientGas_ (this),
          AmbientAerosol_ (this)
        {
        }

        EnvironmentalConditionsData::
        EnvironmentalConditionsData (const EnvironmentalConditionsData& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          SurroundingType_ (x.SurroundingType_, f, this),
          AirDensity_ (x.AirDensity_, f, this),
          AirVelocity_ (x.AirVelocity_, f, this),
          AmbientTemperature_ (x.AmbientTemperature_, f, this),
          AtmosphericPressure_ (x.AtmosphericPressure_, f, this),
          ClothingResistance_ (x.ClothingResistance_, f, this),
          Emissivity_ (x.Emissivity_, f, this),
          MeanRadiantTemperature_ (x.MeanRadiantTemperature_, f, this),
          RelativeHumidity_ (x.RelativeHumidity_, f, this),
          RespirationAmbientTemperature_ (x.RespirationAmbientTemperature_, f, this),
          AmbientGas_ (x.AmbientGas_, f, this),
          AmbientAerosol_ (x.AmbientAerosol_, f, this)
        {
        }

        EnvironmentalConditionsData::
        EnvironmentalConditionsData (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          SurroundingType_ (this),
          AirDensity_ (this),
          AirVelocity_ (this),
          AmbientTemperature_ (this),
          AtmosphericPressure_ (this),
          ClothingResistance_ (this),
          Emissivity_ (this),
          MeanRadiantTemperature_ (this),
          RelativeHumidity_ (this),
          RespirationAmbientTemperature_ (this),
          AmbientGas_ (this),
          AmbientAerosol_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentalConditionsData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SurroundingType
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SurroundingType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SurroundingType_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SurroundingType_)
                {
                  ::std::unique_ptr< SurroundingType_type > r (
                    dynamic_cast< SurroundingType_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SurroundingType_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirDensity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirDensity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirDensity_)
                {
                  ::std::unique_ptr< AirDensity_type > r (
                    dynamic_cast< AirDensity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirDensity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AirVelocity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AirVelocity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AirVelocity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AirVelocity_)
                {
                  ::std::unique_ptr< AirVelocity_type > r (
                    dynamic_cast< AirVelocity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AirVelocity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AmbientTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AmbientTemperature_)
                {
                  ::std::unique_ptr< AmbientTemperature_type > r (
                    dynamic_cast< AmbientTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AmbientTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AtmosphericPressure
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AtmosphericPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AtmosphericPressure_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AtmosphericPressure_)
                {
                  ::std::unique_ptr< AtmosphericPressure_type > r (
                    dynamic_cast< AtmosphericPressure_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AtmosphericPressure_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ClothingResistance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ClothingResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ClothingResistance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ClothingResistance_)
                {
                  ::std::unique_ptr< ClothingResistance_type > r (
                    dynamic_cast< ClothingResistance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ClothingResistance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Emissivity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Emissivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Emissivity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Emissivity_)
                {
                  ::std::unique_ptr< Emissivity_type > r (
                    dynamic_cast< Emissivity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Emissivity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanRadiantTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanRadiantTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanRadiantTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanRadiantTemperature_)
                {
                  ::std::unique_ptr< MeanRadiantTemperature_type > r (
                    dynamic_cast< MeanRadiantTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanRadiantTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RelativeHumidity
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RelativeHumidity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RelativeHumidity_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RelativeHumidity_)
                {
                  ::std::unique_ptr< RelativeHumidity_type > r (
                    dynamic_cast< RelativeHumidity_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RelativeHumidity_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationAmbientTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationAmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationAmbientTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationAmbientTemperature_)
                {
                  ::std::unique_ptr< RespirationAmbientTemperature_type > r (
                    dynamic_cast< RespirationAmbientTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationAmbientTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AmbientGas
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientGas_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< AmbientGas_type > r (
                  dynamic_cast< AmbientGas_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->AmbientGas_.push_back (::std::move (r));
                continue;
              }
            }

            // AmbientAerosol
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AmbientAerosol",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AmbientAerosol_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< AmbientAerosol_type > r (
                  dynamic_cast< AmbientAerosol_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->AmbientAerosol_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        EnvironmentalConditionsData* EnvironmentalConditionsData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentalConditionsData (*this, f, c);
        }

        EnvironmentalConditionsData& EnvironmentalConditionsData::
        operator= (const EnvironmentalConditionsData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->SurroundingType_ = x.SurroundingType_;
            this->AirDensity_ = x.AirDensity_;
            this->AirVelocity_ = x.AirVelocity_;
            this->AmbientTemperature_ = x.AmbientTemperature_;
            this->AtmosphericPressure_ = x.AtmosphericPressure_;
            this->ClothingResistance_ = x.ClothingResistance_;
            this->Emissivity_ = x.Emissivity_;
            this->MeanRadiantTemperature_ = x.MeanRadiantTemperature_;
            this->RelativeHumidity_ = x.RelativeHumidity_;
            this->RespirationAmbientTemperature_ = x.RespirationAmbientTemperature_;
            this->AmbientGas_ = x.AmbientGas_;
            this->AmbientAerosol_ = x.AmbientAerosol_;
          }

          return *this;
        }

        EnvironmentalConditionsData::
        ~EnvironmentalConditionsData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_type_factory_init (
          "EnvironmentalConditionsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentalConditionsData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SurroundingType ())
            {
              o << ::std::endl << "SurroundingType: ";
              om.insert (o, *i.SurroundingType ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              o << ::std::endl << "AirDensity: ";
              om.insert (o, *i.AirDensity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AirVelocity ())
            {
              o << ::std::endl << "AirVelocity: ";
              om.insert (o, *i.AirVelocity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AmbientTemperature ())
            {
              o << ::std::endl << "AmbientTemperature: ";
              om.insert (o, *i.AmbientTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AtmosphericPressure ())
            {
              o << ::std::endl << "AtmosphericPressure: ";
              om.insert (o, *i.AtmosphericPressure ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ClothingResistance ())
            {
              o << ::std::endl << "ClothingResistance: ";
              om.insert (o, *i.ClothingResistance ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Emissivity ())
            {
              o << ::std::endl << "Emissivity: ";
              om.insert (o, *i.Emissivity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanRadiantTemperature ())
            {
              o << ::std::endl << "MeanRadiantTemperature: ";
              om.insert (o, *i.MeanRadiantTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RelativeHumidity ())
            {
              o << ::std::endl << "RelativeHumidity: ";
              om.insert (o, *i.RelativeHumidity ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationAmbientTemperature ())
            {
              o << ::std::endl << "RespirationAmbientTemperature: ";
              om.insert (o, *i.RespirationAmbientTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientGas_const_iterator
                 b (i.AmbientGas ().begin ()), e (i.AmbientGas ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "AmbientGas: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientAerosol_const_iterator
                 b (i.AmbientAerosol ().begin ()), e (i.AmbientAerosol ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "AmbientAerosol: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentalConditionsData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // SurroundingType
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SurroundingType ())
            {
              const EnvironmentalConditionsData::SurroundingType_type& x (*i.SurroundingType ());
              if (typeid (EnvironmentalConditionsData::SurroundingType_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SurroundingType",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SurroundingType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirDensity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirDensity ())
            {
              const EnvironmentalConditionsData::AirDensity_type& x (*i.AirDensity ());
              if (typeid (EnvironmentalConditionsData::AirDensity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirDensity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirDensity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AirVelocity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AirVelocity ())
            {
              const EnvironmentalConditionsData::AirVelocity_type& x (*i.AirVelocity ());
              if (typeid (EnvironmentalConditionsData::AirVelocity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AirVelocity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AirVelocity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AmbientTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AmbientTemperature ())
            {
              const EnvironmentalConditionsData::AmbientTemperature_type& x (*i.AmbientTemperature ());
              if (typeid (EnvironmentalConditionsData::AmbientTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AtmosphericPressure
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AtmosphericPressure ())
            {
              const EnvironmentalConditionsData::AtmosphericPressure_type& x (*i.AtmosphericPressure ());
              if (typeid (EnvironmentalConditionsData::AtmosphericPressure_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AtmosphericPressure",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AtmosphericPressure",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ClothingResistance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ClothingResistance ())
            {
              const EnvironmentalConditionsData::ClothingResistance_type& x (*i.ClothingResistance ());
              if (typeid (EnvironmentalConditionsData::ClothingResistance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ClothingResistance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ClothingResistance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Emissivity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Emissivity ())
            {
              const EnvironmentalConditionsData::Emissivity_type& x (*i.Emissivity ());
              if (typeid (EnvironmentalConditionsData::Emissivity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Emissivity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Emissivity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanRadiantTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanRadiantTemperature ())
            {
              const EnvironmentalConditionsData::MeanRadiantTemperature_type& x (*i.MeanRadiantTemperature ());
              if (typeid (EnvironmentalConditionsData::MeanRadiantTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanRadiantTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanRadiantTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RelativeHumidity
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RelativeHumidity ())
            {
              const EnvironmentalConditionsData::RelativeHumidity_type& x (*i.RelativeHumidity ());
              if (typeid (EnvironmentalConditionsData::RelativeHumidity_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RelativeHumidity",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RelativeHumidity",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationAmbientTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationAmbientTemperature ())
            {
              const EnvironmentalConditionsData::RespirationAmbientTemperature_type& x (*i.RespirationAmbientTemperature ());
              if (typeid (EnvironmentalConditionsData::RespirationAmbientTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationAmbientTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationAmbientTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AmbientGas
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientGas_const_iterator
                 b (i.AmbientGas ().begin ()), n (i.AmbientGas ().end ());
                 b != n; ++b)
            {
              if (typeid (EnvironmentalConditionsData::AmbientGas_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientGas",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "AmbientGas",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // AmbientAerosol
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (EnvironmentalConditionsData::AmbientAerosol_const_iterator
                 b (i.AmbientAerosol ().begin ()), n (i.AmbientAerosol ().end ());
                 b != n; ++b)
            {
              if (typeid (EnvironmentalConditionsData::AmbientAerosol_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AmbientAerosol",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "AmbientAerosol",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentalConditionsData >
        _xsd_EnvironmentalConditionsData_type_serializer_init (
          "EnvironmentalConditionsData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


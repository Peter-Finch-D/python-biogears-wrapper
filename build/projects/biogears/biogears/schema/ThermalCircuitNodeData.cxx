// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ThermalCircuitNodeData.hxx"

#include "ScalarTemperatureData.hxx"

#include "ScalarEnergyData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ThermalCircuitNodeData
        // 

        const ThermalCircuitNodeData::Temperature_optional& ThermalCircuitNodeData::
        Temperature () const
        {
          return this->Temperature_;
        }

        ThermalCircuitNodeData::Temperature_optional& ThermalCircuitNodeData::
        Temperature ()
        {
          return this->Temperature_;
        }

        void ThermalCircuitNodeData::
        Temperature (const Temperature_type& x)
        {
          this->Temperature_.set (x);
        }

        void ThermalCircuitNodeData::
        Temperature (const Temperature_optional& x)
        {
          this->Temperature_ = x;
        }

        void ThermalCircuitNodeData::
        Temperature (::std::unique_ptr< Temperature_type > x)
        {
          this->Temperature_.set (std::move (x));
        }

        const ThermalCircuitNodeData::NextTemperature_optional& ThermalCircuitNodeData::
        NextTemperature () const
        {
          return this->NextTemperature_;
        }

        ThermalCircuitNodeData::NextTemperature_optional& ThermalCircuitNodeData::
        NextTemperature ()
        {
          return this->NextTemperature_;
        }

        void ThermalCircuitNodeData::
        NextTemperature (const NextTemperature_type& x)
        {
          this->NextTemperature_.set (x);
        }

        void ThermalCircuitNodeData::
        NextTemperature (const NextTemperature_optional& x)
        {
          this->NextTemperature_ = x;
        }

        void ThermalCircuitNodeData::
        NextTemperature (::std::unique_ptr< NextTemperature_type > x)
        {
          this->NextTemperature_.set (std::move (x));
        }

        const ThermalCircuitNodeData::Heat_optional& ThermalCircuitNodeData::
        Heat () const
        {
          return this->Heat_;
        }

        ThermalCircuitNodeData::Heat_optional& ThermalCircuitNodeData::
        Heat ()
        {
          return this->Heat_;
        }

        void ThermalCircuitNodeData::
        Heat (const Heat_type& x)
        {
          this->Heat_.set (x);
        }

        void ThermalCircuitNodeData::
        Heat (const Heat_optional& x)
        {
          this->Heat_ = x;
        }

        void ThermalCircuitNodeData::
        Heat (::std::unique_ptr< Heat_type > x)
        {
          this->Heat_.set (std::move (x));
        }

        const ThermalCircuitNodeData::NextHeat_optional& ThermalCircuitNodeData::
        NextHeat () const
        {
          return this->NextHeat_;
        }

        ThermalCircuitNodeData::NextHeat_optional& ThermalCircuitNodeData::
        NextHeat ()
        {
          return this->NextHeat_;
        }

        void ThermalCircuitNodeData::
        NextHeat (const NextHeat_type& x)
        {
          this->NextHeat_.set (x);
        }

        void ThermalCircuitNodeData::
        NextHeat (const NextHeat_optional& x)
        {
          this->NextHeat_ = x;
        }

        void ThermalCircuitNodeData::
        NextHeat (::std::unique_ptr< NextHeat_type > x)
        {
          this->NextHeat_.set (std::move (x));
        }

        const ThermalCircuitNodeData::HeatBaseline_optional& ThermalCircuitNodeData::
        HeatBaseline () const
        {
          return this->HeatBaseline_;
        }

        ThermalCircuitNodeData::HeatBaseline_optional& ThermalCircuitNodeData::
        HeatBaseline ()
        {
          return this->HeatBaseline_;
        }

        void ThermalCircuitNodeData::
        HeatBaseline (const HeatBaseline_type& x)
        {
          this->HeatBaseline_.set (x);
        }

        void ThermalCircuitNodeData::
        HeatBaseline (const HeatBaseline_optional& x)
        {
          this->HeatBaseline_ = x;
        }

        void ThermalCircuitNodeData::
        HeatBaseline (::std::unique_ptr< HeatBaseline_type > x)
        {
          this->HeatBaseline_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // ThermalCircuitNodeData
        //

        ThermalCircuitNodeData::
        ThermalCircuitNodeData ()
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (),
          Temperature_ (this),
          NextTemperature_ (this),
          Heat_ (this),
          NextHeat_ (this),
          HeatBaseline_ (this)
        {
        }

        ThermalCircuitNodeData::
        ThermalCircuitNodeData (const Name_type& Name)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (Name),
          Temperature_ (this),
          NextTemperature_ (this),
          Heat_ (this),
          NextHeat_ (this),
          HeatBaseline_ (this)
        {
        }

        ThermalCircuitNodeData::
        ThermalCircuitNodeData (::std::unique_ptr< Name_type > Name)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (std::move (Name)),
          Temperature_ (this),
          NextTemperature_ (this),
          Heat_ (this),
          NextHeat_ (this),
          HeatBaseline_ (this)
        {
        }

        ThermalCircuitNodeData::
        ThermalCircuitNodeData (const ThermalCircuitNodeData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (x, f, c),
          Temperature_ (x.Temperature_, f, this),
          NextTemperature_ (x.NextTemperature_, f, this),
          Heat_ (x.Heat_, f, this),
          NextHeat_ (x.NextHeat_, f, this),
          HeatBaseline_ (x.HeatBaseline_, f, this)
        {
        }

        ThermalCircuitNodeData::
        ThermalCircuitNodeData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::CircuitNodeData (e, f | ::xml_schema::flags::base, c),
          Temperature_ (this),
          NextTemperature_ (this),
          Heat_ (this),
          NextHeat_ (this),
          HeatBaseline_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void ThermalCircuitNodeData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::CircuitNodeData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Temperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Temperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Temperature_)
                {
                  ::std::unique_ptr< Temperature_type > r (
                    dynamic_cast< Temperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Temperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextTemperature_)
                {
                  ::std::unique_ptr< NextTemperature_type > r (
                    dynamic_cast< NextTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Heat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Heat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Heat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Heat_)
                {
                  ::std::unique_ptr< Heat_type > r (
                    dynamic_cast< Heat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Heat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NextHeat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NextHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NextHeat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NextHeat_)
                {
                  ::std::unique_ptr< NextHeat_type > r (
                    dynamic_cast< NextHeat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NextHeat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeatBaseline
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeatBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeatBaseline_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeatBaseline_)
                {
                  ::std::unique_ptr< HeatBaseline_type > r (
                    dynamic_cast< HeatBaseline_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeatBaseline_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        ThermalCircuitNodeData* ThermalCircuitNodeData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class ThermalCircuitNodeData (*this, f, c);
        }

        ThermalCircuitNodeData& ThermalCircuitNodeData::
        operator= (const ThermalCircuitNodeData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (*this) = x;
            this->Temperature_ = x.Temperature_;
            this->NextTemperature_ = x.NextTemperature_;
            this->Heat_ = x.Heat_;
            this->NextHeat_ = x.NextHeat_;
            this->HeatBaseline_ = x.HeatBaseline_;
          }

          return *this;
        }

        ThermalCircuitNodeData::
        ~ThermalCircuitNodeData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, ThermalCircuitNodeData >
        _xsd_ThermalCircuitNodeData_type_factory_init (
          "ThermalCircuitNodeData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const ThermalCircuitNodeData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              o << ::std::endl << "Temperature: ";
              om.insert (o, *i.Temperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextTemperature ())
            {
              o << ::std::endl << "NextTemperature: ";
              om.insert (o, *i.NextTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Heat ())
            {
              o << ::std::endl << "Heat: ";
              om.insert (o, *i.Heat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NextHeat ())
            {
              o << ::std::endl << "NextHeat: ";
              om.insert (o, *i.NextHeat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeatBaseline ())
            {
              o << ::std::endl << "HeatBaseline: ";
              om.insert (o, *i.HeatBaseline ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ThermalCircuitNodeData >
        _xsd_ThermalCircuitNodeData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const ThermalCircuitNodeData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::CircuitNodeData& > (i);

          // Temperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Temperature ())
            {
              const ThermalCircuitNodeData::Temperature_type& x (*i.Temperature ());
              if (typeid (ThermalCircuitNodeData::Temperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Temperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Temperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextTemperature ())
            {
              const ThermalCircuitNodeData::NextTemperature_type& x (*i.NextTemperature ());
              if (typeid (ThermalCircuitNodeData::NextTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Heat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Heat ())
            {
              const ThermalCircuitNodeData::Heat_type& x (*i.Heat ());
              if (typeid (ThermalCircuitNodeData::Heat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Heat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Heat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NextHeat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NextHeat ())
            {
              const ThermalCircuitNodeData::NextHeat_type& x (*i.NextHeat ());
              if (typeid (ThermalCircuitNodeData::NextHeat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NextHeat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NextHeat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeatBaseline
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeatBaseline ())
            {
              const ThermalCircuitNodeData::HeatBaseline_type& x (*i.HeatBaseline ());
              if (typeid (ThermalCircuitNodeData::HeatBaseline_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeatBaseline",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeatBaseline",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ThermalCircuitNodeData >
        _xsd_ThermalCircuitNodeData_type_serializer_init (
          "ThermalCircuitNodeData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "UrinalysisMicroscopicData.hxx"

#include "enumMicroscopicObservationType.hxx"

#include "ScalarAmountData.hxx"

#include "enumMicroscopicObservationAmount.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // UrinalysisMicroscopicData
        // 

        const UrinalysisMicroscopicData::ObservationType_type& UrinalysisMicroscopicData::
        ObservationType () const
        {
          return this->ObservationType_.get ();
        }

        UrinalysisMicroscopicData::ObservationType_type& UrinalysisMicroscopicData::
        ObservationType ()
        {
          return this->ObservationType_.get ();
        }

        void UrinalysisMicroscopicData::
        ObservationType (const ObservationType_type& x)
        {
          this->ObservationType_.set (x);
        }

        void UrinalysisMicroscopicData::
        ObservationType (::std::unique_ptr< ObservationType_type > x)
        {
          this->ObservationType_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::RedBloodCells_optional& UrinalysisMicroscopicData::
        RedBloodCells () const
        {
          return this->RedBloodCells_;
        }

        UrinalysisMicroscopicData::RedBloodCells_optional& UrinalysisMicroscopicData::
        RedBloodCells ()
        {
          return this->RedBloodCells_;
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (const RedBloodCells_type& x)
        {
          this->RedBloodCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (const RedBloodCells_optional& x)
        {
          this->RedBloodCells_ = x;
        }

        void UrinalysisMicroscopicData::
        RedBloodCells (::std::unique_ptr< RedBloodCells_type > x)
        {
          this->RedBloodCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::WhiteBloodCells_optional& UrinalysisMicroscopicData::
        WhiteBloodCells () const
        {
          return this->WhiteBloodCells_;
        }

        UrinalysisMicroscopicData::WhiteBloodCells_optional& UrinalysisMicroscopicData::
        WhiteBloodCells ()
        {
          return this->WhiteBloodCells_;
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (const WhiteBloodCells_type& x)
        {
          this->WhiteBloodCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (const WhiteBloodCells_optional& x)
        {
          this->WhiteBloodCells_ = x;
        }

        void UrinalysisMicroscopicData::
        WhiteBloodCells (::std::unique_ptr< WhiteBloodCells_type > x)
        {
          this->WhiteBloodCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::EpithelialCells_optional& UrinalysisMicroscopicData::
        EpithelialCells () const
        {
          return this->EpithelialCells_;
        }

        UrinalysisMicroscopicData::EpithelialCells_optional& UrinalysisMicroscopicData::
        EpithelialCells ()
        {
          return this->EpithelialCells_;
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (const EpithelialCells_type& x)
        {
          this->EpithelialCells_.set (x);
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (const EpithelialCells_optional& x)
        {
          this->EpithelialCells_ = x;
        }

        void UrinalysisMicroscopicData::
        EpithelialCells (::std::unique_ptr< EpithelialCells_type > x)
        {
          this->EpithelialCells_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Casts_optional& UrinalysisMicroscopicData::
        Casts () const
        {
          return this->Casts_;
        }

        UrinalysisMicroscopicData::Casts_optional& UrinalysisMicroscopicData::
        Casts ()
        {
          return this->Casts_;
        }

        void UrinalysisMicroscopicData::
        Casts (const Casts_type& x)
        {
          this->Casts_.set (x);
        }

        void UrinalysisMicroscopicData::
        Casts (const Casts_optional& x)
        {
          this->Casts_ = x;
        }

        void UrinalysisMicroscopicData::
        Casts (::std::unique_ptr< Casts_type > x)
        {
          this->Casts_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Crystals_optional& UrinalysisMicroscopicData::
        Crystals () const
        {
          return this->Crystals_;
        }

        UrinalysisMicroscopicData::Crystals_optional& UrinalysisMicroscopicData::
        Crystals ()
        {
          return this->Crystals_;
        }

        void UrinalysisMicroscopicData::
        Crystals (const Crystals_type& x)
        {
          this->Crystals_.set (x);
        }

        void UrinalysisMicroscopicData::
        Crystals (const Crystals_optional& x)
        {
          this->Crystals_ = x;
        }

        void UrinalysisMicroscopicData::
        Crystals (::std::unique_ptr< Crystals_type > x)
        {
          this->Crystals_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Bacteria_optional& UrinalysisMicroscopicData::
        Bacteria () const
        {
          return this->Bacteria_;
        }

        UrinalysisMicroscopicData::Bacteria_optional& UrinalysisMicroscopicData::
        Bacteria ()
        {
          return this->Bacteria_;
        }

        void UrinalysisMicroscopicData::
        Bacteria (const Bacteria_type& x)
        {
          this->Bacteria_.set (x);
        }

        void UrinalysisMicroscopicData::
        Bacteria (const Bacteria_optional& x)
        {
          this->Bacteria_ = x;
        }

        void UrinalysisMicroscopicData::
        Bacteria (::std::unique_ptr< Bacteria_type > x)
        {
          this->Bacteria_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Trichomonads_optional& UrinalysisMicroscopicData::
        Trichomonads () const
        {
          return this->Trichomonads_;
        }

        UrinalysisMicroscopicData::Trichomonads_optional& UrinalysisMicroscopicData::
        Trichomonads ()
        {
          return this->Trichomonads_;
        }

        void UrinalysisMicroscopicData::
        Trichomonads (const Trichomonads_type& x)
        {
          this->Trichomonads_.set (x);
        }

        void UrinalysisMicroscopicData::
        Trichomonads (const Trichomonads_optional& x)
        {
          this->Trichomonads_ = x;
        }

        void UrinalysisMicroscopicData::
        Trichomonads (::std::unique_ptr< Trichomonads_type > x)
        {
          this->Trichomonads_.set (std::move (x));
        }

        const UrinalysisMicroscopicData::Yeast_optional& UrinalysisMicroscopicData::
        Yeast () const
        {
          return this->Yeast_;
        }

        UrinalysisMicroscopicData::Yeast_optional& UrinalysisMicroscopicData::
        Yeast ()
        {
          return this->Yeast_;
        }

        void UrinalysisMicroscopicData::
        Yeast (const Yeast_type& x)
        {
          this->Yeast_.set (x);
        }

        void UrinalysisMicroscopicData::
        Yeast (const Yeast_optional& x)
        {
          this->Yeast_ = x;
        }

        void UrinalysisMicroscopicData::
        Yeast (::std::unique_ptr< Yeast_type > x)
        {
          this->Yeast_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // UrinalysisMicroscopicData
        //

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData ()
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const ObservationType_type& ObservationType)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (ObservationType, this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (::std::unique_ptr< ObservationType_type > ObservationType)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (),
          ObservationType_ (std::move (ObservationType), this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const UrinalysisMicroscopicData& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (x, f, c),
          ObservationType_ (x.ObservationType_, f, this),
          RedBloodCells_ (x.RedBloodCells_, f, this),
          WhiteBloodCells_ (x.WhiteBloodCells_, f, this),
          EpithelialCells_ (x.EpithelialCells_, f, this),
          Casts_ (x.Casts_, f, this),
          Crystals_ (x.Crystals_, f, this),
          Bacteria_ (x.Bacteria_, f, this),
          Trichomonads_ (x.Trichomonads_, f, this),
          Yeast_ (x.Yeast_, f, this)
        {
        }

        UrinalysisMicroscopicData::
        UrinalysisMicroscopicData (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PatientAssessmentData (e, f | ::xml_schema::flags::base, c),
          ObservationType_ (this),
          RedBloodCells_ (this),
          WhiteBloodCells_ (this),
          EpithelialCells_ (this),
          Casts_ (this),
          Crystals_ (this),
          Bacteria_ (this),
          Trichomonads_ (this),
          Yeast_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void UrinalysisMicroscopicData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PatientAssessmentData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ObservationType
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ObservationType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ObservationType_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!ObservationType_.present ())
                {
                  ::std::unique_ptr< ObservationType_type > r (
                    dynamic_cast< ObservationType_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ObservationType_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RedBloodCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RedBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RedBloodCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RedBloodCells_)
                {
                  ::std::unique_ptr< RedBloodCells_type > r (
                    dynamic_cast< RedBloodCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RedBloodCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // WhiteBloodCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "WhiteBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< WhiteBloodCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->WhiteBloodCells_)
                {
                  ::std::unique_ptr< WhiteBloodCells_type > r (
                    dynamic_cast< WhiteBloodCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->WhiteBloodCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EpithelialCells
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EpithelialCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EpithelialCells_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EpithelialCells_)
                {
                  ::std::unique_ptr< EpithelialCells_type > r (
                    dynamic_cast< EpithelialCells_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EpithelialCells_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Casts
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Casts",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Casts_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Casts_)
                {
                  ::std::unique_ptr< Casts_type > r (
                    dynamic_cast< Casts_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Casts_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Crystals
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Crystals",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Crystals_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Crystals_)
                {
                  ::std::unique_ptr< Crystals_type > r (
                    dynamic_cast< Crystals_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Crystals_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Bacteria
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Bacteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Bacteria_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Bacteria_)
                {
                  ::std::unique_ptr< Bacteria_type > r (
                    dynamic_cast< Bacteria_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Bacteria_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Trichomonads
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Trichomonads",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Trichomonads_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Trichomonads_)
                {
                  ::std::unique_ptr< Trichomonads_type > r (
                    dynamic_cast< Trichomonads_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Trichomonads_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Yeast
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Yeast",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Yeast_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Yeast_)
                {
                  ::std::unique_ptr< Yeast_type > r (
                    dynamic_cast< Yeast_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Yeast_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!ObservationType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ObservationType",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        UrinalysisMicroscopicData* UrinalysisMicroscopicData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class UrinalysisMicroscopicData (*this, f, c);
        }

        UrinalysisMicroscopicData& UrinalysisMicroscopicData::
        operator= (const UrinalysisMicroscopicData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (*this) = x;
            this->ObservationType_ = x.ObservationType_;
            this->RedBloodCells_ = x.RedBloodCells_;
            this->WhiteBloodCells_ = x.WhiteBloodCells_;
            this->EpithelialCells_ = x.EpithelialCells_;
            this->Casts_ = x.Casts_;
            this->Crystals_ = x.Crystals_;
            this->Bacteria_ = x.Bacteria_;
            this->Trichomonads_ = x.Trichomonads_;
            this->Yeast_ = x.Yeast_;
          }

          return *this;
        }

        UrinalysisMicroscopicData::
        ~UrinalysisMicroscopicData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_type_factory_init (
          "UrinalysisMicroscopicData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const UrinalysisMicroscopicData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "ObservationType: ";
            om.insert (o, i.ObservationType ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RedBloodCells ())
            {
              o << ::std::endl << "RedBloodCells: ";
              om.insert (o, *i.RedBloodCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.WhiteBloodCells ())
            {
              o << ::std::endl << "WhiteBloodCells: ";
              om.insert (o, *i.WhiteBloodCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EpithelialCells ())
            {
              o << ::std::endl << "EpithelialCells: ";
              om.insert (o, *i.EpithelialCells ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Casts ())
            {
              o << ::std::endl << "Casts: ";
              om.insert (o, *i.Casts ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Crystals ())
            {
              o << ::std::endl << "Crystals: ";
              om.insert (o, *i.Crystals ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Bacteria ())
            {
              o << ::std::endl << "Bacteria: ";
              om.insert (o, *i.Bacteria ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Trichomonads ())
            {
              o << ::std::endl << "Trichomonads: ";
              om.insert (o, *i.Trichomonads ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Yeast ())
            {
              o << ::std::endl << "Yeast: ";
              om.insert (o, *i.Yeast ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const UrinalysisMicroscopicData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PatientAssessmentData& > (i);

          // ObservationType
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const UrinalysisMicroscopicData::ObservationType_type& x (i.ObservationType ());
            if (typeid (UrinalysisMicroscopicData::ObservationType_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "ObservationType",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "ObservationType",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // RedBloodCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RedBloodCells ())
            {
              const UrinalysisMicroscopicData::RedBloodCells_type& x (*i.RedBloodCells ());
              if (typeid (UrinalysisMicroscopicData::RedBloodCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RedBloodCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RedBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // WhiteBloodCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.WhiteBloodCells ())
            {
              const UrinalysisMicroscopicData::WhiteBloodCells_type& x (*i.WhiteBloodCells ());
              if (typeid (UrinalysisMicroscopicData::WhiteBloodCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "WhiteBloodCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "WhiteBloodCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EpithelialCells
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EpithelialCells ())
            {
              const UrinalysisMicroscopicData::EpithelialCells_type& x (*i.EpithelialCells ());
              if (typeid (UrinalysisMicroscopicData::EpithelialCells_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EpithelialCells",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EpithelialCells",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Casts
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Casts ())
            {
              const UrinalysisMicroscopicData::Casts_type& x (*i.Casts ());
              if (typeid (UrinalysisMicroscopicData::Casts_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Casts",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Casts",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Crystals
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Crystals ())
            {
              const UrinalysisMicroscopicData::Crystals_type& x (*i.Crystals ());
              if (typeid (UrinalysisMicroscopicData::Crystals_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Crystals",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Crystals",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Bacteria
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Bacteria ())
            {
              const UrinalysisMicroscopicData::Bacteria_type& x (*i.Bacteria ());
              if (typeid (UrinalysisMicroscopicData::Bacteria_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Bacteria",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Bacteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Trichomonads
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Trichomonads ())
            {
              const UrinalysisMicroscopicData::Trichomonads_type& x (*i.Trichomonads ());
              if (typeid (UrinalysisMicroscopicData::Trichomonads_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Trichomonads",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Trichomonads",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Yeast
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Yeast ())
            {
              const UrinalysisMicroscopicData::Yeast_type& x (*i.Yeast ());
              if (typeid (UrinalysisMicroscopicData::Yeast_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Yeast",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Yeast",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UrinalysisMicroscopicData >
        _xsd_UrinalysisMicroscopicData_type_serializer_init (
          "UrinalysisMicroscopicData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "FunctionData.hxx"

#include "DoubleArray.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // FunctionData
        // 

        const FunctionData::Dependent_type& FunctionData::
        Dependent () const
        {
          return this->Dependent_.get ();
        }

        FunctionData::Dependent_type& FunctionData::
        Dependent ()
        {
          return this->Dependent_.get ();
        }

        void FunctionData::
        Dependent (const Dependent_type& x)
        {
          this->Dependent_.set (x);
        }

        void FunctionData::
        Dependent (::std::unique_ptr< Dependent_type > x)
        {
          this->Dependent_.set (std::move (x));
        }

        const FunctionData::Independent_type& FunctionData::
        Independent () const
        {
          return this->Independent_.get ();
        }

        FunctionData::Independent_type& FunctionData::
        Independent ()
        {
          return this->Independent_.get ();
        }

        void FunctionData::
        Independent (const Independent_type& x)
        {
          this->Independent_.set (x);
        }

        void FunctionData::
        Independent (::std::unique_ptr< Independent_type > x)
        {
          this->Independent_.set (std::move (x));
        }

        const FunctionData::DependentUnit_optional& FunctionData::
        DependentUnit () const
        {
          return this->DependentUnit_;
        }

        FunctionData::DependentUnit_optional& FunctionData::
        DependentUnit ()
        {
          return this->DependentUnit_;
        }

        void FunctionData::
        DependentUnit (const DependentUnit_type& x)
        {
          this->DependentUnit_.set (x);
        }

        void FunctionData::
        DependentUnit (const DependentUnit_optional& x)
        {
          this->DependentUnit_ = x;
        }

        void FunctionData::
        DependentUnit (::std::unique_ptr< DependentUnit_type > x)
        {
          this->DependentUnit_.set (std::move (x));
        }

        const FunctionData::IndependentUnit_optional& FunctionData::
        IndependentUnit () const
        {
          return this->IndependentUnit_;
        }

        FunctionData::IndependentUnit_optional& FunctionData::
        IndependentUnit ()
        {
          return this->IndependentUnit_;
        }

        void FunctionData::
        IndependentUnit (const IndependentUnit_type& x)
        {
          this->IndependentUnit_.set (x);
        }

        void FunctionData::
        IndependentUnit (const IndependentUnit_optional& x)
        {
          this->IndependentUnit_ = x;
        }

        void FunctionData::
        IndependentUnit (::std::unique_ptr< IndependentUnit_type > x)
        {
          this->IndependentUnit_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // FunctionData
        //

        FunctionData::
        FunctionData ()
        : ::mil::tatrc::physiology::datamodel::PropertyData (),
          Dependent_ (this),
          Independent_ (this),
          DependentUnit_ (this),
          IndependentUnit_ (this)
        {
        }

        FunctionData::
        FunctionData (const Dependent_type& Dependent,
                      const Independent_type& Independent)
        : ::mil::tatrc::physiology::datamodel::PropertyData (),
          Dependent_ (Dependent, this),
          Independent_ (Independent, this),
          DependentUnit_ (this),
          IndependentUnit_ (this)
        {
        }

        FunctionData::
        FunctionData (::std::unique_ptr< Dependent_type > Dependent,
                      ::std::unique_ptr< Independent_type > Independent)
        : ::mil::tatrc::physiology::datamodel::PropertyData (),
          Dependent_ (std::move (Dependent), this),
          Independent_ (std::move (Independent), this),
          DependentUnit_ (this),
          IndependentUnit_ (this)
        {
        }

        FunctionData::
        FunctionData (const FunctionData& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PropertyData (x, f, c),
          Dependent_ (x.Dependent_, f, this),
          Independent_ (x.Independent_, f, this),
          DependentUnit_ (x.DependentUnit_, f, this),
          IndependentUnit_ (x.IndependentUnit_, f, this)
        {
        }

        FunctionData::
        FunctionData (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PropertyData (e, f | ::xml_schema::flags::base, c),
          Dependent_ (this),
          Independent_ (this),
          DependentUnit_ (this),
          IndependentUnit_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void FunctionData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Dependent
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Dependent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Dependent_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Dependent_.present ())
                {
                  ::std::unique_ptr< Dependent_type > r (
                    dynamic_cast< Dependent_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Dependent_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Independent
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Independent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Independent_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!Independent_.present ())
                {
                  ::std::unique_ptr< Independent_type > r (
                    dynamic_cast< Independent_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Independent_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }

          if (!Dependent_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Dependent",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          if (!Independent_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Independent",
              "uri:/mil/tatrc/physiology/datamodel");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "DependentUnit" && n.namespace_ ().empty ())
            {
              this->DependentUnit_.set (DependentUnit_traits::create (i, f, this));
              continue;
            }

            if (n.name () == "IndependentUnit" && n.namespace_ ().empty ())
            {
              this->IndependentUnit_.set (IndependentUnit_traits::create (i, f, this));
              continue;
            }
          }
        }

        FunctionData* FunctionData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class FunctionData (*this, f, c);
        }

        FunctionData& FunctionData::
        operator= (const FunctionData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PropertyData& > (*this) = x;
            this->Dependent_ = x.Dependent_;
            this->Independent_ = x.Independent_;
            this->DependentUnit_ = x.DependentUnit_;
            this->IndependentUnit_ = x.IndependentUnit_;
          }

          return *this;
        }

        FunctionData::
        ~FunctionData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, FunctionData >
        _xsd_FunctionData_type_factory_init (
          "FunctionData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const FunctionData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PropertyData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Dependent: ";
            om.insert (o, i.Dependent ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "Independent: ";
            om.insert (o, i.Independent ());
          }

          if (i.DependentUnit ())
          {
            o << ::std::endl << "DependentUnit: " << *i.DependentUnit ();
          }

          if (i.IndependentUnit ())
          {
            o << ::std::endl << "IndependentUnit: " << *i.IndependentUnit ();
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FunctionData >
        _xsd_FunctionData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const FunctionData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PropertyData& > (i);

          // Dependent
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const FunctionData::Dependent_type& x (i.Dependent ());
            if (typeid (FunctionData::Dependent_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Dependent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Dependent",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // Independent
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const FunctionData::Independent_type& x (i.Independent ());
            if (typeid (FunctionData::Independent_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "Independent",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "Independent",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // DependentUnit
          //
          if (i.DependentUnit ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "DependentUnit",
                e));

            a << *i.DependentUnit ();
          }

          // IndependentUnit
          //
          if (i.IndependentUnit ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "IndependentUnit",
                e));

            a << *i.IndependentUnit ();
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FunctionData >
        _xsd_FunctionData_type_serializer_init (
          "FunctionData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


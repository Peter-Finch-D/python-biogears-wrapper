// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from BloodChemistrySystemData.xsd.
 */

#ifndef BLOOD_CHEMISTRY_SYSTEM_DATA_HXX
#define BLOOD_CHEMISTRY_SYSTEM_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class BloodChemistrySystemData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "SystemData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarHeatCapacitancePerMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarAmountPerVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarPressureData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %BloodChemistrySystemData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API BloodChemistrySystemData: public ::mil::tatrc::physiology::datamodel::SystemData
        {
          public:
          /**
           * @name BloodDensity
           *
           * @brief Accessor and modifier functions for the %BloodDensity
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BloodDensity_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodDensity_type > BloodDensity_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodDensity_type, char > BloodDensity_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodDensity_optional&
          BloodDensity () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodDensity_optional&
          BloodDensity ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodDensity (const BloodDensity_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodDensity (const BloodDensity_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodDensity (::std::unique_ptr< BloodDensity_type > p);

          //@}

          /**
           * @name BloodPH
           *
           * @brief Accessor and modifier functions for the %BloodPH
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData BloodPH_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodPH_type > BloodPH_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodPH_type, char > BloodPH_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodPH_optional&
          BloodPH () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodPH_optional&
          BloodPH ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodPH (const BloodPH_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodPH (const BloodPH_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodPH (::std::unique_ptr< BloodPH_type > p);

          //@}

          /**
           * @name BloodSpecificHeat
           *
           * @brief Accessor and modifier functions for the %BloodSpecificHeat
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarHeatCapacitancePerMassData BloodSpecificHeat_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodSpecificHeat_type > BloodSpecificHeat_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodSpecificHeat_type, char > BloodSpecificHeat_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodSpecificHeat_optional&
          BloodSpecificHeat () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodSpecificHeat_optional&
          BloodSpecificHeat ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodSpecificHeat (const BloodSpecificHeat_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodSpecificHeat (const BloodSpecificHeat_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodSpecificHeat (::std::unique_ptr< BloodSpecificHeat_type > p);

          //@}

          /**
           * @name BloodUreaNitrogenConcentration
           *
           * @brief Accessor and modifier functions for the %BloodUreaNitrogenConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData BloodUreaNitrogenConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BloodUreaNitrogenConcentration_type > BloodUreaNitrogenConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BloodUreaNitrogenConcentration_type, char > BloodUreaNitrogenConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BloodUreaNitrogenConcentration_optional&
          BloodUreaNitrogenConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          BloodUreaNitrogenConcentration_optional&
          BloodUreaNitrogenConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          BloodUreaNitrogenConcentration (const BloodUreaNitrogenConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          BloodUreaNitrogenConcentration (::std::unique_ptr< BloodUreaNitrogenConcentration_type > p);

          //@}

          /**
           * @name CarbonDioxideSaturation
           *
           * @brief Accessor and modifier functions for the %CarbonDioxideSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonDioxideSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonDioxideSaturation_type > CarbonDioxideSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonDioxideSaturation_type, char > CarbonDioxideSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonDioxideSaturation_optional&
          CarbonDioxideSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonDioxideSaturation_optional&
          CarbonDioxideSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonDioxideSaturation (const CarbonDioxideSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonDioxideSaturation (const CarbonDioxideSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonDioxideSaturation (::std::unique_ptr< CarbonDioxideSaturation_type > p);

          //@}

          /**
           * @name CarbonMonoxideSaturation
           *
           * @brief Accessor and modifier functions for the %CarbonMonoxideSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData CarbonMonoxideSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CarbonMonoxideSaturation_type > CarbonMonoxideSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CarbonMonoxideSaturation_type, char > CarbonMonoxideSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CarbonMonoxideSaturation_optional&
          CarbonMonoxideSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CarbonMonoxideSaturation_optional&
          CarbonMonoxideSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          CarbonMonoxideSaturation (const CarbonMonoxideSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          CarbonMonoxideSaturation (const CarbonMonoxideSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          CarbonMonoxideSaturation (::std::unique_ptr< CarbonMonoxideSaturation_type > p);

          //@}

          /**
           * @name Hematocrit
           *
           * @brief Accessor and modifier functions for the %Hematocrit
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData Hematocrit_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Hematocrit_type > Hematocrit_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Hematocrit_type, char > Hematocrit_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Hematocrit_optional&
          Hematocrit () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Hematocrit_optional&
          Hematocrit ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Hematocrit (const Hematocrit_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Hematocrit (const Hematocrit_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Hematocrit (::std::unique_ptr< Hematocrit_type > p);

          //@}

          /**
           * @name HemoglobinContent
           *
           * @brief Accessor and modifier functions for the %HemoglobinContent
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData HemoglobinContent_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HemoglobinContent_type > HemoglobinContent_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HemoglobinContent_type, char > HemoglobinContent_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HemoglobinContent_optional&
          HemoglobinContent () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          HemoglobinContent_optional&
          HemoglobinContent ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          HemoglobinContent (const HemoglobinContent_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          HemoglobinContent (const HemoglobinContent_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          HemoglobinContent (::std::unique_ptr< HemoglobinContent_type > p);

          //@}

          /**
           * @name OxygenSaturation
           *
           * @brief Accessor and modifier functions for the %OxygenSaturation
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData OxygenSaturation_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OxygenSaturation_type > OxygenSaturation_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OxygenSaturation_type, char > OxygenSaturation_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OxygenSaturation_optional&
          OxygenSaturation () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          OxygenSaturation_optional&
          OxygenSaturation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          OxygenSaturation (const OxygenSaturation_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          OxygenSaturation (const OxygenSaturation_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          OxygenSaturation (::std::unique_ptr< OxygenSaturation_type > p);

          //@}

          /**
           * @name Phosphate
           *
           * @brief Accessor and modifier functions for the %Phosphate
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData Phosphate_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Phosphate_type > Phosphate_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Phosphate_type, char > Phosphate_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Phosphate_optional&
          Phosphate () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Phosphate_optional&
          Phosphate ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          Phosphate (const Phosphate_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          Phosphate (const Phosphate_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          Phosphate (::std::unique_ptr< Phosphate_type > p);

          //@}

          /**
           * @name PlasmaVolume
           *
           * @brief Accessor and modifier functions for the %PlasmaVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData PlasmaVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PlasmaVolume_type > PlasmaVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlasmaVolume_type, char > PlasmaVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PlasmaVolume_optional&
          PlasmaVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PlasmaVolume_optional&
          PlasmaVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PlasmaVolume (const PlasmaVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PlasmaVolume (const PlasmaVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PlasmaVolume (::std::unique_ptr< PlasmaVolume_type > p);

          //@}

          /**
           * @name PulseOximetry
           *
           * @brief Accessor and modifier functions for the %PulseOximetry
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData PulseOximetry_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulseOximetry_type > PulseOximetry_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulseOximetry_type, char > PulseOximetry_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulseOximetry_optional&
          PulseOximetry () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulseOximetry_optional&
          PulseOximetry ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulseOximetry (const PulseOximetry_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulseOximetry (const PulseOximetry_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulseOximetry (::std::unique_ptr< PulseOximetry_type > p);

          //@}

          /**
           * @name RedBloodCellCount
           *
           * @brief Accessor and modifier functions for the %RedBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData RedBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCellCount_type > RedBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCellCount_type, char > RedBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCellCount_optional&
          RedBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCellCount_optional&
          RedBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCellCount (const RedBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCellCount (::std::unique_ptr< RedBloodCellCount_type > p);

          //@}

          /**
           * @name ShuntFraction
           *
           * @brief Accessor and modifier functions for the %ShuntFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData ShuntFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ShuntFraction_type > ShuntFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ShuntFraction_type, char > ShuntFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ShuntFraction_optional&
          ShuntFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ShuntFraction_optional&
          ShuntFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ShuntFraction (const ShuntFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ShuntFraction (const ShuntFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ShuntFraction (::std::unique_ptr< ShuntFraction_type > p);

          //@}

          /**
           * @name StrongIonDifference
           *
           * @brief Accessor and modifier functions for the %StrongIonDifference
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData StrongIonDifference_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StrongIonDifference_type > StrongIonDifference_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StrongIonDifference_type, char > StrongIonDifference_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StrongIonDifference_optional&
          StrongIonDifference () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StrongIonDifference_optional&
          StrongIonDifference ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          StrongIonDifference (const StrongIonDifference_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          StrongIonDifference (const StrongIonDifference_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          StrongIonDifference (::std::unique_ptr< StrongIonDifference_type > p);

          //@}

          /**
           * @name TotalProteinConcentration
           *
           * @brief Accessor and modifier functions for the %TotalProteinConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalProteinConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalProteinConcentration_type > TotalProteinConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalProteinConcentration_type, char > TotalProteinConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalProteinConcentration_optional&
          TotalProteinConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalProteinConcentration_optional&
          TotalProteinConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalProteinConcentration (const TotalProteinConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalProteinConcentration (const TotalProteinConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalProteinConcentration (::std::unique_ptr< TotalProteinConcentration_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralLipidInPlasma
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralLipidInPlasma
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralLipidInPlasma_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralLipidInPlasma_type > VolumeFractionNeutralLipidInPlasma_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralLipidInPlasma_type, char > VolumeFractionNeutralLipidInPlasma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralLipidInPlasma_optional&
          VolumeFractionNeutralLipidInPlasma () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralLipidInPlasma_optional&
          VolumeFractionNeutralLipidInPlasma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralLipidInPlasma (const VolumeFractionNeutralLipidInPlasma_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralLipidInPlasma (::std::unique_ptr< VolumeFractionNeutralLipidInPlasma_type > p);

          //@}

          /**
           * @name VolumeFractionNeutralPhospholipidInPlasma
           *
           * @brief Accessor and modifier functions for the %VolumeFractionNeutralPhospholipidInPlasma
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData VolumeFractionNeutralPhospholipidInPlasma_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VolumeFractionNeutralPhospholipidInPlasma_type > VolumeFractionNeutralPhospholipidInPlasma_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VolumeFractionNeutralPhospholipidInPlasma_type, char > VolumeFractionNeutralPhospholipidInPlasma_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VolumeFractionNeutralPhospholipidInPlasma_optional&
          VolumeFractionNeutralPhospholipidInPlasma () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VolumeFractionNeutralPhospholipidInPlasma_optional&
          VolumeFractionNeutralPhospholipidInPlasma ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (const VolumeFractionNeutralPhospholipidInPlasma_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VolumeFractionNeutralPhospholipidInPlasma (::std::unique_ptr< VolumeFractionNeutralPhospholipidInPlasma_type > p);

          //@}

          /**
           * @name WhiteBloodCellCount
           *
           * @brief Accessor and modifier functions for the %WhiteBloodCellCount
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData WhiteBloodCellCount_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< WhiteBloodCellCount_type > WhiteBloodCellCount_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WhiteBloodCellCount_type, char > WhiteBloodCellCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const WhiteBloodCellCount_optional&
          WhiteBloodCellCount () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          WhiteBloodCellCount_optional&
          WhiteBloodCellCount ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          WhiteBloodCellCount (const WhiteBloodCellCount_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          WhiteBloodCellCount (::std::unique_ptr< WhiteBloodCellCount_type > p);

          //@}

          /**
           * @name RedBloodCellAcetylcholinesterase
           *
           * @brief Accessor and modifier functions for the %RedBloodCellAcetylcholinesterase
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarAmountPerVolumeData RedBloodCellAcetylcholinesterase_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< RedBloodCellAcetylcholinesterase_type > RedBloodCellAcetylcholinesterase_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RedBloodCellAcetylcholinesterase_type, char > RedBloodCellAcetylcholinesterase_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const RedBloodCellAcetylcholinesterase_optional&
          RedBloodCellAcetylcholinesterase () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          RedBloodCellAcetylcholinesterase_optional&
          RedBloodCellAcetylcholinesterase ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          RedBloodCellAcetylcholinesterase (const RedBloodCellAcetylcholinesterase_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          RedBloodCellAcetylcholinesterase (::std::unique_ptr< RedBloodCellAcetylcholinesterase_type > p);

          //@}

          /**
           * @name TotalBilirubin
           *
           * @brief Accessor and modifier functions for the %TotalBilirubin
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerVolumeData TotalBilirubin_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalBilirubin_type > TotalBilirubin_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalBilirubin_type, char > TotalBilirubin_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalBilirubin_optional&
          TotalBilirubin () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalBilirubin_optional&
          TotalBilirubin ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalBilirubin (const TotalBilirubin_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalBilirubin (const TotalBilirubin_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalBilirubin (::std::unique_ptr< TotalBilirubin_type > p);

          //@}

          /**
           * @name ArterialCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %ArterialCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ArterialCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialCarbonDioxidePressure_type > ArterialCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialCarbonDioxidePressure_type, char > ArterialCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialCarbonDioxidePressure_optional&
          ArterialCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialCarbonDioxidePressure_optional&
          ArterialCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialCarbonDioxidePressure (const ArterialCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialCarbonDioxidePressure (::std::unique_ptr< ArterialCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name ArterialOxygenPressure
           *
           * @brief Accessor and modifier functions for the %ArterialOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData ArterialOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ArterialOxygenPressure_type > ArterialOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ArterialOxygenPressure_type, char > ArterialOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ArterialOxygenPressure_optional&
          ArterialOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ArterialOxygenPressure_optional&
          ArterialOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ArterialOxygenPressure (const ArterialOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ArterialOxygenPressure (const ArterialOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ArterialOxygenPressure (::std::unique_ptr< ArterialOxygenPressure_type > p);

          //@}

          /**
           * @name PulmonaryArterialCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryArterialCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryArterialCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryArterialCarbonDioxidePressure_type > PulmonaryArterialCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryArterialCarbonDioxidePressure_type, char > PulmonaryArterialCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryArterialCarbonDioxidePressure_optional&
          PulmonaryArterialCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryArterialCarbonDioxidePressure_optional&
          PulmonaryArterialCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (const PulmonaryArterialCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryArterialCarbonDioxidePressure (::std::unique_ptr< PulmonaryArterialCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name PulmonaryArterialOxygenPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryArterialOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryArterialOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryArterialOxygenPressure_type > PulmonaryArterialOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryArterialOxygenPressure_type, char > PulmonaryArterialOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryArterialOxygenPressure_optional&
          PulmonaryArterialOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryArterialOxygenPressure_optional&
          PulmonaryArterialOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryArterialOxygenPressure (const PulmonaryArterialOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryArterialOxygenPressure (::std::unique_ptr< PulmonaryArterialOxygenPressure_type > p);

          //@}

          /**
           * @name PulmonaryVenousCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryVenousCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryVenousCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVenousCarbonDioxidePressure_type > PulmonaryVenousCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVenousCarbonDioxidePressure_type, char > PulmonaryVenousCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVenousCarbonDioxidePressure_optional&
          PulmonaryVenousCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVenousCarbonDioxidePressure_optional&
          PulmonaryVenousCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (const PulmonaryVenousCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVenousCarbonDioxidePressure (::std::unique_ptr< PulmonaryVenousCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name PulmonaryVenousOxygenPressure
           *
           * @brief Accessor and modifier functions for the %PulmonaryVenousOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData PulmonaryVenousOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< PulmonaryVenousOxygenPressure_type > PulmonaryVenousOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PulmonaryVenousOxygenPressure_type, char > PulmonaryVenousOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const PulmonaryVenousOxygenPressure_optional&
          PulmonaryVenousOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          PulmonaryVenousOxygenPressure_optional&
          PulmonaryVenousOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          PulmonaryVenousOxygenPressure (const PulmonaryVenousOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          PulmonaryVenousOxygenPressure (::std::unique_ptr< PulmonaryVenousOxygenPressure_type > p);

          //@}

          /**
           * @name VenousCarbonDioxidePressure
           *
           * @brief Accessor and modifier functions for the %VenousCarbonDioxidePressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VenousCarbonDioxidePressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousCarbonDioxidePressure_type > VenousCarbonDioxidePressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousCarbonDioxidePressure_type, char > VenousCarbonDioxidePressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousCarbonDioxidePressure_optional&
          VenousCarbonDioxidePressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousCarbonDioxidePressure_optional&
          VenousCarbonDioxidePressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousCarbonDioxidePressure (const VenousCarbonDioxidePressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousCarbonDioxidePressure (::std::unique_ptr< VenousCarbonDioxidePressure_type > p);

          //@}

          /**
           * @name VenousOxygenPressure
           *
           * @brief Accessor and modifier functions for the %VenousOxygenPressure
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarPressureData VenousOxygenPressure_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VenousOxygenPressure_type > VenousOxygenPressure_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VenousOxygenPressure_type, char > VenousOxygenPressure_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VenousOxygenPressure_optional&
          VenousOxygenPressure () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VenousOxygenPressure_optional&
          VenousOxygenPressure ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          VenousOxygenPressure (const VenousOxygenPressure_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          VenousOxygenPressure (const VenousOxygenPressure_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          VenousOxygenPressure (::std::unique_ptr< VenousOxygenPressure_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BloodChemistrySystemData ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BloodChemistrySystemData (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistrySystemData (const BloodChemistrySystemData& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BloodChemistrySystemData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BloodChemistrySystemData&
          operator= (const BloodChemistrySystemData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BloodChemistrySystemData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          BloodDensity_optional BloodDensity_;
          BloodPH_optional BloodPH_;
          BloodSpecificHeat_optional BloodSpecificHeat_;
          BloodUreaNitrogenConcentration_optional BloodUreaNitrogenConcentration_;
          CarbonDioxideSaturation_optional CarbonDioxideSaturation_;
          CarbonMonoxideSaturation_optional CarbonMonoxideSaturation_;
          Hematocrit_optional Hematocrit_;
          HemoglobinContent_optional HemoglobinContent_;
          OxygenSaturation_optional OxygenSaturation_;
          Phosphate_optional Phosphate_;
          PlasmaVolume_optional PlasmaVolume_;
          PulseOximetry_optional PulseOximetry_;
          RedBloodCellCount_optional RedBloodCellCount_;
          ShuntFraction_optional ShuntFraction_;
          StrongIonDifference_optional StrongIonDifference_;
          TotalProteinConcentration_optional TotalProteinConcentration_;
          VolumeFractionNeutralLipidInPlasma_optional VolumeFractionNeutralLipidInPlasma_;
          VolumeFractionNeutralPhospholipidInPlasma_optional VolumeFractionNeutralPhospholipidInPlasma_;
          WhiteBloodCellCount_optional WhiteBloodCellCount_;
          RedBloodCellAcetylcholinesterase_optional RedBloodCellAcetylcholinesterase_;
          TotalBilirubin_optional TotalBilirubin_;
          ArterialCarbonDioxidePressure_optional ArterialCarbonDioxidePressure_;
          ArterialOxygenPressure_optional ArterialOxygenPressure_;
          PulmonaryArterialCarbonDioxidePressure_optional PulmonaryArterialCarbonDioxidePressure_;
          PulmonaryArterialOxygenPressure_optional PulmonaryArterialOxygenPressure_;
          PulmonaryVenousCarbonDioxidePressure_optional PulmonaryVenousCarbonDioxidePressure_;
          PulmonaryVenousOxygenPressure_optional PulmonaryVenousOxygenPressure_;
          VenousCarbonDioxidePressure_optional VenousCarbonDioxidePressure_;
          VenousOxygenPressure_optional VenousOxygenPressure_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const BloodChemistrySystemData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const BloodChemistrySystemData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BLOOD_CHEMISTRY_SYSTEM_DATA_HXX

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CardiovascularConfigurationData.hxx"

#include "ScalarFlowElastanceData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CardiovascularConfigurationData
        // 

        const CardiovascularConfigurationData::LeftHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMaximum () const
        {
          return this->LeftHeartElastanceMaximum_;
        }

        CardiovascularConfigurationData::LeftHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMaximum ()
        {
          return this->LeftHeartElastanceMaximum_;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_type& x)
        {
          this->LeftHeartElastanceMaximum_.set (x);
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (const LeftHeartElastanceMaximum_optional& x)
        {
          this->LeftHeartElastanceMaximum_ = x;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMaximum (::std::unique_ptr< LeftHeartElastanceMaximum_type > x)
        {
          this->LeftHeartElastanceMaximum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::LeftHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMinimum () const
        {
          return this->LeftHeartElastanceMinimum_;
        }

        CardiovascularConfigurationData::LeftHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        LeftHeartElastanceMinimum ()
        {
          return this->LeftHeartElastanceMinimum_;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_type& x)
        {
          this->LeftHeartElastanceMinimum_.set (x);
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (const LeftHeartElastanceMinimum_optional& x)
        {
          this->LeftHeartElastanceMinimum_ = x;
        }

        void CardiovascularConfigurationData::
        LeftHeartElastanceMinimum (::std::unique_ptr< LeftHeartElastanceMinimum_type > x)
        {
          this->LeftHeartElastanceMinimum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::MinimumBloodVolumeFraction_optional& CardiovascularConfigurationData::
        MinimumBloodVolumeFraction () const
        {
          return this->MinimumBloodVolumeFraction_;
        }

        CardiovascularConfigurationData::MinimumBloodVolumeFraction_optional& CardiovascularConfigurationData::
        MinimumBloodVolumeFraction ()
        {
          return this->MinimumBloodVolumeFraction_;
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_type& x)
        {
          this->MinimumBloodVolumeFraction_.set (x);
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (const MinimumBloodVolumeFraction_optional& x)
        {
          this->MinimumBloodVolumeFraction_ = x;
        }

        void CardiovascularConfigurationData::
        MinimumBloodVolumeFraction (::std::unique_ptr< MinimumBloodVolumeFraction_type > x)
        {
          this->MinimumBloodVolumeFraction_.set (std::move (x));
        }

        const CardiovascularConfigurationData::RightHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMaximum () const
        {
          return this->RightHeartElastanceMaximum_;
        }

        CardiovascularConfigurationData::RightHeartElastanceMaximum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMaximum ()
        {
          return this->RightHeartElastanceMaximum_;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (const RightHeartElastanceMaximum_type& x)
        {
          this->RightHeartElastanceMaximum_.set (x);
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (const RightHeartElastanceMaximum_optional& x)
        {
          this->RightHeartElastanceMaximum_ = x;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMaximum (::std::unique_ptr< RightHeartElastanceMaximum_type > x)
        {
          this->RightHeartElastanceMaximum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::RightHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMinimum () const
        {
          return this->RightHeartElastanceMinimum_;
        }

        CardiovascularConfigurationData::RightHeartElastanceMinimum_optional& CardiovascularConfigurationData::
        RightHeartElastanceMinimum ()
        {
          return this->RightHeartElastanceMinimum_;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (const RightHeartElastanceMinimum_type& x)
        {
          this->RightHeartElastanceMinimum_.set (x);
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (const RightHeartElastanceMinimum_optional& x)
        {
          this->RightHeartElastanceMinimum_ = x;
        }

        void CardiovascularConfigurationData::
        RightHeartElastanceMinimum (::std::unique_ptr< RightHeartElastanceMinimum_type > x)
        {
          this->RightHeartElastanceMinimum_.set (std::move (x));
        }

        const CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_optional& CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage () const
        {
          return this->StandardPulmonaryCapillaryCoverage_;
        }

        CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_optional& CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage ()
        {
          return this->StandardPulmonaryCapillaryCoverage_;
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_type& x)
        {
          this->StandardPulmonaryCapillaryCoverage_.set (x);
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (const StandardPulmonaryCapillaryCoverage_optional& x)
        {
          this->StandardPulmonaryCapillaryCoverage_ = x;
        }

        void CardiovascularConfigurationData::
        StandardPulmonaryCapillaryCoverage (::std::unique_ptr< StandardPulmonaryCapillaryCoverage_type > x)
        {
          this->StandardPulmonaryCapillaryCoverage_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CardiovascularConfigurationData
        //

        CardiovascularConfigurationData::
        CardiovascularConfigurationData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          LeftHeartElastanceMaximum_ (this),
          LeftHeartElastanceMinimum_ (this),
          MinimumBloodVolumeFraction_ (this),
          RightHeartElastanceMaximum_ (this),
          RightHeartElastanceMinimum_ (this),
          StandardPulmonaryCapillaryCoverage_ (this)
        {
        }

        CardiovascularConfigurationData::
        CardiovascularConfigurationData (const CardiovascularConfigurationData& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          LeftHeartElastanceMaximum_ (x.LeftHeartElastanceMaximum_, f, this),
          LeftHeartElastanceMinimum_ (x.LeftHeartElastanceMinimum_, f, this),
          MinimumBloodVolumeFraction_ (x.MinimumBloodVolumeFraction_, f, this),
          RightHeartElastanceMaximum_ (x.RightHeartElastanceMaximum_, f, this),
          RightHeartElastanceMinimum_ (x.RightHeartElastanceMinimum_, f, this),
          StandardPulmonaryCapillaryCoverage_ (x.StandardPulmonaryCapillaryCoverage_, f, this)
        {
        }

        CardiovascularConfigurationData::
        CardiovascularConfigurationData (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          LeftHeartElastanceMaximum_ (this),
          LeftHeartElastanceMinimum_ (this),
          MinimumBloodVolumeFraction_ (this),
          RightHeartElastanceMaximum_ (this),
          RightHeartElastanceMinimum_ (this),
          StandardPulmonaryCapillaryCoverage_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CardiovascularConfigurationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LeftHeartElastanceMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftHeartElastanceMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftHeartElastanceMaximum_)
                {
                  ::std::unique_ptr< LeftHeartElastanceMaximum_type > r (
                    dynamic_cast< LeftHeartElastanceMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftHeartElastanceMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftHeartElastanceMinimum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftHeartElastanceMinimum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftHeartElastanceMinimum_)
                {
                  ::std::unique_ptr< LeftHeartElastanceMinimum_type > r (
                    dynamic_cast< LeftHeartElastanceMinimum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftHeartElastanceMinimum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MinimumBloodVolumeFraction
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MinimumBloodVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MinimumBloodVolumeFraction_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MinimumBloodVolumeFraction_)
                {
                  ::std::unique_ptr< MinimumBloodVolumeFraction_type > r (
                    dynamic_cast< MinimumBloodVolumeFraction_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MinimumBloodVolumeFraction_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightHeartElastanceMaximum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightHeartElastanceMaximum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightHeartElastanceMaximum_)
                {
                  ::std::unique_ptr< RightHeartElastanceMaximum_type > r (
                    dynamic_cast< RightHeartElastanceMaximum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightHeartElastanceMaximum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightHeartElastanceMinimum
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightHeartElastanceMinimum_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightHeartElastanceMinimum_)
                {
                  ::std::unique_ptr< RightHeartElastanceMinimum_type > r (
                    dynamic_cast< RightHeartElastanceMinimum_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightHeartElastanceMinimum_.set (::std::move (r));
                  continue;
                }
              }
            }

            // StandardPulmonaryCapillaryCoverage
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "StandardPulmonaryCapillaryCoverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< StandardPulmonaryCapillaryCoverage_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->StandardPulmonaryCapillaryCoverage_)
                {
                  ::std::unique_ptr< StandardPulmonaryCapillaryCoverage_type > r (
                    dynamic_cast< StandardPulmonaryCapillaryCoverage_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->StandardPulmonaryCapillaryCoverage_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        CardiovascularConfigurationData* CardiovascularConfigurationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CardiovascularConfigurationData (*this, f, c);
        }

        CardiovascularConfigurationData& CardiovascularConfigurationData::
        operator= (const CardiovascularConfigurationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->LeftHeartElastanceMaximum_ = x.LeftHeartElastanceMaximum_;
            this->LeftHeartElastanceMinimum_ = x.LeftHeartElastanceMinimum_;
            this->MinimumBloodVolumeFraction_ = x.MinimumBloodVolumeFraction_;
            this->RightHeartElastanceMaximum_ = x.RightHeartElastanceMaximum_;
            this->RightHeartElastanceMinimum_ = x.RightHeartElastanceMinimum_;
            this->StandardPulmonaryCapillaryCoverage_ = x.StandardPulmonaryCapillaryCoverage_;
          }

          return *this;
        }

        CardiovascularConfigurationData::
        ~CardiovascularConfigurationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_type_factory_init (
          "CardiovascularConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CardiovascularConfigurationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMaximum ())
            {
              o << ::std::endl << "LeftHeartElastanceMaximum: ";
              om.insert (o, *i.LeftHeartElastanceMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMinimum ())
            {
              o << ::std::endl << "LeftHeartElastanceMinimum: ";
              om.insert (o, *i.LeftHeartElastanceMinimum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MinimumBloodVolumeFraction ())
            {
              o << ::std::endl << "MinimumBloodVolumeFraction: ";
              om.insert (o, *i.MinimumBloodVolumeFraction ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightHeartElastanceMaximum ())
            {
              o << ::std::endl << "RightHeartElastanceMaximum: ";
              om.insert (o, *i.RightHeartElastanceMaximum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightHeartElastanceMinimum ())
            {
              o << ::std::endl << "RightHeartElastanceMinimum: ";
              om.insert (o, *i.RightHeartElastanceMinimum ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.StandardPulmonaryCapillaryCoverage ())
            {
              o << ::std::endl << "StandardPulmonaryCapillaryCoverage: ";
              om.insert (o, *i.StandardPulmonaryCapillaryCoverage ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CardiovascularConfigurationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // LeftHeartElastanceMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMaximum ())
            {
              const CardiovascularConfigurationData::LeftHeartElastanceMaximum_type& x (*i.LeftHeartElastanceMaximum ());
              if (typeid (CardiovascularConfigurationData::LeftHeartElastanceMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftHeartElastanceMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftHeartElastanceMinimum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftHeartElastanceMinimum ())
            {
              const CardiovascularConfigurationData::LeftHeartElastanceMinimum_type& x (*i.LeftHeartElastanceMinimum ());
              if (typeid (CardiovascularConfigurationData::LeftHeartElastanceMinimum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftHeartElastanceMinimum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MinimumBloodVolumeFraction
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MinimumBloodVolumeFraction ())
            {
              const CardiovascularConfigurationData::MinimumBloodVolumeFraction_type& x (*i.MinimumBloodVolumeFraction ());
              if (typeid (CardiovascularConfigurationData::MinimumBloodVolumeFraction_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MinimumBloodVolumeFraction",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MinimumBloodVolumeFraction",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightHeartElastanceMaximum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightHeartElastanceMaximum ())
            {
              const CardiovascularConfigurationData::RightHeartElastanceMaximum_type& x (*i.RightHeartElastanceMaximum ());
              if (typeid (CardiovascularConfigurationData::RightHeartElastanceMaximum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightHeartElastanceMaximum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightHeartElastanceMaximum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightHeartElastanceMinimum
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightHeartElastanceMinimum ())
            {
              const CardiovascularConfigurationData::RightHeartElastanceMinimum_type& x (*i.RightHeartElastanceMinimum ());
              if (typeid (CardiovascularConfigurationData::RightHeartElastanceMinimum_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightHeartElastanceMinimum",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightHeartElastanceMinimum",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // StandardPulmonaryCapillaryCoverage
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.StandardPulmonaryCapillaryCoverage ())
            {
              const CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_type& x (*i.StandardPulmonaryCapillaryCoverage ());
              if (typeid (CardiovascularConfigurationData::StandardPulmonaryCapillaryCoverage_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "StandardPulmonaryCapillaryCoverage",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "StandardPulmonaryCapillaryCoverage",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CardiovascularConfigurationData >
        _xsd_CardiovascularConfigurationData_type_serializer_init (
          "CardiovascularConfigurationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


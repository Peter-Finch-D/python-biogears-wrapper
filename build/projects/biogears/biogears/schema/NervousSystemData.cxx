// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "NervousSystemData.hxx"

#include "ScalarData.hxx"

#include "PupillaryResponseData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // NervousSystemData
        // 

        const NervousSystemData::BaroreceptorHeartRateScale_optional& NervousSystemData::
        BaroreceptorHeartRateScale () const
        {
          return this->BaroreceptorHeartRateScale_;
        }

        NervousSystemData::BaroreceptorHeartRateScale_optional& NervousSystemData::
        BaroreceptorHeartRateScale ()
        {
          return this->BaroreceptorHeartRateScale_;
        }

        void NervousSystemData::
        BaroreceptorHeartRateScale (const BaroreceptorHeartRateScale_type& x)
        {
          this->BaroreceptorHeartRateScale_.set (x);
        }

        void NervousSystemData::
        BaroreceptorHeartRateScale (const BaroreceptorHeartRateScale_optional& x)
        {
          this->BaroreceptorHeartRateScale_ = x;
        }

        void NervousSystemData::
        BaroreceptorHeartRateScale (::std::unique_ptr< BaroreceptorHeartRateScale_type > x)
        {
          this->BaroreceptorHeartRateScale_.set (std::move (x));
        }

        const NervousSystemData::BaroreceptorHeartElastanceScale_optional& NervousSystemData::
        BaroreceptorHeartElastanceScale () const
        {
          return this->BaroreceptorHeartElastanceScale_;
        }

        NervousSystemData::BaroreceptorHeartElastanceScale_optional& NervousSystemData::
        BaroreceptorHeartElastanceScale ()
        {
          return this->BaroreceptorHeartElastanceScale_;
        }

        void NervousSystemData::
        BaroreceptorHeartElastanceScale (const BaroreceptorHeartElastanceScale_type& x)
        {
          this->BaroreceptorHeartElastanceScale_.set (x);
        }

        void NervousSystemData::
        BaroreceptorHeartElastanceScale (const BaroreceptorHeartElastanceScale_optional& x)
        {
          this->BaroreceptorHeartElastanceScale_ = x;
        }

        void NervousSystemData::
        BaroreceptorHeartElastanceScale (::std::unique_ptr< BaroreceptorHeartElastanceScale_type > x)
        {
          this->BaroreceptorHeartElastanceScale_.set (std::move (x));
        }

        const NervousSystemData::BaroreceptorResistanceScale_optional& NervousSystemData::
        BaroreceptorResistanceScale () const
        {
          return this->BaroreceptorResistanceScale_;
        }

        NervousSystemData::BaroreceptorResistanceScale_optional& NervousSystemData::
        BaroreceptorResistanceScale ()
        {
          return this->BaroreceptorResistanceScale_;
        }

        void NervousSystemData::
        BaroreceptorResistanceScale (const BaroreceptorResistanceScale_type& x)
        {
          this->BaroreceptorResistanceScale_.set (x);
        }

        void NervousSystemData::
        BaroreceptorResistanceScale (const BaroreceptorResistanceScale_optional& x)
        {
          this->BaroreceptorResistanceScale_ = x;
        }

        void NervousSystemData::
        BaroreceptorResistanceScale (::std::unique_ptr< BaroreceptorResistanceScale_type > x)
        {
          this->BaroreceptorResistanceScale_.set (std::move (x));
        }

        const NervousSystemData::BaroreceptorComplianceScale_optional& NervousSystemData::
        BaroreceptorComplianceScale () const
        {
          return this->BaroreceptorComplianceScale_;
        }

        NervousSystemData::BaroreceptorComplianceScale_optional& NervousSystemData::
        BaroreceptorComplianceScale ()
        {
          return this->BaroreceptorComplianceScale_;
        }

        void NervousSystemData::
        BaroreceptorComplianceScale (const BaroreceptorComplianceScale_type& x)
        {
          this->BaroreceptorComplianceScale_.set (x);
        }

        void NervousSystemData::
        BaroreceptorComplianceScale (const BaroreceptorComplianceScale_optional& x)
        {
          this->BaroreceptorComplianceScale_ = x;
        }

        void NervousSystemData::
        BaroreceptorComplianceScale (::std::unique_ptr< BaroreceptorComplianceScale_type > x)
        {
          this->BaroreceptorComplianceScale_.set (std::move (x));
        }

        const NervousSystemData::LeftEyePupillaryResponse_optional& NervousSystemData::
        LeftEyePupillaryResponse () const
        {
          return this->LeftEyePupillaryResponse_;
        }

        NervousSystemData::LeftEyePupillaryResponse_optional& NervousSystemData::
        LeftEyePupillaryResponse ()
        {
          return this->LeftEyePupillaryResponse_;
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (const LeftEyePupillaryResponse_type& x)
        {
          this->LeftEyePupillaryResponse_.set (x);
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (const LeftEyePupillaryResponse_optional& x)
        {
          this->LeftEyePupillaryResponse_ = x;
        }

        void NervousSystemData::
        LeftEyePupillaryResponse (::std::unique_ptr< LeftEyePupillaryResponse_type > x)
        {
          this->LeftEyePupillaryResponse_.set (std::move (x));
        }

        const NervousSystemData::RightEyePupillaryResponse_optional& NervousSystemData::
        RightEyePupillaryResponse () const
        {
          return this->RightEyePupillaryResponse_;
        }

        NervousSystemData::RightEyePupillaryResponse_optional& NervousSystemData::
        RightEyePupillaryResponse ()
        {
          return this->RightEyePupillaryResponse_;
        }

        void NervousSystemData::
        RightEyePupillaryResponse (const RightEyePupillaryResponse_type& x)
        {
          this->RightEyePupillaryResponse_.set (x);
        }

        void NervousSystemData::
        RightEyePupillaryResponse (const RightEyePupillaryResponse_optional& x)
        {
          this->RightEyePupillaryResponse_ = x;
        }

        void NervousSystemData::
        RightEyePupillaryResponse (::std::unique_ptr< RightEyePupillaryResponse_type > x)
        {
          this->RightEyePupillaryResponse_.set (std::move (x));
        }

        const NervousSystemData::ChemoreceptorHeartRateScale_optional& NervousSystemData::
        ChemoreceptorHeartRateScale () const
        {
          return this->ChemoreceptorHeartRateScale_;
        }

        NervousSystemData::ChemoreceptorHeartRateScale_optional& NervousSystemData::
        ChemoreceptorHeartRateScale ()
        {
          return this->ChemoreceptorHeartRateScale_;
        }

        void NervousSystemData::
        ChemoreceptorHeartRateScale (const ChemoreceptorHeartRateScale_type& x)
        {
          this->ChemoreceptorHeartRateScale_.set (x);
        }

        void NervousSystemData::
        ChemoreceptorHeartRateScale (const ChemoreceptorHeartRateScale_optional& x)
        {
          this->ChemoreceptorHeartRateScale_ = x;
        }

        void NervousSystemData::
        ChemoreceptorHeartRateScale (::std::unique_ptr< ChemoreceptorHeartRateScale_type > x)
        {
          this->ChemoreceptorHeartRateScale_.set (std::move (x));
        }

        const NervousSystemData::ChemoreceptorHeartElastanceScale_optional& NervousSystemData::
        ChemoreceptorHeartElastanceScale () const
        {
          return this->ChemoreceptorHeartElastanceScale_;
        }

        NervousSystemData::ChemoreceptorHeartElastanceScale_optional& NervousSystemData::
        ChemoreceptorHeartElastanceScale ()
        {
          return this->ChemoreceptorHeartElastanceScale_;
        }

        void NervousSystemData::
        ChemoreceptorHeartElastanceScale (const ChemoreceptorHeartElastanceScale_type& x)
        {
          this->ChemoreceptorHeartElastanceScale_.set (x);
        }

        void NervousSystemData::
        ChemoreceptorHeartElastanceScale (const ChemoreceptorHeartElastanceScale_optional& x)
        {
          this->ChemoreceptorHeartElastanceScale_ = x;
        }

        void NervousSystemData::
        ChemoreceptorHeartElastanceScale (::std::unique_ptr< ChemoreceptorHeartElastanceScale_type > x)
        {
          this->ChemoreceptorHeartElastanceScale_.set (std::move (x));
        }

        const NervousSystemData::PainVisualAnalogueScale_optional& NervousSystemData::
        PainVisualAnalogueScale () const
        {
          return this->PainVisualAnalogueScale_;
        }

        NervousSystemData::PainVisualAnalogueScale_optional& NervousSystemData::
        PainVisualAnalogueScale ()
        {
          return this->PainVisualAnalogueScale_;
        }

        void NervousSystemData::
        PainVisualAnalogueScale (const PainVisualAnalogueScale_type& x)
        {
          this->PainVisualAnalogueScale_.set (x);
        }

        void NervousSystemData::
        PainVisualAnalogueScale (const PainVisualAnalogueScale_optional& x)
        {
          this->PainVisualAnalogueScale_ = x;
        }

        void NervousSystemData::
        PainVisualAnalogueScale (::std::unique_ptr< PainVisualAnalogueScale_type > x)
        {
          this->PainVisualAnalogueScale_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // NervousSystemData
        //

        NervousSystemData::
        NervousSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          BaroreceptorHeartRateScale_ (this),
          BaroreceptorHeartElastanceScale_ (this),
          BaroreceptorResistanceScale_ (this),
          BaroreceptorComplianceScale_ (this),
          LeftEyePupillaryResponse_ (this),
          RightEyePupillaryResponse_ (this),
          ChemoreceptorHeartRateScale_ (this),
          ChemoreceptorHeartElastanceScale_ (this),
          PainVisualAnalogueScale_ (this)
        {
        }

        NervousSystemData::
        NervousSystemData (const NervousSystemData& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          BaroreceptorHeartRateScale_ (x.BaroreceptorHeartRateScale_, f, this),
          BaroreceptorHeartElastanceScale_ (x.BaroreceptorHeartElastanceScale_, f, this),
          BaroreceptorResistanceScale_ (x.BaroreceptorResistanceScale_, f, this),
          BaroreceptorComplianceScale_ (x.BaroreceptorComplianceScale_, f, this),
          LeftEyePupillaryResponse_ (x.LeftEyePupillaryResponse_, f, this),
          RightEyePupillaryResponse_ (x.RightEyePupillaryResponse_, f, this),
          ChemoreceptorHeartRateScale_ (x.ChemoreceptorHeartRateScale_, f, this),
          ChemoreceptorHeartElastanceScale_ (x.ChemoreceptorHeartElastanceScale_, f, this),
          PainVisualAnalogueScale_ (x.PainVisualAnalogueScale_, f, this)
        {
        }

        NervousSystemData::
        NervousSystemData (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          BaroreceptorHeartRateScale_ (this),
          BaroreceptorHeartElastanceScale_ (this),
          BaroreceptorResistanceScale_ (this),
          BaroreceptorComplianceScale_ (this),
          LeftEyePupillaryResponse_ (this),
          RightEyePupillaryResponse_ (this),
          ChemoreceptorHeartRateScale_ (this),
          ChemoreceptorHeartElastanceScale_ (this),
          PainVisualAnalogueScale_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void NervousSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BaroreceptorHeartRateScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BaroreceptorHeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BaroreceptorHeartRateScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BaroreceptorHeartRateScale_)
                {
                  ::std::unique_ptr< BaroreceptorHeartRateScale_type > r (
                    dynamic_cast< BaroreceptorHeartRateScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BaroreceptorHeartRateScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BaroreceptorHeartElastanceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BaroreceptorHeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BaroreceptorHeartElastanceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BaroreceptorHeartElastanceScale_)
                {
                  ::std::unique_ptr< BaroreceptorHeartElastanceScale_type > r (
                    dynamic_cast< BaroreceptorHeartElastanceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BaroreceptorHeartElastanceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BaroreceptorResistanceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BaroreceptorResistanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BaroreceptorResistanceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BaroreceptorResistanceScale_)
                {
                  ::std::unique_ptr< BaroreceptorResistanceScale_type > r (
                    dynamic_cast< BaroreceptorResistanceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BaroreceptorResistanceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // BaroreceptorComplianceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BaroreceptorComplianceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BaroreceptorComplianceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BaroreceptorComplianceScale_)
                {
                  ::std::unique_ptr< BaroreceptorComplianceScale_type > r (
                    dynamic_cast< BaroreceptorComplianceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BaroreceptorComplianceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LeftEyePupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LeftEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LeftEyePupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LeftEyePupillaryResponse_)
                {
                  ::std::unique_ptr< LeftEyePupillaryResponse_type > r (
                    dynamic_cast< LeftEyePupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LeftEyePupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RightEyePupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RightEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RightEyePupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RightEyePupillaryResponse_)
                {
                  ::std::unique_ptr< RightEyePupillaryResponse_type > r (
                    dynamic_cast< RightEyePupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RightEyePupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChemoreceptorHeartRateScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChemoreceptorHeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChemoreceptorHeartRateScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChemoreceptorHeartRateScale_)
                {
                  ::std::unique_ptr< ChemoreceptorHeartRateScale_type > r (
                    dynamic_cast< ChemoreceptorHeartRateScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChemoreceptorHeartRateScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChemoreceptorHeartElastanceScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChemoreceptorHeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChemoreceptorHeartElastanceScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChemoreceptorHeartElastanceScale_)
                {
                  ::std::unique_ptr< ChemoreceptorHeartElastanceScale_type > r (
                    dynamic_cast< ChemoreceptorHeartElastanceScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChemoreceptorHeartElastanceScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PainVisualAnalogueScale
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PainVisualAnalogueScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PainVisualAnalogueScale_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PainVisualAnalogueScale_)
                {
                  ::std::unique_ptr< PainVisualAnalogueScale_type > r (
                    dynamic_cast< PainVisualAnalogueScale_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PainVisualAnalogueScale_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        NervousSystemData* NervousSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class NervousSystemData (*this, f, c);
        }

        NervousSystemData& NervousSystemData::
        operator= (const NervousSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->BaroreceptorHeartRateScale_ = x.BaroreceptorHeartRateScale_;
            this->BaroreceptorHeartElastanceScale_ = x.BaroreceptorHeartElastanceScale_;
            this->BaroreceptorResistanceScale_ = x.BaroreceptorResistanceScale_;
            this->BaroreceptorComplianceScale_ = x.BaroreceptorComplianceScale_;
            this->LeftEyePupillaryResponse_ = x.LeftEyePupillaryResponse_;
            this->RightEyePupillaryResponse_ = x.RightEyePupillaryResponse_;
            this->ChemoreceptorHeartRateScale_ = x.ChemoreceptorHeartRateScale_;
            this->ChemoreceptorHeartElastanceScale_ = x.ChemoreceptorHeartElastanceScale_;
            this->PainVisualAnalogueScale_ = x.PainVisualAnalogueScale_;
          }

          return *this;
        }

        NervousSystemData::
        ~NervousSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_type_factory_init (
          "NervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const NervousSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BaroreceptorHeartRateScale ())
            {
              o << ::std::endl << "BaroreceptorHeartRateScale: ";
              om.insert (o, *i.BaroreceptorHeartRateScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BaroreceptorHeartElastanceScale ())
            {
              o << ::std::endl << "BaroreceptorHeartElastanceScale: ";
              om.insert (o, *i.BaroreceptorHeartElastanceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BaroreceptorResistanceScale ())
            {
              o << ::std::endl << "BaroreceptorResistanceScale: ";
              om.insert (o, *i.BaroreceptorResistanceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BaroreceptorComplianceScale ())
            {
              o << ::std::endl << "BaroreceptorComplianceScale: ";
              om.insert (o, *i.BaroreceptorComplianceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LeftEyePupillaryResponse ())
            {
              o << ::std::endl << "LeftEyePupillaryResponse: ";
              om.insert (o, *i.LeftEyePupillaryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RightEyePupillaryResponse ())
            {
              o << ::std::endl << "RightEyePupillaryResponse: ";
              om.insert (o, *i.RightEyePupillaryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChemoreceptorHeartRateScale ())
            {
              o << ::std::endl << "ChemoreceptorHeartRateScale: ";
              om.insert (o, *i.ChemoreceptorHeartRateScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChemoreceptorHeartElastanceScale ())
            {
              o << ::std::endl << "ChemoreceptorHeartElastanceScale: ";
              om.insert (o, *i.ChemoreceptorHeartElastanceScale ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PainVisualAnalogueScale ())
            {
              o << ::std::endl << "PainVisualAnalogueScale: ";
              om.insert (o, *i.PainVisualAnalogueScale ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const NervousSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // BaroreceptorHeartRateScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BaroreceptorHeartRateScale ())
            {
              const NervousSystemData::BaroreceptorHeartRateScale_type& x (*i.BaroreceptorHeartRateScale ());
              if (typeid (NervousSystemData::BaroreceptorHeartRateScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BaroreceptorHeartRateScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BaroreceptorHeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BaroreceptorHeartElastanceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BaroreceptorHeartElastanceScale ())
            {
              const NervousSystemData::BaroreceptorHeartElastanceScale_type& x (*i.BaroreceptorHeartElastanceScale ());
              if (typeid (NervousSystemData::BaroreceptorHeartElastanceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BaroreceptorHeartElastanceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BaroreceptorHeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BaroreceptorResistanceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BaroreceptorResistanceScale ())
            {
              const NervousSystemData::BaroreceptorResistanceScale_type& x (*i.BaroreceptorResistanceScale ());
              if (typeid (NervousSystemData::BaroreceptorResistanceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BaroreceptorResistanceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BaroreceptorResistanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // BaroreceptorComplianceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BaroreceptorComplianceScale ())
            {
              const NervousSystemData::BaroreceptorComplianceScale_type& x (*i.BaroreceptorComplianceScale ());
              if (typeid (NervousSystemData::BaroreceptorComplianceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BaroreceptorComplianceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BaroreceptorComplianceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LeftEyePupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LeftEyePupillaryResponse ())
            {
              const NervousSystemData::LeftEyePupillaryResponse_type& x (*i.LeftEyePupillaryResponse ());
              if (typeid (NervousSystemData::LeftEyePupillaryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LeftEyePupillaryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LeftEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RightEyePupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RightEyePupillaryResponse ())
            {
              const NervousSystemData::RightEyePupillaryResponse_type& x (*i.RightEyePupillaryResponse ());
              if (typeid (NervousSystemData::RightEyePupillaryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RightEyePupillaryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RightEyePupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChemoreceptorHeartRateScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChemoreceptorHeartRateScale ())
            {
              const NervousSystemData::ChemoreceptorHeartRateScale_type& x (*i.ChemoreceptorHeartRateScale ());
              if (typeid (NervousSystemData::ChemoreceptorHeartRateScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChemoreceptorHeartRateScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChemoreceptorHeartRateScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChemoreceptorHeartElastanceScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChemoreceptorHeartElastanceScale ())
            {
              const NervousSystemData::ChemoreceptorHeartElastanceScale_type& x (*i.ChemoreceptorHeartElastanceScale ());
              if (typeid (NervousSystemData::ChemoreceptorHeartElastanceScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChemoreceptorHeartElastanceScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChemoreceptorHeartElastanceScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PainVisualAnalogueScale
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PainVisualAnalogueScale ())
            {
              const NervousSystemData::PainVisualAnalogueScale_type& x (*i.PainVisualAnalogueScale ());
              if (typeid (NervousSystemData::PainVisualAnalogueScale_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PainVisualAnalogueScale",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PainVisualAnalogueScale",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NervousSystemData >
        _xsd_NervousSystemData_type_serializer_init (
          "NervousSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PhysiologyEngineDynamicStabilizationData.hxx"

#include "PhysiologyEngineDynamicStabilizationCriteriaData.hxx"

#include "PhysiologyEngineDynamicConditionStabilizationData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineDynamicStabilizationData
        // 

        const PhysiologyEngineDynamicStabilizationData::RestingStabilizationCriteria_type& PhysiologyEngineDynamicStabilizationData::
        RestingStabilizationCriteria () const
        {
          return this->RestingStabilizationCriteria_.get ();
        }

        PhysiologyEngineDynamicStabilizationData::RestingStabilizationCriteria_type& PhysiologyEngineDynamicStabilizationData::
        RestingStabilizationCriteria ()
        {
          return this->RestingStabilizationCriteria_.get ();
        }

        void PhysiologyEngineDynamicStabilizationData::
        RestingStabilizationCriteria (const RestingStabilizationCriteria_type& x)
        {
          this->RestingStabilizationCriteria_.set (x);
        }

        void PhysiologyEngineDynamicStabilizationData::
        RestingStabilizationCriteria (::std::unique_ptr< RestingStabilizationCriteria_type > x)
        {
          this->RestingStabilizationCriteria_.set (std::move (x));
        }

        const PhysiologyEngineDynamicStabilizationData::FeedbackStabilizationCriteria_optional& PhysiologyEngineDynamicStabilizationData::
        FeedbackStabilizationCriteria () const
        {
          return this->FeedbackStabilizationCriteria_;
        }

        PhysiologyEngineDynamicStabilizationData::FeedbackStabilizationCriteria_optional& PhysiologyEngineDynamicStabilizationData::
        FeedbackStabilizationCriteria ()
        {
          return this->FeedbackStabilizationCriteria_;
        }

        void PhysiologyEngineDynamicStabilizationData::
        FeedbackStabilizationCriteria (const FeedbackStabilizationCriteria_type& x)
        {
          this->FeedbackStabilizationCriteria_.set (x);
        }

        void PhysiologyEngineDynamicStabilizationData::
        FeedbackStabilizationCriteria (const FeedbackStabilizationCriteria_optional& x)
        {
          this->FeedbackStabilizationCriteria_ = x;
        }

        void PhysiologyEngineDynamicStabilizationData::
        FeedbackStabilizationCriteria (::std::unique_ptr< FeedbackStabilizationCriteria_type > x)
        {
          this->FeedbackStabilizationCriteria_.set (std::move (x));
        }

        const PhysiologyEngineDynamicStabilizationData::ConditionStabilization_sequence& PhysiologyEngineDynamicStabilizationData::
        ConditionStabilization () const
        {
          return this->ConditionStabilization_;
        }

        PhysiologyEngineDynamicStabilizationData::ConditionStabilization_sequence& PhysiologyEngineDynamicStabilizationData::
        ConditionStabilization ()
        {
          return this->ConditionStabilization_;
        }

        void PhysiologyEngineDynamicStabilizationData::
        ConditionStabilization (const ConditionStabilization_sequence& s)
        {
          this->ConditionStabilization_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // PhysiologyEngineDynamicStabilizationData
        //

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData ()
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (),
          RestingStabilizationCriteria_ (this),
          FeedbackStabilizationCriteria_ (this),
          ConditionStabilization_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData (const TrackingStabilization_type& TrackingStabilization,
                                                  const RestingStabilizationCriteria_type& RestingStabilizationCriteria)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (TrackingStabilization),
          RestingStabilizationCriteria_ (RestingStabilizationCriteria, this),
          FeedbackStabilizationCriteria_ (this),
          ConditionStabilization_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData (const TrackingStabilization_type& TrackingStabilization,
                                                  ::std::unique_ptr< RestingStabilizationCriteria_type > RestingStabilizationCriteria)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (TrackingStabilization),
          RestingStabilizationCriteria_ (std::move (RestingStabilizationCriteria), this),
          FeedbackStabilizationCriteria_ (this),
          ConditionStabilization_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData (::std::unique_ptr< TrackingStabilization_type > TrackingStabilization,
                                                  ::std::unique_ptr< RestingStabilizationCriteria_type > RestingStabilizationCriteria)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (std::move (TrackingStabilization)),
          RestingStabilizationCriteria_ (std::move (RestingStabilizationCriteria), this),
          FeedbackStabilizationCriteria_ (this),
          ConditionStabilization_ (this)
        {
        }

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData (const PhysiologyEngineDynamicStabilizationData& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (x, f, c),
          RestingStabilizationCriteria_ (x.RestingStabilizationCriteria_, f, this),
          FeedbackStabilizationCriteria_ (x.FeedbackStabilizationCriteria_, f, this),
          ConditionStabilization_ (x.ConditionStabilization_, f, this)
        {
        }

        PhysiologyEngineDynamicStabilizationData::
        PhysiologyEngineDynamicStabilizationData (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData (e, f | ::xml_schema::flags::base, c),
          RestingStabilizationCriteria_ (this),
          FeedbackStabilizationCriteria_ (this),
          ConditionStabilization_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void PhysiologyEngineDynamicStabilizationData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RestingStabilizationCriteria
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RestingStabilizationCriteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RestingStabilizationCriteria_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!RestingStabilizationCriteria_.present ())
                {
                  ::std::unique_ptr< RestingStabilizationCriteria_type > r (
                    dynamic_cast< RestingStabilizationCriteria_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RestingStabilizationCriteria_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FeedbackStabilizationCriteria
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FeedbackStabilizationCriteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FeedbackStabilizationCriteria_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FeedbackStabilizationCriteria_)
                {
                  ::std::unique_ptr< FeedbackStabilizationCriteria_type > r (
                    dynamic_cast< FeedbackStabilizationCriteria_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FeedbackStabilizationCriteria_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConditionStabilization
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConditionStabilization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConditionStabilization_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ConditionStabilization_type > r (
                  dynamic_cast< ConditionStabilization_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ConditionStabilization_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }

          if (!RestingStabilizationCriteria_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RestingStabilizationCriteria",
              "uri:/mil/tatrc/physiology/datamodel");
          }
        }

        PhysiologyEngineDynamicStabilizationData* PhysiologyEngineDynamicStabilizationData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class PhysiologyEngineDynamicStabilizationData (*this, f, c);
        }

        PhysiologyEngineDynamicStabilizationData& PhysiologyEngineDynamicStabilizationData::
        operator= (const PhysiologyEngineDynamicStabilizationData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData& > (*this) = x;
            this->RestingStabilizationCriteria_ = x.RestingStabilizationCriteria_;
            this->FeedbackStabilizationCriteria_ = x.FeedbackStabilizationCriteria_;
            this->ConditionStabilization_ = x.ConditionStabilization_;
          }

          return *this;
        }

        PhysiologyEngineDynamicStabilizationData::
        ~PhysiologyEngineDynamicStabilizationData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, PhysiologyEngineDynamicStabilizationData >
        _xsd_PhysiologyEngineDynamicStabilizationData_type_factory_init (
          "PhysiologyEngineDynamicStabilizationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const PhysiologyEngineDynamicStabilizationData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            o << ::std::endl << "RestingStabilizationCriteria: ";
            om.insert (o, i.RestingStabilizationCriteria ());
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FeedbackStabilizationCriteria ())
            {
              o << ::std::endl << "FeedbackStabilizationCriteria: ";
              om.insert (o, *i.FeedbackStabilizationCriteria ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (PhysiologyEngineDynamicStabilizationData::ConditionStabilization_const_iterator
                 b (i.ConditionStabilization ().begin ()), e (i.ConditionStabilization ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ConditionStabilization: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PhysiologyEngineDynamicStabilizationData >
        _xsd_PhysiologyEngineDynamicStabilizationData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const PhysiologyEngineDynamicStabilizationData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::PhysiologyEngineStabilizationData& > (i);

          // RestingStabilizationCriteria
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            const PhysiologyEngineDynamicStabilizationData::RestingStabilizationCriteria_type& x (i.RestingStabilizationCriteria ());
            if (typeid (PhysiologyEngineDynamicStabilizationData::RestingStabilizationCriteria_type) == typeid (x))
            {
              ::xercesc::DOMElement& s (
                ::xsd::cxx::xml::dom::create_element (
                  "RestingStabilizationCriteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  e));

              s << x;
            }
            else
              tsm.serialize (
                "RestingStabilizationCriteria",
                "uri:/mil/tatrc/physiology/datamodel",
                false, true, e, x);
          }

          // FeedbackStabilizationCriteria
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FeedbackStabilizationCriteria ())
            {
              const PhysiologyEngineDynamicStabilizationData::FeedbackStabilizationCriteria_type& x (*i.FeedbackStabilizationCriteria ());
              if (typeid (PhysiologyEngineDynamicStabilizationData::FeedbackStabilizationCriteria_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FeedbackStabilizationCriteria",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FeedbackStabilizationCriteria",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConditionStabilization
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (PhysiologyEngineDynamicStabilizationData::ConditionStabilization_const_iterator
                 b (i.ConditionStabilization ().begin ()), n (i.ConditionStabilization ().end ());
                 b != n; ++b)
            {
              if (typeid (PhysiologyEngineDynamicStabilizationData::ConditionStabilization_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConditionStabilization",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ConditionStabilization",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PhysiologyEngineDynamicStabilizationData >
        _xsd_PhysiologyEngineDynamicStabilizationData_type_serializer_init (
          "PhysiologyEngineDynamicStabilizationData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


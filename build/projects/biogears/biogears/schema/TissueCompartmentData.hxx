// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from TissueCompartmentData.xsd.
 */

#ifndef TISSUE_COMPARTMENT_DATA_HXX
#define TISSUE_COMPARTMENT_DATA_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "data-model-schema.hxx"

// Forward declarations.
//
namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class TissueCompartmentData;
      }
    }
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "CompartmentData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassPerMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarVolumeData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarElectricPotentialData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarFractionData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class Scalar0To1Data;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        class ScalarMassData;
      }
    }
  }
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      /**
       * @brief C++ namespace for the %uri:/mil/tatrc/physiology/datamodel
       * schema namespace.
       */
      namespace datamodel
      {
        /**
         * @brief Class corresponding to the %TissueCompartmentData schema type.
         *
         * @nosubgrouping
         */
        class BIOGEARS_CDM_API TissueCompartmentData: public ::mil::tatrc::physiology::datamodel::CompartmentData
        {
          public:
          /**
           * @name AcidicPhospohlipidConcentration
           *
           * @brief Accessor and modifier functions for the %AcidicPhospohlipidConcentration
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassPerMassData AcidicPhospohlipidConcentration_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AcidicPhospohlipidConcentration_type > AcidicPhospohlipidConcentration_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AcidicPhospohlipidConcentration_type, char > AcidicPhospohlipidConcentration_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AcidicPhospohlipidConcentration_optional&
          AcidicPhospohlipidConcentration () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AcidicPhospohlipidConcentration_optional&
          AcidicPhospohlipidConcentration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          AcidicPhospohlipidConcentration (const AcidicPhospohlipidConcentration_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          AcidicPhospohlipidConcentration (::std::unique_ptr< AcidicPhospohlipidConcentration_type > p);

          //@}

          /**
           * @name MatrixVolume
           *
           * @brief Accessor and modifier functions for the %MatrixVolume
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarVolumeData MatrixVolume_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MatrixVolume_type > MatrixVolume_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MatrixVolume_type, char > MatrixVolume_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MatrixVolume_optional&
          MatrixVolume () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MatrixVolume_optional&
          MatrixVolume ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MatrixVolume (const MatrixVolume_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MatrixVolume (const MatrixVolume_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MatrixVolume (::std::unique_ptr< MatrixVolume_type > p);

          //@}

          /**
           * @name MembranePotential
           *
           * @brief Accessor and modifier functions for the %MembranePotential
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarElectricPotentialData MembranePotential_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MembranePotential_type > MembranePotential_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MembranePotential_type, char > MembranePotential_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MembranePotential_optional&
          MembranePotential () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MembranePotential_optional&
          MembranePotential ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          MembranePotential (const MembranePotential_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          MembranePotential (const MembranePotential_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          MembranePotential (::std::unique_ptr< MembranePotential_type > p);

          //@}

          /**
           * @name NeutralLipidsVolumeFraction
           *
           * @brief Accessor and modifier functions for the %NeutralLipidsVolumeFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData NeutralLipidsVolumeFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NeutralLipidsVolumeFraction_type > NeutralLipidsVolumeFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeutralLipidsVolumeFraction_type, char > NeutralLipidsVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NeutralLipidsVolumeFraction_optional&
          NeutralLipidsVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NeutralLipidsVolumeFraction_optional&
          NeutralLipidsVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NeutralLipidsVolumeFraction (const NeutralLipidsVolumeFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NeutralLipidsVolumeFraction (::std::unique_ptr< NeutralLipidsVolumeFraction_type > p);

          //@}

          /**
           * @name NeutralPhospholipidsVolumeFraction
           *
           * @brief Accessor and modifier functions for the %NeutralPhospholipidsVolumeFraction
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarFractionData NeutralPhospholipidsVolumeFraction_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NeutralPhospholipidsVolumeFraction_type > NeutralPhospholipidsVolumeFraction_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NeutralPhospholipidsVolumeFraction_type, char > NeutralPhospholipidsVolumeFraction_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NeutralPhospholipidsVolumeFraction_optional&
          NeutralPhospholipidsVolumeFraction () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NeutralPhospholipidsVolumeFraction_optional&
          NeutralPhospholipidsVolumeFraction ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          NeutralPhospholipidsVolumeFraction (const NeutralPhospholipidsVolumeFraction_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          NeutralPhospholipidsVolumeFraction (::std::unique_ptr< NeutralPhospholipidsVolumeFraction_type > p);

          //@}

          /**
           * @name ReflectionCoefficient
           *
           * @brief Accessor and modifier functions for the %ReflectionCoefficient
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::Scalar0To1Data ReflectionCoefficient_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ReflectionCoefficient_type > ReflectionCoefficient_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReflectionCoefficient_type, char > ReflectionCoefficient_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ReflectionCoefficient_optional&
          ReflectionCoefficient () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ReflectionCoefficient_optional&
          ReflectionCoefficient ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          ReflectionCoefficient (const ReflectionCoefficient_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          ReflectionCoefficient (const ReflectionCoefficient_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          ReflectionCoefficient (::std::unique_ptr< ReflectionCoefficient_type > p);

          //@}

          /**
           * @name TissueToPlasmaAlbuminRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaAlbuminRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaAlbuminRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaAlbuminRatio_type > TissueToPlasmaAlbuminRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaAlbuminRatio_type, char > TissueToPlasmaAlbuminRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaAlbuminRatio_optional&
          TissueToPlasmaAlbuminRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaAlbuminRatio_optional&
          TissueToPlasmaAlbuminRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaAlbuminRatio (const TissueToPlasmaAlbuminRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaAlbuminRatio (::std::unique_ptr< TissueToPlasmaAlbuminRatio_type > p);

          //@}

          /**
           * @name TissueToPlasmaAlphaAcidGlycoproteinRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaAlphaAcidGlycoproteinRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > TissueToPlasmaAlphaAcidGlycoproteinRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaAlphaAcidGlycoproteinRatio_type, char > TissueToPlasmaAlphaAcidGlycoproteinRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaAlphaAcidGlycoproteinRatio_optional&
          TissueToPlasmaAlphaAcidGlycoproteinRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaAlphaAcidGlycoproteinRatio_optional&
          TissueToPlasmaAlphaAcidGlycoproteinRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaAlphaAcidGlycoproteinRatio (const TissueToPlasmaAlphaAcidGlycoproteinRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaAlphaAcidGlycoproteinRatio (::std::unique_ptr< TissueToPlasmaAlphaAcidGlycoproteinRatio_type > p);

          //@}

          /**
           * @name TissueToPlasmaLipoproteinRatio
           *
           * @brief Accessor and modifier functions for the %TissueToPlasmaLipoproteinRatio
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarData TissueToPlasmaLipoproteinRatio_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TissueToPlasmaLipoproteinRatio_type > TissueToPlasmaLipoproteinRatio_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TissueToPlasmaLipoproteinRatio_type, char > TissueToPlasmaLipoproteinRatio_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TissueToPlasmaLipoproteinRatio_optional&
          TissueToPlasmaLipoproteinRatio () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TissueToPlasmaLipoproteinRatio_optional&
          TissueToPlasmaLipoproteinRatio ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TissueToPlasmaLipoproteinRatio (const TissueToPlasmaLipoproteinRatio_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TissueToPlasmaLipoproteinRatio (::std::unique_ptr< TissueToPlasmaLipoproteinRatio_type > p);

          //@}

          /**
           * @name TotalMass
           *
           * @brief Accessor and modifier functions for the %TotalMass
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::mil::tatrc::physiology::datamodel::ScalarMassData TotalMass_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TotalMass_type > TotalMass_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TotalMass_type, char > TotalMass_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TotalMass_optional&
          TotalMass () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          TotalMass_optional&
          TotalMass ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          TotalMass (const TotalMass_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          TotalMass (const TotalMass_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          TotalMass (::std::unique_ptr< TotalMass_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          TissueCompartmentData ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TissueCompartmentData (const Name_type&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (::std::unique_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          TissueCompartmentData (::std::unique_ptr< Name_type >);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TissueCompartmentData (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueCompartmentData (const TissueCompartmentData& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TissueCompartmentData*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0) const;

          /**
           * @brief Copy assignment operator.
           *
           * @param x An instance to make a copy of.
           * @return A reference to itself.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TissueCompartmentData&
          operator= (const TissueCompartmentData& x);

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~TissueCompartmentData ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          protected:
          AcidicPhospohlipidConcentration_optional AcidicPhospohlipidConcentration_;
          MatrixVolume_optional MatrixVolume_;
          MembranePotential_optional MembranePotential_;
          NeutralLipidsVolumeFraction_optional NeutralLipidsVolumeFraction_;
          NeutralPhospholipidsVolumeFraction_optional NeutralPhospholipidsVolumeFraction_;
          ReflectionCoefficient_optional ReflectionCoefficient_;
          TissueToPlasmaAlbuminRatio_optional TissueToPlasmaAlbuminRatio_;
          TissueToPlasmaAlphaAcidGlycoproteinRatio_optional TissueToPlasmaAlphaAcidGlycoproteinRatio_;
          TissueToPlasmaLipoproteinRatio_optional TissueToPlasmaLipoproteinRatio_;
          TotalMass_optional TotalMass_;

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        ::std::ostream&
        operator<< (::std::ostream&, const TissueCompartmentData&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        BIOGEARS_CDM_API
        void
        operator<< (::xercesc::DOMElement&, const TissueCompartmentData&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TISSUE_COMPARTMENT_DATA_HXX

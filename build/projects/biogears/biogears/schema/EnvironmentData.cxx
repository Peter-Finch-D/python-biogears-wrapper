// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EnvironmentData.hxx"

#include "EnvironmentalConditionsData.hxx"

#include "ActiveHeatingData.hxx"

#include "ActiveCoolingData.hxx"

#include "AppliedTemperatureData.hxx"

#include "ScalarPowerData.hxx"

#include "ScalarHeatConductancePerAreaData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentData
        // 

        const EnvironmentData::Conditions_optional& EnvironmentData::
        Conditions () const
        {
          return this->Conditions_;
        }

        EnvironmentData::Conditions_optional& EnvironmentData::
        Conditions ()
        {
          return this->Conditions_;
        }

        void EnvironmentData::
        Conditions (const Conditions_type& x)
        {
          this->Conditions_.set (x);
        }

        void EnvironmentData::
        Conditions (const Conditions_optional& x)
        {
          this->Conditions_ = x;
        }

        void EnvironmentData::
        Conditions (::std::unique_ptr< Conditions_type > x)
        {
          this->Conditions_.set (std::move (x));
        }

        const EnvironmentData::ActiveHeating_optional& EnvironmentData::
        ActiveHeating () const
        {
          return this->ActiveHeating_;
        }

        EnvironmentData::ActiveHeating_optional& EnvironmentData::
        ActiveHeating ()
        {
          return this->ActiveHeating_;
        }

        void EnvironmentData::
        ActiveHeating (const ActiveHeating_type& x)
        {
          this->ActiveHeating_.set (x);
        }

        void EnvironmentData::
        ActiveHeating (const ActiveHeating_optional& x)
        {
          this->ActiveHeating_ = x;
        }

        void EnvironmentData::
        ActiveHeating (::std::unique_ptr< ActiveHeating_type > x)
        {
          this->ActiveHeating_.set (std::move (x));
        }

        const EnvironmentData::ActiveCooling_optional& EnvironmentData::
        ActiveCooling () const
        {
          return this->ActiveCooling_;
        }

        EnvironmentData::ActiveCooling_optional& EnvironmentData::
        ActiveCooling ()
        {
          return this->ActiveCooling_;
        }

        void EnvironmentData::
        ActiveCooling (const ActiveCooling_type& x)
        {
          this->ActiveCooling_.set (x);
        }

        void EnvironmentData::
        ActiveCooling (const ActiveCooling_optional& x)
        {
          this->ActiveCooling_ = x;
        }

        void EnvironmentData::
        ActiveCooling (::std::unique_ptr< ActiveCooling_type > x)
        {
          this->ActiveCooling_.set (std::move (x));
        }

        const EnvironmentData::AppliedTemperature_optional& EnvironmentData::
        AppliedTemperature () const
        {
          return this->AppliedTemperature_;
        }

        EnvironmentData::AppliedTemperature_optional& EnvironmentData::
        AppliedTemperature ()
        {
          return this->AppliedTemperature_;
        }

        void EnvironmentData::
        AppliedTemperature (const AppliedTemperature_type& x)
        {
          this->AppliedTemperature_.set (x);
        }

        void EnvironmentData::
        AppliedTemperature (const AppliedTemperature_optional& x)
        {
          this->AppliedTemperature_ = x;
        }

        void EnvironmentData::
        AppliedTemperature (::std::unique_ptr< AppliedTemperature_type > x)
        {
          this->AppliedTemperature_.set (std::move (x));
        }

        const EnvironmentData::ConvectiveHeatLoss_optional& EnvironmentData::
        ConvectiveHeatLoss () const
        {
          return this->ConvectiveHeatLoss_;
        }

        EnvironmentData::ConvectiveHeatLoss_optional& EnvironmentData::
        ConvectiveHeatLoss ()
        {
          return this->ConvectiveHeatLoss_;
        }

        void EnvironmentData::
        ConvectiveHeatLoss (const ConvectiveHeatLoss_type& x)
        {
          this->ConvectiveHeatLoss_.set (x);
        }

        void EnvironmentData::
        ConvectiveHeatLoss (const ConvectiveHeatLoss_optional& x)
        {
          this->ConvectiveHeatLoss_ = x;
        }

        void EnvironmentData::
        ConvectiveHeatLoss (::std::unique_ptr< ConvectiveHeatLoss_type > x)
        {
          this->ConvectiveHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::ConvectiveHeatTranferCoefficient_optional& EnvironmentData::
        ConvectiveHeatTranferCoefficient () const
        {
          return this->ConvectiveHeatTranferCoefficient_;
        }

        EnvironmentData::ConvectiveHeatTranferCoefficient_optional& EnvironmentData::
        ConvectiveHeatTranferCoefficient ()
        {
          return this->ConvectiveHeatTranferCoefficient_;
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (const ConvectiveHeatTranferCoefficient_type& x)
        {
          this->ConvectiveHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (const ConvectiveHeatTranferCoefficient_optional& x)
        {
          this->ConvectiveHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        ConvectiveHeatTranferCoefficient (::std::unique_ptr< ConvectiveHeatTranferCoefficient_type > x)
        {
          this->ConvectiveHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::EvaporativeHeatLoss_optional& EnvironmentData::
        EvaporativeHeatLoss () const
        {
          return this->EvaporativeHeatLoss_;
        }

        EnvironmentData::EvaporativeHeatLoss_optional& EnvironmentData::
        EvaporativeHeatLoss ()
        {
          return this->EvaporativeHeatLoss_;
        }

        void EnvironmentData::
        EvaporativeHeatLoss (const EvaporativeHeatLoss_type& x)
        {
          this->EvaporativeHeatLoss_.set (x);
        }

        void EnvironmentData::
        EvaporativeHeatLoss (const EvaporativeHeatLoss_optional& x)
        {
          this->EvaporativeHeatLoss_ = x;
        }

        void EnvironmentData::
        EvaporativeHeatLoss (::std::unique_ptr< EvaporativeHeatLoss_type > x)
        {
          this->EvaporativeHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::EvaporativeHeatTranferCoefficient_optional& EnvironmentData::
        EvaporativeHeatTranferCoefficient () const
        {
          return this->EvaporativeHeatTranferCoefficient_;
        }

        EnvironmentData::EvaporativeHeatTranferCoefficient_optional& EnvironmentData::
        EvaporativeHeatTranferCoefficient ()
        {
          return this->EvaporativeHeatTranferCoefficient_;
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (const EvaporativeHeatTranferCoefficient_type& x)
        {
          this->EvaporativeHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (const EvaporativeHeatTranferCoefficient_optional& x)
        {
          this->EvaporativeHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        EvaporativeHeatTranferCoefficient (::std::unique_ptr< EvaporativeHeatTranferCoefficient_type > x)
        {
          this->EvaporativeHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::RadiativeHeatLoss_optional& EnvironmentData::
        RadiativeHeatLoss () const
        {
          return this->RadiativeHeatLoss_;
        }

        EnvironmentData::RadiativeHeatLoss_optional& EnvironmentData::
        RadiativeHeatLoss ()
        {
          return this->RadiativeHeatLoss_;
        }

        void EnvironmentData::
        RadiativeHeatLoss (const RadiativeHeatLoss_type& x)
        {
          this->RadiativeHeatLoss_.set (x);
        }

        void EnvironmentData::
        RadiativeHeatLoss (const RadiativeHeatLoss_optional& x)
        {
          this->RadiativeHeatLoss_ = x;
        }

        void EnvironmentData::
        RadiativeHeatLoss (::std::unique_ptr< RadiativeHeatLoss_type > x)
        {
          this->RadiativeHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::RadiativeHeatTranferCoefficient_optional& EnvironmentData::
        RadiativeHeatTranferCoefficient () const
        {
          return this->RadiativeHeatTranferCoefficient_;
        }

        EnvironmentData::RadiativeHeatTranferCoefficient_optional& EnvironmentData::
        RadiativeHeatTranferCoefficient ()
        {
          return this->RadiativeHeatTranferCoefficient_;
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (const RadiativeHeatTranferCoefficient_type& x)
        {
          this->RadiativeHeatTranferCoefficient_.set (x);
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (const RadiativeHeatTranferCoefficient_optional& x)
        {
          this->RadiativeHeatTranferCoefficient_ = x;
        }

        void EnvironmentData::
        RadiativeHeatTranferCoefficient (::std::unique_ptr< RadiativeHeatTranferCoefficient_type > x)
        {
          this->RadiativeHeatTranferCoefficient_.set (std::move (x));
        }

        const EnvironmentData::RespirationHeatLoss_optional& EnvironmentData::
        RespirationHeatLoss () const
        {
          return this->RespirationHeatLoss_;
        }

        EnvironmentData::RespirationHeatLoss_optional& EnvironmentData::
        RespirationHeatLoss ()
        {
          return this->RespirationHeatLoss_;
        }

        void EnvironmentData::
        RespirationHeatLoss (const RespirationHeatLoss_type& x)
        {
          this->RespirationHeatLoss_.set (x);
        }

        void EnvironmentData::
        RespirationHeatLoss (const RespirationHeatLoss_optional& x)
        {
          this->RespirationHeatLoss_ = x;
        }

        void EnvironmentData::
        RespirationHeatLoss (::std::unique_ptr< RespirationHeatLoss_type > x)
        {
          this->RespirationHeatLoss_.set (std::move (x));
        }

        const EnvironmentData::SkinHeatLoss_optional& EnvironmentData::
        SkinHeatLoss () const
        {
          return this->SkinHeatLoss_;
        }

        EnvironmentData::SkinHeatLoss_optional& EnvironmentData::
        SkinHeatLoss ()
        {
          return this->SkinHeatLoss_;
        }

        void EnvironmentData::
        SkinHeatLoss (const SkinHeatLoss_type& x)
        {
          this->SkinHeatLoss_.set (x);
        }

        void EnvironmentData::
        SkinHeatLoss (const SkinHeatLoss_optional& x)
        {
          this->SkinHeatLoss_ = x;
        }

        void EnvironmentData::
        SkinHeatLoss (::std::unique_ptr< SkinHeatLoss_type > x)
        {
          this->SkinHeatLoss_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnvironmentData
        //

        EnvironmentData::
        EnvironmentData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          Conditions_ (this),
          ActiveHeating_ (this),
          ActiveCooling_ (this),
          AppliedTemperature_ (this),
          ConvectiveHeatLoss_ (this),
          ConvectiveHeatTranferCoefficient_ (this),
          EvaporativeHeatLoss_ (this),
          EvaporativeHeatTranferCoefficient_ (this),
          RadiativeHeatLoss_ (this),
          RadiativeHeatTranferCoefficient_ (this),
          RespirationHeatLoss_ (this),
          SkinHeatLoss_ (this)
        {
        }

        EnvironmentData::
        EnvironmentData (const EnvironmentData& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          Conditions_ (x.Conditions_, f, this),
          ActiveHeating_ (x.ActiveHeating_, f, this),
          ActiveCooling_ (x.ActiveCooling_, f, this),
          AppliedTemperature_ (x.AppliedTemperature_, f, this),
          ConvectiveHeatLoss_ (x.ConvectiveHeatLoss_, f, this),
          ConvectiveHeatTranferCoefficient_ (x.ConvectiveHeatTranferCoefficient_, f, this),
          EvaporativeHeatLoss_ (x.EvaporativeHeatLoss_, f, this),
          EvaporativeHeatTranferCoefficient_ (x.EvaporativeHeatTranferCoefficient_, f, this),
          RadiativeHeatLoss_ (x.RadiativeHeatLoss_, f, this),
          RadiativeHeatTranferCoefficient_ (x.RadiativeHeatTranferCoefficient_, f, this),
          RespirationHeatLoss_ (x.RespirationHeatLoss_, f, this),
          SkinHeatLoss_ (x.SkinHeatLoss_, f, this)
        {
        }

        EnvironmentData::
        EnvironmentData (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          Conditions_ (this),
          ActiveHeating_ (this),
          ActiveCooling_ (this),
          AppliedTemperature_ (this),
          ConvectiveHeatLoss_ (this),
          ConvectiveHeatTranferCoefficient_ (this),
          EvaporativeHeatLoss_ (this),
          EvaporativeHeatTranferCoefficient_ (this),
          RadiativeHeatLoss_ (this),
          RadiativeHeatTranferCoefficient_ (this),
          RespirationHeatLoss_ (this),
          SkinHeatLoss_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnvironmentData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Conditions
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Conditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Conditions_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Conditions_)
                {
                  ::std::unique_ptr< Conditions_type > r (
                    dynamic_cast< Conditions_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Conditions_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ActiveHeating
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveHeating",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveHeating_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ActiveHeating_)
                {
                  ::std::unique_ptr< ActiveHeating_type > r (
                    dynamic_cast< ActiveHeating_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ActiveHeating_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ActiveCooling
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ActiveCooling",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ActiveCooling_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ActiveCooling_)
                {
                  ::std::unique_ptr< ActiveCooling_type > r (
                    dynamic_cast< ActiveCooling_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ActiveCooling_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AppliedTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AppliedTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AppliedTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AppliedTemperature_)
                {
                  ::std::unique_ptr< AppliedTemperature_type > r (
                    dynamic_cast< AppliedTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AppliedTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConvectiveHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConvectiveHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConvectiveHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConvectiveHeatLoss_)
                {
                  ::std::unique_ptr< ConvectiveHeatLoss_type > r (
                    dynamic_cast< ConvectiveHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConvectiveHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ConvectiveHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ConvectiveHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ConvectiveHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ConvectiveHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< ConvectiveHeatTranferCoefficient_type > r (
                    dynamic_cast< ConvectiveHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ConvectiveHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EvaporativeHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EvaporativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EvaporativeHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EvaporativeHeatLoss_)
                {
                  ::std::unique_ptr< EvaporativeHeatLoss_type > r (
                    dynamic_cast< EvaporativeHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EvaporativeHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // EvaporativeHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "EvaporativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< EvaporativeHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->EvaporativeHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< EvaporativeHeatTranferCoefficient_type > r (
                    dynamic_cast< EvaporativeHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->EvaporativeHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RadiativeHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RadiativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RadiativeHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RadiativeHeatLoss_)
                {
                  ::std::unique_ptr< RadiativeHeatLoss_type > r (
                    dynamic_cast< RadiativeHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RadiativeHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RadiativeHeatTranferCoefficient
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RadiativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RadiativeHeatTranferCoefficient_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RadiativeHeatTranferCoefficient_)
                {
                  ::std::unique_ptr< RadiativeHeatTranferCoefficient_type > r (
                    dynamic_cast< RadiativeHeatTranferCoefficient_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RadiativeHeatTranferCoefficient_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationHeatLoss_)
                {
                  ::std::unique_ptr< RespirationHeatLoss_type > r (
                    dynamic_cast< RespirationHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SkinHeatLoss
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SkinHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SkinHeatLoss_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SkinHeatLoss_)
                {
                  ::std::unique_ptr< SkinHeatLoss_type > r (
                    dynamic_cast< SkinHeatLoss_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SkinHeatLoss_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnvironmentData* EnvironmentData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnvironmentData (*this, f, c);
        }

        EnvironmentData& EnvironmentData::
        operator= (const EnvironmentData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->Conditions_ = x.Conditions_;
            this->ActiveHeating_ = x.ActiveHeating_;
            this->ActiveCooling_ = x.ActiveCooling_;
            this->AppliedTemperature_ = x.AppliedTemperature_;
            this->ConvectiveHeatLoss_ = x.ConvectiveHeatLoss_;
            this->ConvectiveHeatTranferCoefficient_ = x.ConvectiveHeatTranferCoefficient_;
            this->EvaporativeHeatLoss_ = x.EvaporativeHeatLoss_;
            this->EvaporativeHeatTranferCoefficient_ = x.EvaporativeHeatTranferCoefficient_;
            this->RadiativeHeatLoss_ = x.RadiativeHeatLoss_;
            this->RadiativeHeatTranferCoefficient_ = x.RadiativeHeatTranferCoefficient_;
            this->RespirationHeatLoss_ = x.RespirationHeatLoss_;
            this->SkinHeatLoss_ = x.SkinHeatLoss_;
          }

          return *this;
        }

        EnvironmentData::
        ~EnvironmentData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_type_factory_init (
          "EnvironmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const EnvironmentData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Conditions ())
            {
              o << ::std::endl << "Conditions: ";
              om.insert (o, *i.Conditions ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ActiveHeating ())
            {
              o << ::std::endl << "ActiveHeating: ";
              om.insert (o, *i.ActiveHeating ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ActiveCooling ())
            {
              o << ::std::endl << "ActiveCooling: ";
              om.insert (o, *i.ActiveCooling ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AppliedTemperature ())
            {
              o << ::std::endl << "AppliedTemperature: ";
              om.insert (o, *i.AppliedTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConvectiveHeatLoss ())
            {
              o << ::std::endl << "ConvectiveHeatLoss: ";
              om.insert (o, *i.ConvectiveHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ConvectiveHeatTranferCoefficient ())
            {
              o << ::std::endl << "ConvectiveHeatTranferCoefficient: ";
              om.insert (o, *i.ConvectiveHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EvaporativeHeatLoss ())
            {
              o << ::std::endl << "EvaporativeHeatLoss: ";
              om.insert (o, *i.EvaporativeHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.EvaporativeHeatTranferCoefficient ())
            {
              o << ::std::endl << "EvaporativeHeatTranferCoefficient: ";
              om.insert (o, *i.EvaporativeHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RadiativeHeatLoss ())
            {
              o << ::std::endl << "RadiativeHeatLoss: ";
              om.insert (o, *i.RadiativeHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RadiativeHeatTranferCoefficient ())
            {
              o << ::std::endl << "RadiativeHeatTranferCoefficient: ";
              om.insert (o, *i.RadiativeHeatTranferCoefficient ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationHeatLoss ())
            {
              o << ::std::endl << "RespirationHeatLoss: ";
              om.insert (o, *i.RespirationHeatLoss ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SkinHeatLoss ())
            {
              o << ::std::endl << "SkinHeatLoss: ";
              om.insert (o, *i.SkinHeatLoss ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const EnvironmentData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // Conditions
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Conditions ())
            {
              const EnvironmentData::Conditions_type& x (*i.Conditions ());
              if (typeid (EnvironmentData::Conditions_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Conditions",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Conditions",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ActiveHeating
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ActiveHeating ())
            {
              const EnvironmentData::ActiveHeating_type& x (*i.ActiveHeating ());
              if (typeid (EnvironmentData::ActiveHeating_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveHeating",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ActiveHeating",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ActiveCooling
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ActiveCooling ())
            {
              const EnvironmentData::ActiveCooling_type& x (*i.ActiveCooling ());
              if (typeid (EnvironmentData::ActiveCooling_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ActiveCooling",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ActiveCooling",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AppliedTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AppliedTemperature ())
            {
              const EnvironmentData::AppliedTemperature_type& x (*i.AppliedTemperature ());
              if (typeid (EnvironmentData::AppliedTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AppliedTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AppliedTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConvectiveHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConvectiveHeatLoss ())
            {
              const EnvironmentData::ConvectiveHeatLoss_type& x (*i.ConvectiveHeatLoss ());
              if (typeid (EnvironmentData::ConvectiveHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConvectiveHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConvectiveHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ConvectiveHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ConvectiveHeatTranferCoefficient ())
            {
              const EnvironmentData::ConvectiveHeatTranferCoefficient_type& x (*i.ConvectiveHeatTranferCoefficient ());
              if (typeid (EnvironmentData::ConvectiveHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ConvectiveHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ConvectiveHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EvaporativeHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EvaporativeHeatLoss ())
            {
              const EnvironmentData::EvaporativeHeatLoss_type& x (*i.EvaporativeHeatLoss ());
              if (typeid (EnvironmentData::EvaporativeHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EvaporativeHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EvaporativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // EvaporativeHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.EvaporativeHeatTranferCoefficient ())
            {
              const EnvironmentData::EvaporativeHeatTranferCoefficient_type& x (*i.EvaporativeHeatTranferCoefficient ());
              if (typeid (EnvironmentData::EvaporativeHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "EvaporativeHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "EvaporativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RadiativeHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RadiativeHeatLoss ())
            {
              const EnvironmentData::RadiativeHeatLoss_type& x (*i.RadiativeHeatLoss ());
              if (typeid (EnvironmentData::RadiativeHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RadiativeHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RadiativeHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RadiativeHeatTranferCoefficient
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RadiativeHeatTranferCoefficient ())
            {
              const EnvironmentData::RadiativeHeatTranferCoefficient_type& x (*i.RadiativeHeatTranferCoefficient ());
              if (typeid (EnvironmentData::RadiativeHeatTranferCoefficient_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RadiativeHeatTranferCoefficient",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RadiativeHeatTranferCoefficient",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationHeatLoss ())
            {
              const EnvironmentData::RespirationHeatLoss_type& x (*i.RespirationHeatLoss ());
              if (typeid (EnvironmentData::RespirationHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SkinHeatLoss
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SkinHeatLoss ())
            {
              const EnvironmentData::SkinHeatLoss_type& x (*i.SkinHeatLoss ());
              if (typeid (EnvironmentData::SkinHeatLoss_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SkinHeatLoss",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SkinHeatLoss",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnvironmentData >
        _xsd_EnvironmentData_type_serializer_init (
          "EnvironmentData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


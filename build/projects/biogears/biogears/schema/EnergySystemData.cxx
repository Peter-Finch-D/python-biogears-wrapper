// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "EnergySystemData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarTemperatureData.hxx"

#include "ScalarAmountPerTimeData.hxx"

#include "ScalarPressureData.hxx"

#include "ScalarMassPerTimeData.hxx"

#include "ScalarPowerData.hxx"

#include "ScalarMassData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnergySystemData
        // 

        const EnergySystemData::AchievedExerciseLevel_optional& EnergySystemData::
        AchievedExerciseLevel () const
        {
          return this->AchievedExerciseLevel_;
        }

        EnergySystemData::AchievedExerciseLevel_optional& EnergySystemData::
        AchievedExerciseLevel ()
        {
          return this->AchievedExerciseLevel_;
        }

        void EnergySystemData::
        AchievedExerciseLevel (const AchievedExerciseLevel_type& x)
        {
          this->AchievedExerciseLevel_.set (x);
        }

        void EnergySystemData::
        AchievedExerciseLevel (const AchievedExerciseLevel_optional& x)
        {
          this->AchievedExerciseLevel_ = x;
        }

        void EnergySystemData::
        AchievedExerciseLevel (::std::unique_ptr< AchievedExerciseLevel_type > x)
        {
          this->AchievedExerciseLevel_.set (std::move (x));
        }

        const EnergySystemData::CoreTemperature_optional& EnergySystemData::
        CoreTemperature () const
        {
          return this->CoreTemperature_;
        }

        EnergySystemData::CoreTemperature_optional& EnergySystemData::
        CoreTemperature ()
        {
          return this->CoreTemperature_;
        }

        void EnergySystemData::
        CoreTemperature (const CoreTemperature_type& x)
        {
          this->CoreTemperature_.set (x);
        }

        void EnergySystemData::
        CoreTemperature (const CoreTemperature_optional& x)
        {
          this->CoreTemperature_ = x;
        }

        void EnergySystemData::
        CoreTemperature (::std::unique_ptr< CoreTemperature_type > x)
        {
          this->CoreTemperature_.set (std::move (x));
        }

        const EnergySystemData::CreatinineProductionRate_optional& EnergySystemData::
        CreatinineProductionRate () const
        {
          return this->CreatinineProductionRate_;
        }

        EnergySystemData::CreatinineProductionRate_optional& EnergySystemData::
        CreatinineProductionRate ()
        {
          return this->CreatinineProductionRate_;
        }

        void EnergySystemData::
        CreatinineProductionRate (const CreatinineProductionRate_type& x)
        {
          this->CreatinineProductionRate_.set (x);
        }

        void EnergySystemData::
        CreatinineProductionRate (const CreatinineProductionRate_optional& x)
        {
          this->CreatinineProductionRate_ = x;
        }

        void EnergySystemData::
        CreatinineProductionRate (::std::unique_ptr< CreatinineProductionRate_type > x)
        {
          this->CreatinineProductionRate_.set (std::move (x));
        }

        const EnergySystemData::ExerciseMeanArterialPressureDelta_optional& EnergySystemData::
        ExerciseMeanArterialPressureDelta () const
        {
          return this->ExerciseMeanArterialPressureDelta_;
        }

        EnergySystemData::ExerciseMeanArterialPressureDelta_optional& EnergySystemData::
        ExerciseMeanArterialPressureDelta ()
        {
          return this->ExerciseMeanArterialPressureDelta_;
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_type& x)
        {
          this->ExerciseMeanArterialPressureDelta_.set (x);
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (const ExerciseMeanArterialPressureDelta_optional& x)
        {
          this->ExerciseMeanArterialPressureDelta_ = x;
        }

        void EnergySystemData::
        ExerciseMeanArterialPressureDelta (::std::unique_ptr< ExerciseMeanArterialPressureDelta_type > x)
        {
          this->ExerciseMeanArterialPressureDelta_.set (std::move (x));
        }

        const EnergySystemData::FatigueLevel_optional& EnergySystemData::
        FatigueLevel () const
        {
          return this->FatigueLevel_;
        }

        EnergySystemData::FatigueLevel_optional& EnergySystemData::
        FatigueLevel ()
        {
          return this->FatigueLevel_;
        }

        void EnergySystemData::
        FatigueLevel (const FatigueLevel_type& x)
        {
          this->FatigueLevel_.set (x);
        }

        void EnergySystemData::
        FatigueLevel (const FatigueLevel_optional& x)
        {
          this->FatigueLevel_ = x;
        }

        void EnergySystemData::
        FatigueLevel (::std::unique_ptr< FatigueLevel_type > x)
        {
          this->FatigueLevel_.set (std::move (x));
        }

        const EnergySystemData::LactateProductionRate_optional& EnergySystemData::
        LactateProductionRate () const
        {
          return this->LactateProductionRate_;
        }

        EnergySystemData::LactateProductionRate_optional& EnergySystemData::
        LactateProductionRate ()
        {
          return this->LactateProductionRate_;
        }

        void EnergySystemData::
        LactateProductionRate (const LactateProductionRate_type& x)
        {
          this->LactateProductionRate_.set (x);
        }

        void EnergySystemData::
        LactateProductionRate (const LactateProductionRate_optional& x)
        {
          this->LactateProductionRate_ = x;
        }

        void EnergySystemData::
        LactateProductionRate (::std::unique_ptr< LactateProductionRate_type > x)
        {
          this->LactateProductionRate_.set (std::move (x));
        }

        const EnergySystemData::SkinTemperature_optional& EnergySystemData::
        SkinTemperature () const
        {
          return this->SkinTemperature_;
        }

        EnergySystemData::SkinTemperature_optional& EnergySystemData::
        SkinTemperature ()
        {
          return this->SkinTemperature_;
        }

        void EnergySystemData::
        SkinTemperature (const SkinTemperature_type& x)
        {
          this->SkinTemperature_.set (x);
        }

        void EnergySystemData::
        SkinTemperature (const SkinTemperature_optional& x)
        {
          this->SkinTemperature_ = x;
        }

        void EnergySystemData::
        SkinTemperature (::std::unique_ptr< SkinTemperature_type > x)
        {
          this->SkinTemperature_.set (std::move (x));
        }

        const EnergySystemData::SweatRate_optional& EnergySystemData::
        SweatRate () const
        {
          return this->SweatRate_;
        }

        EnergySystemData::SweatRate_optional& EnergySystemData::
        SweatRate ()
        {
          return this->SweatRate_;
        }

        void EnergySystemData::
        SweatRate (const SweatRate_type& x)
        {
          this->SweatRate_.set (x);
        }

        void EnergySystemData::
        SweatRate (const SweatRate_optional& x)
        {
          this->SweatRate_ = x;
        }

        void EnergySystemData::
        SweatRate (::std::unique_ptr< SweatRate_type > x)
        {
          this->SweatRate_.set (std::move (x));
        }

        const EnergySystemData::TotalMetabolicRate_optional& EnergySystemData::
        TotalMetabolicRate () const
        {
          return this->TotalMetabolicRate_;
        }

        EnergySystemData::TotalMetabolicRate_optional& EnergySystemData::
        TotalMetabolicRate ()
        {
          return this->TotalMetabolicRate_;
        }

        void EnergySystemData::
        TotalMetabolicRate (const TotalMetabolicRate_type& x)
        {
          this->TotalMetabolicRate_.set (x);
        }

        void EnergySystemData::
        TotalMetabolicRate (const TotalMetabolicRate_optional& x)
        {
          this->TotalMetabolicRate_ = x;
        }

        void EnergySystemData::
        TotalMetabolicRate (::std::unique_ptr< TotalMetabolicRate_type > x)
        {
          this->TotalMetabolicRate_.set (std::move (x));
        }

        const EnergySystemData::TotalWorkRateLevel_optional& EnergySystemData::
        TotalWorkRateLevel () const
        {
          return this->TotalWorkRateLevel_;
        }

        EnergySystemData::TotalWorkRateLevel_optional& EnergySystemData::
        TotalWorkRateLevel ()
        {
          return this->TotalWorkRateLevel_;
        }

        void EnergySystemData::
        TotalWorkRateLevel (const TotalWorkRateLevel_type& x)
        {
          this->TotalWorkRateLevel_.set (x);
        }

        void EnergySystemData::
        TotalWorkRateLevel (const TotalWorkRateLevel_optional& x)
        {
          this->TotalWorkRateLevel_ = x;
        }

        void EnergySystemData::
        TotalWorkRateLevel (::std::unique_ptr< TotalWorkRateLevel_type > x)
        {
          this->TotalWorkRateLevel_.set (std::move (x));
        }

        const EnergySystemData::SodiumLostToSweat_optional& EnergySystemData::
        SodiumLostToSweat () const
        {
          return this->SodiumLostToSweat_;
        }

        EnergySystemData::SodiumLostToSweat_optional& EnergySystemData::
        SodiumLostToSweat ()
        {
          return this->SodiumLostToSweat_;
        }

        void EnergySystemData::
        SodiumLostToSweat (const SodiumLostToSweat_type& x)
        {
          this->SodiumLostToSweat_.set (x);
        }

        void EnergySystemData::
        SodiumLostToSweat (const SodiumLostToSweat_optional& x)
        {
          this->SodiumLostToSweat_ = x;
        }

        void EnergySystemData::
        SodiumLostToSweat (::std::unique_ptr< SodiumLostToSweat_type > x)
        {
          this->SodiumLostToSweat_.set (std::move (x));
        }

        const EnergySystemData::PotassiumLostToSweat_optional& EnergySystemData::
        PotassiumLostToSweat () const
        {
          return this->PotassiumLostToSweat_;
        }

        EnergySystemData::PotassiumLostToSweat_optional& EnergySystemData::
        PotassiumLostToSweat ()
        {
          return this->PotassiumLostToSweat_;
        }

        void EnergySystemData::
        PotassiumLostToSweat (const PotassiumLostToSweat_type& x)
        {
          this->PotassiumLostToSweat_.set (x);
        }

        void EnergySystemData::
        PotassiumLostToSweat (const PotassiumLostToSweat_optional& x)
        {
          this->PotassiumLostToSweat_ = x;
        }

        void EnergySystemData::
        PotassiumLostToSweat (::std::unique_ptr< PotassiumLostToSweat_type > x)
        {
          this->PotassiumLostToSweat_.set (std::move (x));
        }

        const EnergySystemData::ChlorideLostToSweat_optional& EnergySystemData::
        ChlorideLostToSweat () const
        {
          return this->ChlorideLostToSweat_;
        }

        EnergySystemData::ChlorideLostToSweat_optional& EnergySystemData::
        ChlorideLostToSweat ()
        {
          return this->ChlorideLostToSweat_;
        }

        void EnergySystemData::
        ChlorideLostToSweat (const ChlorideLostToSweat_type& x)
        {
          this->ChlorideLostToSweat_.set (x);
        }

        void EnergySystemData::
        ChlorideLostToSweat (const ChlorideLostToSweat_optional& x)
        {
          this->ChlorideLostToSweat_ = x;
        }

        void EnergySystemData::
        ChlorideLostToSweat (::std::unique_ptr< ChlorideLostToSweat_type > x)
        {
          this->ChlorideLostToSweat_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // EnergySystemData
        //

        EnergySystemData::
        EnergySystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          AchievedExerciseLevel_ (this),
          CoreTemperature_ (this),
          CreatinineProductionRate_ (this),
          ExerciseMeanArterialPressureDelta_ (this),
          FatigueLevel_ (this),
          LactateProductionRate_ (this),
          SkinTemperature_ (this),
          SweatRate_ (this),
          TotalMetabolicRate_ (this),
          TotalWorkRateLevel_ (this),
          SodiumLostToSweat_ (this),
          PotassiumLostToSweat_ (this),
          ChlorideLostToSweat_ (this)
        {
        }

        EnergySystemData::
        EnergySystemData (const EnergySystemData& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          AchievedExerciseLevel_ (x.AchievedExerciseLevel_, f, this),
          CoreTemperature_ (x.CoreTemperature_, f, this),
          CreatinineProductionRate_ (x.CreatinineProductionRate_, f, this),
          ExerciseMeanArterialPressureDelta_ (x.ExerciseMeanArterialPressureDelta_, f, this),
          FatigueLevel_ (x.FatigueLevel_, f, this),
          LactateProductionRate_ (x.LactateProductionRate_, f, this),
          SkinTemperature_ (x.SkinTemperature_, f, this),
          SweatRate_ (x.SweatRate_, f, this),
          TotalMetabolicRate_ (x.TotalMetabolicRate_, f, this),
          TotalWorkRateLevel_ (x.TotalWorkRateLevel_, f, this),
          SodiumLostToSweat_ (x.SodiumLostToSweat_, f, this),
          PotassiumLostToSweat_ (x.PotassiumLostToSweat_, f, this),
          ChlorideLostToSweat_ (x.ChlorideLostToSweat_, f, this)
        {
        }

        EnergySystemData::
        EnergySystemData (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          AchievedExerciseLevel_ (this),
          CoreTemperature_ (this),
          CreatinineProductionRate_ (this),
          ExerciseMeanArterialPressureDelta_ (this),
          FatigueLevel_ (this),
          LactateProductionRate_ (this),
          SkinTemperature_ (this),
          SweatRate_ (this),
          TotalMetabolicRate_ (this),
          TotalWorkRateLevel_ (this),
          SodiumLostToSweat_ (this),
          PotassiumLostToSweat_ (this),
          ChlorideLostToSweat_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void EnergySystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AchievedExerciseLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AchievedExerciseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AchievedExerciseLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AchievedExerciseLevel_)
                {
                  ::std::unique_ptr< AchievedExerciseLevel_type > r (
                    dynamic_cast< AchievedExerciseLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AchievedExerciseLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CoreTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CoreTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CoreTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CoreTemperature_)
                {
                  ::std::unique_ptr< CoreTemperature_type > r (
                    dynamic_cast< CoreTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CoreTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CreatinineProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CreatinineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CreatinineProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CreatinineProductionRate_)
                {
                  ::std::unique_ptr< CreatinineProductionRate_type > r (
                    dynamic_cast< CreatinineProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CreatinineProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExerciseMeanArterialPressureDelta
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExerciseMeanArterialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExerciseMeanArterialPressureDelta_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExerciseMeanArterialPressureDelta_)
                {
                  ::std::unique_ptr< ExerciseMeanArterialPressureDelta_type > r (
                    dynamic_cast< ExerciseMeanArterialPressureDelta_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExerciseMeanArterialPressureDelta_.set (::std::move (r));
                  continue;
                }
              }
            }

            // FatigueLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FatigueLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FatigueLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FatigueLevel_)
                {
                  ::std::unique_ptr< FatigueLevel_type > r (
                    dynamic_cast< FatigueLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FatigueLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // LactateProductionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LactateProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LactateProductionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->LactateProductionRate_)
                {
                  ::std::unique_ptr< LactateProductionRate_type > r (
                    dynamic_cast< LactateProductionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->LactateProductionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SkinTemperature
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SkinTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SkinTemperature_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SkinTemperature_)
                {
                  ::std::unique_ptr< SkinTemperature_type > r (
                    dynamic_cast< SkinTemperature_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SkinTemperature_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SweatRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SweatRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SweatRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SweatRate_)
                {
                  ::std::unique_ptr< SweatRate_type > r (
                    dynamic_cast< SweatRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SweatRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalMetabolicRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalMetabolicRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalMetabolicRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalMetabolicRate_)
                {
                  ::std::unique_ptr< TotalMetabolicRate_type > r (
                    dynamic_cast< TotalMetabolicRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalMetabolicRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TotalWorkRateLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TotalWorkRateLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TotalWorkRateLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TotalWorkRateLevel_)
                {
                  ::std::unique_ptr< TotalWorkRateLevel_type > r (
                    dynamic_cast< TotalWorkRateLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TotalWorkRateLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SodiumLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SodiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SodiumLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SodiumLostToSweat_)
                {
                  ::std::unique_ptr< SodiumLostToSweat_type > r (
                    dynamic_cast< SodiumLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SodiumLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PotassiumLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PotassiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PotassiumLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PotassiumLostToSweat_)
                {
                  ::std::unique_ptr< PotassiumLostToSweat_type > r (
                    dynamic_cast< PotassiumLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PotassiumLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ChlorideLostToSweat
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ChlorideLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ChlorideLostToSweat_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ChlorideLostToSweat_)
                {
                  ::std::unique_ptr< ChlorideLostToSweat_type > r (
                    dynamic_cast< ChlorideLostToSweat_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ChlorideLostToSweat_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        EnergySystemData* EnergySystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class EnergySystemData (*this, f, c);
        }

        EnergySystemData& EnergySystemData::
        operator= (const EnergySystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->AchievedExerciseLevel_ = x.AchievedExerciseLevel_;
            this->CoreTemperature_ = x.CoreTemperature_;
            this->CreatinineProductionRate_ = x.CreatinineProductionRate_;
            this->ExerciseMeanArterialPressureDelta_ = x.ExerciseMeanArterialPressureDelta_;
            this->FatigueLevel_ = x.FatigueLevel_;
            this->LactateProductionRate_ = x.LactateProductionRate_;
            this->SkinTemperature_ = x.SkinTemperature_;
            this->SweatRate_ = x.SweatRate_;
            this->TotalMetabolicRate_ = x.TotalMetabolicRate_;
            this->TotalWorkRateLevel_ = x.TotalWorkRateLevel_;
            this->SodiumLostToSweat_ = x.SodiumLostToSweat_;
            this->PotassiumLostToSweat_ = x.PotassiumLostToSweat_;
            this->ChlorideLostToSweat_ = x.ChlorideLostToSweat_;
          }

          return *this;
        }

        EnergySystemData::
        ~EnergySystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_type_factory_init (
          "EnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const EnergySystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AchievedExerciseLevel ())
            {
              o << ::std::endl << "AchievedExerciseLevel: ";
              om.insert (o, *i.AchievedExerciseLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CoreTemperature ())
            {
              o << ::std::endl << "CoreTemperature: ";
              om.insert (o, *i.CoreTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CreatinineProductionRate ())
            {
              o << ::std::endl << "CreatinineProductionRate: ";
              om.insert (o, *i.CreatinineProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDelta ())
            {
              o << ::std::endl << "ExerciseMeanArterialPressureDelta: ";
              om.insert (o, *i.ExerciseMeanArterialPressureDelta ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FatigueLevel ())
            {
              o << ::std::endl << "FatigueLevel: ";
              om.insert (o, *i.FatigueLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.LactateProductionRate ())
            {
              o << ::std::endl << "LactateProductionRate: ";
              om.insert (o, *i.LactateProductionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SkinTemperature ())
            {
              o << ::std::endl << "SkinTemperature: ";
              om.insert (o, *i.SkinTemperature ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SweatRate ())
            {
              o << ::std::endl << "SweatRate: ";
              om.insert (o, *i.SweatRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalMetabolicRate ())
            {
              o << ::std::endl << "TotalMetabolicRate: ";
              om.insert (o, *i.TotalMetabolicRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TotalWorkRateLevel ())
            {
              o << ::std::endl << "TotalWorkRateLevel: ";
              om.insert (o, *i.TotalWorkRateLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SodiumLostToSweat ())
            {
              o << ::std::endl << "SodiumLostToSweat: ";
              om.insert (o, *i.SodiumLostToSweat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PotassiumLostToSweat ())
            {
              o << ::std::endl << "PotassiumLostToSweat: ";
              om.insert (o, *i.PotassiumLostToSweat ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ChlorideLostToSweat ())
            {
              o << ::std::endl << "ChlorideLostToSweat: ";
              om.insert (o, *i.ChlorideLostToSweat ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const EnergySystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // AchievedExerciseLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AchievedExerciseLevel ())
            {
              const EnergySystemData::AchievedExerciseLevel_type& x (*i.AchievedExerciseLevel ());
              if (typeid (EnergySystemData::AchievedExerciseLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AchievedExerciseLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AchievedExerciseLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CoreTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CoreTemperature ())
            {
              const EnergySystemData::CoreTemperature_type& x (*i.CoreTemperature ());
              if (typeid (EnergySystemData::CoreTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CoreTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CoreTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CreatinineProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CreatinineProductionRate ())
            {
              const EnergySystemData::CreatinineProductionRate_type& x (*i.CreatinineProductionRate ());
              if (typeid (EnergySystemData::CreatinineProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CreatinineProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CreatinineProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExerciseMeanArterialPressureDelta
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExerciseMeanArterialPressureDelta ())
            {
              const EnergySystemData::ExerciseMeanArterialPressureDelta_type& x (*i.ExerciseMeanArterialPressureDelta ());
              if (typeid (EnergySystemData::ExerciseMeanArterialPressureDelta_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExerciseMeanArterialPressureDelta",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExerciseMeanArterialPressureDelta",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // FatigueLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FatigueLevel ())
            {
              const EnergySystemData::FatigueLevel_type& x (*i.FatigueLevel ());
              if (typeid (EnergySystemData::FatigueLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FatigueLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FatigueLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // LactateProductionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.LactateProductionRate ())
            {
              const EnergySystemData::LactateProductionRate_type& x (*i.LactateProductionRate ());
              if (typeid (EnergySystemData::LactateProductionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LactateProductionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "LactateProductionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SkinTemperature
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SkinTemperature ())
            {
              const EnergySystemData::SkinTemperature_type& x (*i.SkinTemperature ());
              if (typeid (EnergySystemData::SkinTemperature_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SkinTemperature",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SkinTemperature",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SweatRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SweatRate ())
            {
              const EnergySystemData::SweatRate_type& x (*i.SweatRate ());
              if (typeid (EnergySystemData::SweatRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SweatRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SweatRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalMetabolicRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalMetabolicRate ())
            {
              const EnergySystemData::TotalMetabolicRate_type& x (*i.TotalMetabolicRate ());
              if (typeid (EnergySystemData::TotalMetabolicRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalMetabolicRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalMetabolicRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TotalWorkRateLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TotalWorkRateLevel ())
            {
              const EnergySystemData::TotalWorkRateLevel_type& x (*i.TotalWorkRateLevel ());
              if (typeid (EnergySystemData::TotalWorkRateLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TotalWorkRateLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TotalWorkRateLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SodiumLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SodiumLostToSweat ())
            {
              const EnergySystemData::SodiumLostToSweat_type& x (*i.SodiumLostToSweat ());
              if (typeid (EnergySystemData::SodiumLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SodiumLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SodiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PotassiumLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PotassiumLostToSweat ())
            {
              const EnergySystemData::PotassiumLostToSweat_type& x (*i.PotassiumLostToSweat ());
              if (typeid (EnergySystemData::PotassiumLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PotassiumLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PotassiumLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ChlorideLostToSweat
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ChlorideLostToSweat ())
            {
              const EnergySystemData::ChlorideLostToSweat_type& x (*i.ChlorideLostToSweat ());
              if (typeid (EnergySystemData::ChlorideLostToSweat_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ChlorideLostToSweat",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ChlorideLostToSweat",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EnergySystemData >
        _xsd_EnergySystemData_type_serializer_init (
          "EnergySystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "DrugSystemData.hxx"

#include "ScalarFractionData.hxx"

#include "ScalarFrequencyData.hxx"

#include "ScalarPressureData.hxx"

#include "PupillaryResponseData.hxx"

#include "ScalarVolumeData.hxx"

#include "ScalarMassData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // DrugSystemData
        // 

        const DrugSystemData::BronchodilationLevel_optional& DrugSystemData::
        BronchodilationLevel () const
        {
          return this->BronchodilationLevel_;
        }

        DrugSystemData::BronchodilationLevel_optional& DrugSystemData::
        BronchodilationLevel ()
        {
          return this->BronchodilationLevel_;
        }

        void DrugSystemData::
        BronchodilationLevel (const BronchodilationLevel_type& x)
        {
          this->BronchodilationLevel_.set (x);
        }

        void DrugSystemData::
        BronchodilationLevel (const BronchodilationLevel_optional& x)
        {
          this->BronchodilationLevel_ = x;
        }

        void DrugSystemData::
        BronchodilationLevel (::std::unique_ptr< BronchodilationLevel_type > x)
        {
          this->BronchodilationLevel_.set (std::move (x));
        }

        const DrugSystemData::HeartRateChange_optional& DrugSystemData::
        HeartRateChange () const
        {
          return this->HeartRateChange_;
        }

        DrugSystemData::HeartRateChange_optional& DrugSystemData::
        HeartRateChange ()
        {
          return this->HeartRateChange_;
        }

        void DrugSystemData::
        HeartRateChange (const HeartRateChange_type& x)
        {
          this->HeartRateChange_.set (x);
        }

        void DrugSystemData::
        HeartRateChange (const HeartRateChange_optional& x)
        {
          this->HeartRateChange_ = x;
        }

        void DrugSystemData::
        HeartRateChange (::std::unique_ptr< HeartRateChange_type > x)
        {
          this->HeartRateChange_.set (std::move (x));
        }

        const DrugSystemData::MeanBloodPressureChange_optional& DrugSystemData::
        MeanBloodPressureChange () const
        {
          return this->MeanBloodPressureChange_;
        }

        DrugSystemData::MeanBloodPressureChange_optional& DrugSystemData::
        MeanBloodPressureChange ()
        {
          return this->MeanBloodPressureChange_;
        }

        void DrugSystemData::
        MeanBloodPressureChange (const MeanBloodPressureChange_type& x)
        {
          this->MeanBloodPressureChange_.set (x);
        }

        void DrugSystemData::
        MeanBloodPressureChange (const MeanBloodPressureChange_optional& x)
        {
          this->MeanBloodPressureChange_ = x;
        }

        void DrugSystemData::
        MeanBloodPressureChange (::std::unique_ptr< MeanBloodPressureChange_type > x)
        {
          this->MeanBloodPressureChange_.set (std::move (x));
        }

        const DrugSystemData::NeuromuscularBlockLevel_optional& DrugSystemData::
        NeuromuscularBlockLevel () const
        {
          return this->NeuromuscularBlockLevel_;
        }

        DrugSystemData::NeuromuscularBlockLevel_optional& DrugSystemData::
        NeuromuscularBlockLevel ()
        {
          return this->NeuromuscularBlockLevel_;
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (const NeuromuscularBlockLevel_type& x)
        {
          this->NeuromuscularBlockLevel_.set (x);
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (const NeuromuscularBlockLevel_optional& x)
        {
          this->NeuromuscularBlockLevel_ = x;
        }

        void DrugSystemData::
        NeuromuscularBlockLevel (::std::unique_ptr< NeuromuscularBlockLevel_type > x)
        {
          this->NeuromuscularBlockLevel_.set (std::move (x));
        }

        const DrugSystemData::PulsePressureChange_optional& DrugSystemData::
        PulsePressureChange () const
        {
          return this->PulsePressureChange_;
        }

        DrugSystemData::PulsePressureChange_optional& DrugSystemData::
        PulsePressureChange ()
        {
          return this->PulsePressureChange_;
        }

        void DrugSystemData::
        PulsePressureChange (const PulsePressureChange_type& x)
        {
          this->PulsePressureChange_.set (x);
        }

        void DrugSystemData::
        PulsePressureChange (const PulsePressureChange_optional& x)
        {
          this->PulsePressureChange_ = x;
        }

        void DrugSystemData::
        PulsePressureChange (::std::unique_ptr< PulsePressureChange_type > x)
        {
          this->PulsePressureChange_.set (std::move (x));
        }

        const DrugSystemData::PupillaryResponse_optional& DrugSystemData::
        PupillaryResponse () const
        {
          return this->PupillaryResponse_;
        }

        DrugSystemData::PupillaryResponse_optional& DrugSystemData::
        PupillaryResponse ()
        {
          return this->PupillaryResponse_;
        }

        void DrugSystemData::
        PupillaryResponse (const PupillaryResponse_type& x)
        {
          this->PupillaryResponse_.set (x);
        }

        void DrugSystemData::
        PupillaryResponse (const PupillaryResponse_optional& x)
        {
          this->PupillaryResponse_ = x;
        }

        void DrugSystemData::
        PupillaryResponse (::std::unique_ptr< PupillaryResponse_type > x)
        {
          this->PupillaryResponse_.set (std::move (x));
        }

        const DrugSystemData::RespirationRateChange_optional& DrugSystemData::
        RespirationRateChange () const
        {
          return this->RespirationRateChange_;
        }

        DrugSystemData::RespirationRateChange_optional& DrugSystemData::
        RespirationRateChange ()
        {
          return this->RespirationRateChange_;
        }

        void DrugSystemData::
        RespirationRateChange (const RespirationRateChange_type& x)
        {
          this->RespirationRateChange_.set (x);
        }

        void DrugSystemData::
        RespirationRateChange (const RespirationRateChange_optional& x)
        {
          this->RespirationRateChange_ = x;
        }

        void DrugSystemData::
        RespirationRateChange (::std::unique_ptr< RespirationRateChange_type > x)
        {
          this->RespirationRateChange_.set (std::move (x));
        }

        const DrugSystemData::SedationLevel_optional& DrugSystemData::
        SedationLevel () const
        {
          return this->SedationLevel_;
        }

        DrugSystemData::SedationLevel_optional& DrugSystemData::
        SedationLevel ()
        {
          return this->SedationLevel_;
        }

        void DrugSystemData::
        SedationLevel (const SedationLevel_type& x)
        {
          this->SedationLevel_.set (x);
        }

        void DrugSystemData::
        SedationLevel (const SedationLevel_optional& x)
        {
          this->SedationLevel_ = x;
        }

        void DrugSystemData::
        SedationLevel (::std::unique_ptr< SedationLevel_type > x)
        {
          this->SedationLevel_.set (std::move (x));
        }

        const DrugSystemData::TidalVolumeChange_optional& DrugSystemData::
        TidalVolumeChange () const
        {
          return this->TidalVolumeChange_;
        }

        DrugSystemData::TidalVolumeChange_optional& DrugSystemData::
        TidalVolumeChange ()
        {
          return this->TidalVolumeChange_;
        }

        void DrugSystemData::
        TidalVolumeChange (const TidalVolumeChange_type& x)
        {
          this->TidalVolumeChange_.set (x);
        }

        void DrugSystemData::
        TidalVolumeChange (const TidalVolumeChange_optional& x)
        {
          this->TidalVolumeChange_ = x;
        }

        void DrugSystemData::
        TidalVolumeChange (::std::unique_ptr< TidalVolumeChange_type > x)
        {
          this->TidalVolumeChange_.set (std::move (x));
        }

        const DrugSystemData::TubularPermeabilityChange_optional& DrugSystemData::
        TubularPermeabilityChange () const
        {
          return this->TubularPermeabilityChange_;
        }

        DrugSystemData::TubularPermeabilityChange_optional& DrugSystemData::
        TubularPermeabilityChange ()
        {
          return this->TubularPermeabilityChange_;
        }

        void DrugSystemData::
        TubularPermeabilityChange (const TubularPermeabilityChange_type& x)
        {
          this->TubularPermeabilityChange_.set (x);
        }

        void DrugSystemData::
        TubularPermeabilityChange (const TubularPermeabilityChange_optional& x)
        {
          this->TubularPermeabilityChange_ = x;
        }

        void DrugSystemData::
        TubularPermeabilityChange (::std::unique_ptr< TubularPermeabilityChange_type > x)
        {
          this->TubularPermeabilityChange_.set (std::move (x));
        }

        const DrugSystemData::CentralNervousResponse_optional& DrugSystemData::
        CentralNervousResponse () const
        {
          return this->CentralNervousResponse_;
        }

        DrugSystemData::CentralNervousResponse_optional& DrugSystemData::
        CentralNervousResponse ()
        {
          return this->CentralNervousResponse_;
        }

        void DrugSystemData::
        CentralNervousResponse (const CentralNervousResponse_type& x)
        {
          this->CentralNervousResponse_.set (x);
        }

        void DrugSystemData::
        CentralNervousResponse (const CentralNervousResponse_optional& x)
        {
          this->CentralNervousResponse_ = x;
        }

        void DrugSystemData::
        CentralNervousResponse (::std::unique_ptr< CentralNervousResponse_type > x)
        {
          this->CentralNervousResponse_.set (std::move (x));
        }

        const DrugSystemData::AntibioticMassInBody_optional& DrugSystemData::
        AntibioticMassInBody () const
        {
          return this->AntibioticMassInBody_;
        }

        DrugSystemData::AntibioticMassInBody_optional& DrugSystemData::
        AntibioticMassInBody ()
        {
          return this->AntibioticMassInBody_;
        }

        void DrugSystemData::
        AntibioticMassInBody (const AntibioticMassInBody_type& x)
        {
          this->AntibioticMassInBody_.set (x);
        }

        void DrugSystemData::
        AntibioticMassInBody (const AntibioticMassInBody_optional& x)
        {
          this->AntibioticMassInBody_ = x;
        }

        void DrugSystemData::
        AntibioticMassInBody (::std::unique_ptr< AntibioticMassInBody_type > x)
        {
          this->AntibioticMassInBody_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // DrugSystemData
        //

        DrugSystemData::
        DrugSystemData ()
        : ::mil::tatrc::physiology::datamodel::SystemData (),
          BronchodilationLevel_ (this),
          HeartRateChange_ (this),
          MeanBloodPressureChange_ (this),
          NeuromuscularBlockLevel_ (this),
          PulsePressureChange_ (this),
          PupillaryResponse_ (this),
          RespirationRateChange_ (this),
          SedationLevel_ (this),
          TidalVolumeChange_ (this),
          TubularPermeabilityChange_ (this),
          CentralNervousResponse_ (this),
          AntibioticMassInBody_ (this)
        {
        }

        DrugSystemData::
        DrugSystemData (const DrugSystemData& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (x, f, c),
          BronchodilationLevel_ (x.BronchodilationLevel_, f, this),
          HeartRateChange_ (x.HeartRateChange_, f, this),
          MeanBloodPressureChange_ (x.MeanBloodPressureChange_, f, this),
          NeuromuscularBlockLevel_ (x.NeuromuscularBlockLevel_, f, this),
          PulsePressureChange_ (x.PulsePressureChange_, f, this),
          PupillaryResponse_ (x.PupillaryResponse_, f, this),
          RespirationRateChange_ (x.RespirationRateChange_, f, this),
          SedationLevel_ (x.SedationLevel_, f, this),
          TidalVolumeChange_ (x.TidalVolumeChange_, f, this),
          TubularPermeabilityChange_ (x.TubularPermeabilityChange_, f, this),
          CentralNervousResponse_ (x.CentralNervousResponse_, f, this),
          AntibioticMassInBody_ (x.AntibioticMassInBody_, f, this)
        {
        }

        DrugSystemData::
        DrugSystemData (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::SystemData (e, f | ::xml_schema::flags::base, c),
          BronchodilationLevel_ (this),
          HeartRateChange_ (this),
          MeanBloodPressureChange_ (this),
          NeuromuscularBlockLevel_ (this),
          PulsePressureChange_ (this),
          PupillaryResponse_ (this),
          RespirationRateChange_ (this),
          SedationLevel_ (this),
          TidalVolumeChange_ (this),
          TubularPermeabilityChange_ (this),
          CentralNervousResponse_ (this),
          AntibioticMassInBody_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void DrugSystemData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::SystemData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // BronchodilationLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "BronchodilationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< BronchodilationLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->BronchodilationLevel_)
                {
                  ::std::unique_ptr< BronchodilationLevel_type > r (
                    dynamic_cast< BronchodilationLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->BronchodilationLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // HeartRateChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "HeartRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< HeartRateChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->HeartRateChange_)
                {
                  ::std::unique_ptr< HeartRateChange_type > r (
                    dynamic_cast< HeartRateChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->HeartRateChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // MeanBloodPressureChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "MeanBloodPressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< MeanBloodPressureChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->MeanBloodPressureChange_)
                {
                  ::std::unique_ptr< MeanBloodPressureChange_type > r (
                    dynamic_cast< MeanBloodPressureChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->MeanBloodPressureChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // NeuromuscularBlockLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "NeuromuscularBlockLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< NeuromuscularBlockLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->NeuromuscularBlockLevel_)
                {
                  ::std::unique_ptr< NeuromuscularBlockLevel_type > r (
                    dynamic_cast< NeuromuscularBlockLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->NeuromuscularBlockLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PulsePressureChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PulsePressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PulsePressureChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PulsePressureChange_)
                {
                  ::std::unique_ptr< PulsePressureChange_type > r (
                    dynamic_cast< PulsePressureChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PulsePressureChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // PupillaryResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "PupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< PupillaryResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->PupillaryResponse_)
                {
                  ::std::unique_ptr< PupillaryResponse_type > r (
                    dynamic_cast< PupillaryResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->PupillaryResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // RespirationRateChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "RespirationRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< RespirationRateChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->RespirationRateChange_)
                {
                  ::std::unique_ptr< RespirationRateChange_type > r (
                    dynamic_cast< RespirationRateChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->RespirationRateChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // SedationLevel
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "SedationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< SedationLevel_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->SedationLevel_)
                {
                  ::std::unique_ptr< SedationLevel_type > r (
                    dynamic_cast< SedationLevel_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->SedationLevel_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TidalVolumeChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TidalVolumeChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TidalVolumeChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TidalVolumeChange_)
                {
                  ::std::unique_ptr< TidalVolumeChange_type > r (
                    dynamic_cast< TidalVolumeChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TidalVolumeChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // TubularPermeabilityChange
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TubularPermeabilityChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TubularPermeabilityChange_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->TubularPermeabilityChange_)
                {
                  ::std::unique_ptr< TubularPermeabilityChange_type > r (
                    dynamic_cast< TubularPermeabilityChange_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->TubularPermeabilityChange_.set (::std::move (r));
                  continue;
                }
              }
            }

            // CentralNervousResponse
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "CentralNervousResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< CentralNervousResponse_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->CentralNervousResponse_)
                {
                  ::std::unique_ptr< CentralNervousResponse_type > r (
                    dynamic_cast< CentralNervousResponse_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->CentralNervousResponse_.set (::std::move (r));
                  continue;
                }
              }
            }

            // AntibioticMassInBody
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "AntibioticMassInBody",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< AntibioticMassInBody_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->AntibioticMassInBody_)
                {
                  ::std::unique_ptr< AntibioticMassInBody_type > r (
                    dynamic_cast< AntibioticMassInBody_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->AntibioticMassInBody_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        DrugSystemData* DrugSystemData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class DrugSystemData (*this, f, c);
        }

        DrugSystemData& DrugSystemData::
        operator= (const DrugSystemData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::SystemData& > (*this) = x;
            this->BronchodilationLevel_ = x.BronchodilationLevel_;
            this->HeartRateChange_ = x.HeartRateChange_;
            this->MeanBloodPressureChange_ = x.MeanBloodPressureChange_;
            this->NeuromuscularBlockLevel_ = x.NeuromuscularBlockLevel_;
            this->PulsePressureChange_ = x.PulsePressureChange_;
            this->PupillaryResponse_ = x.PupillaryResponse_;
            this->RespirationRateChange_ = x.RespirationRateChange_;
            this->SedationLevel_ = x.SedationLevel_;
            this->TidalVolumeChange_ = x.TidalVolumeChange_;
            this->TubularPermeabilityChange_ = x.TubularPermeabilityChange_;
            this->CentralNervousResponse_ = x.CentralNervousResponse_;
            this->AntibioticMassInBody_ = x.AntibioticMassInBody_;
          }

          return *this;
        }

        DrugSystemData::
        ~DrugSystemData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_type_factory_init (
          "DrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const DrugSystemData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.BronchodilationLevel ())
            {
              o << ::std::endl << "BronchodilationLevel: ";
              om.insert (o, *i.BronchodilationLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.HeartRateChange ())
            {
              o << ::std::endl << "HeartRateChange: ";
              om.insert (o, *i.HeartRateChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.MeanBloodPressureChange ())
            {
              o << ::std::endl << "MeanBloodPressureChange: ";
              om.insert (o, *i.MeanBloodPressureChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.NeuromuscularBlockLevel ())
            {
              o << ::std::endl << "NeuromuscularBlockLevel: ";
              om.insert (o, *i.NeuromuscularBlockLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PulsePressureChange ())
            {
              o << ::std::endl << "PulsePressureChange: ";
              om.insert (o, *i.PulsePressureChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.PupillaryResponse ())
            {
              o << ::std::endl << "PupillaryResponse: ";
              om.insert (o, *i.PupillaryResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.RespirationRateChange ())
            {
              o << ::std::endl << "RespirationRateChange: ";
              om.insert (o, *i.RespirationRateChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.SedationLevel ())
            {
              o << ::std::endl << "SedationLevel: ";
              om.insert (o, *i.SedationLevel ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TidalVolumeChange ())
            {
              o << ::std::endl << "TidalVolumeChange: ";
              om.insert (o, *i.TidalVolumeChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.TubularPermeabilityChange ())
            {
              o << ::std::endl << "TubularPermeabilityChange: ";
              om.insert (o, *i.TubularPermeabilityChange ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.CentralNervousResponse ())
            {
              o << ::std::endl << "CentralNervousResponse: ";
              om.insert (o, *i.CentralNervousResponse ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.AntibioticMassInBody ())
            {
              o << ::std::endl << "AntibioticMassInBody: ";
              om.insert (o, *i.AntibioticMassInBody ());
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const DrugSystemData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::SystemData& > (i);

          // BronchodilationLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.BronchodilationLevel ())
            {
              const DrugSystemData::BronchodilationLevel_type& x (*i.BronchodilationLevel ());
              if (typeid (DrugSystemData::BronchodilationLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "BronchodilationLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "BronchodilationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // HeartRateChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.HeartRateChange ())
            {
              const DrugSystemData::HeartRateChange_type& x (*i.HeartRateChange ());
              if (typeid (DrugSystemData::HeartRateChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "HeartRateChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "HeartRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // MeanBloodPressureChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.MeanBloodPressureChange ())
            {
              const DrugSystemData::MeanBloodPressureChange_type& x (*i.MeanBloodPressureChange ());
              if (typeid (DrugSystemData::MeanBloodPressureChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "MeanBloodPressureChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "MeanBloodPressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // NeuromuscularBlockLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.NeuromuscularBlockLevel ())
            {
              const DrugSystemData::NeuromuscularBlockLevel_type& x (*i.NeuromuscularBlockLevel ());
              if (typeid (DrugSystemData::NeuromuscularBlockLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "NeuromuscularBlockLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "NeuromuscularBlockLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PulsePressureChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PulsePressureChange ())
            {
              const DrugSystemData::PulsePressureChange_type& x (*i.PulsePressureChange ());
              if (typeid (DrugSystemData::PulsePressureChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PulsePressureChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PulsePressureChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // PupillaryResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.PupillaryResponse ())
            {
              const DrugSystemData::PupillaryResponse_type& x (*i.PupillaryResponse ());
              if (typeid (DrugSystemData::PupillaryResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "PupillaryResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "PupillaryResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // RespirationRateChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.RespirationRateChange ())
            {
              const DrugSystemData::RespirationRateChange_type& x (*i.RespirationRateChange ());
              if (typeid (DrugSystemData::RespirationRateChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "RespirationRateChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "RespirationRateChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // SedationLevel
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.SedationLevel ())
            {
              const DrugSystemData::SedationLevel_type& x (*i.SedationLevel ());
              if (typeid (DrugSystemData::SedationLevel_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "SedationLevel",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "SedationLevel",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TidalVolumeChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TidalVolumeChange ())
            {
              const DrugSystemData::TidalVolumeChange_type& x (*i.TidalVolumeChange ());
              if (typeid (DrugSystemData::TidalVolumeChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TidalVolumeChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TidalVolumeChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // TubularPermeabilityChange
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.TubularPermeabilityChange ())
            {
              const DrugSystemData::TubularPermeabilityChange_type& x (*i.TubularPermeabilityChange ());
              if (typeid (DrugSystemData::TubularPermeabilityChange_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TubularPermeabilityChange",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "TubularPermeabilityChange",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // CentralNervousResponse
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.CentralNervousResponse ())
            {
              const DrugSystemData::CentralNervousResponse_type& x (*i.CentralNervousResponse ());
              if (typeid (DrugSystemData::CentralNervousResponse_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "CentralNervousResponse",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "CentralNervousResponse",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // AntibioticMassInBody
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.AntibioticMassInBody ())
            {
              const DrugSystemData::AntibioticMassInBody_type& x (*i.AntibioticMassInBody ());
              if (typeid (DrugSystemData::AntibioticMassInBody_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "AntibioticMassInBody",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "AntibioticMassInBody",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DrugSystemData >
        _xsd_DrugSystemData_type_serializer_init (
          "DrugSystemData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


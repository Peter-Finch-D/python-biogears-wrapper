// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CompartmentManagerData.hxx"

#include "ElectricalCompartmentData.hxx"

#include "ElectricalCompartmentLinkData.hxx"

#include "LiquidCompartmentData.hxx"

#include "LiquidCompartmentLinkData.hxx"

#include "LiquidCompartmentGraphData.hxx"

#include "GasCompartmentData.hxx"

#include "GasCompartmentLinkData.hxx"

#include "GasCompartmentGraphData.hxx"

#include "ThermalCompartmentData.hxx"

#include "ThermalCompartmentLinkData.hxx"

#include "TissueCompartmentData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CompartmentManagerData
        // 

        const CompartmentManagerData::ElectricalCompartment_sequence& CompartmentManagerData::
        ElectricalCompartment () const
        {
          return this->ElectricalCompartment_;
        }

        CompartmentManagerData::ElectricalCompartment_sequence& CompartmentManagerData::
        ElectricalCompartment ()
        {
          return this->ElectricalCompartment_;
        }

        void CompartmentManagerData::
        ElectricalCompartment (const ElectricalCompartment_sequence& s)
        {
          this->ElectricalCompartment_ = s;
        }

        const CompartmentManagerData::ElectricalLink_sequence& CompartmentManagerData::
        ElectricalLink () const
        {
          return this->ElectricalLink_;
        }

        CompartmentManagerData::ElectricalLink_sequence& CompartmentManagerData::
        ElectricalLink ()
        {
          return this->ElectricalLink_;
        }

        void CompartmentManagerData::
        ElectricalLink (const ElectricalLink_sequence& s)
        {
          this->ElectricalLink_ = s;
        }

        const CompartmentManagerData::LiquidCompartment_sequence& CompartmentManagerData::
        LiquidCompartment () const
        {
          return this->LiquidCompartment_;
        }

        CompartmentManagerData::LiquidCompartment_sequence& CompartmentManagerData::
        LiquidCompartment ()
        {
          return this->LiquidCompartment_;
        }

        void CompartmentManagerData::
        LiquidCompartment (const LiquidCompartment_sequence& s)
        {
          this->LiquidCompartment_ = s;
        }

        const CompartmentManagerData::LiquidLink_sequence& CompartmentManagerData::
        LiquidLink () const
        {
          return this->LiquidLink_;
        }

        CompartmentManagerData::LiquidLink_sequence& CompartmentManagerData::
        LiquidLink ()
        {
          return this->LiquidLink_;
        }

        void CompartmentManagerData::
        LiquidLink (const LiquidLink_sequence& s)
        {
          this->LiquidLink_ = s;
        }

        const CompartmentManagerData::LiquidSubstance_sequence& CompartmentManagerData::
        LiquidSubstance () const
        {
          return this->LiquidSubstance_;
        }

        CompartmentManagerData::LiquidSubstance_sequence& CompartmentManagerData::
        LiquidSubstance ()
        {
          return this->LiquidSubstance_;
        }

        void CompartmentManagerData::
        LiquidSubstance (const LiquidSubstance_sequence& s)
        {
          this->LiquidSubstance_ = s;
        }

        const CompartmentManagerData::LiquidGraph_sequence& CompartmentManagerData::
        LiquidGraph () const
        {
          return this->LiquidGraph_;
        }

        CompartmentManagerData::LiquidGraph_sequence& CompartmentManagerData::
        LiquidGraph ()
        {
          return this->LiquidGraph_;
        }

        void CompartmentManagerData::
        LiquidGraph (const LiquidGraph_sequence& s)
        {
          this->LiquidGraph_ = s;
        }

        const CompartmentManagerData::GasCompartment_sequence& CompartmentManagerData::
        GasCompartment () const
        {
          return this->GasCompartment_;
        }

        CompartmentManagerData::GasCompartment_sequence& CompartmentManagerData::
        GasCompartment ()
        {
          return this->GasCompartment_;
        }

        void CompartmentManagerData::
        GasCompartment (const GasCompartment_sequence& s)
        {
          this->GasCompartment_ = s;
        }

        const CompartmentManagerData::GasLink_sequence& CompartmentManagerData::
        GasLink () const
        {
          return this->GasLink_;
        }

        CompartmentManagerData::GasLink_sequence& CompartmentManagerData::
        GasLink ()
        {
          return this->GasLink_;
        }

        void CompartmentManagerData::
        GasLink (const GasLink_sequence& s)
        {
          this->GasLink_ = s;
        }

        const CompartmentManagerData::GasSubstance_sequence& CompartmentManagerData::
        GasSubstance () const
        {
          return this->GasSubstance_;
        }

        CompartmentManagerData::GasSubstance_sequence& CompartmentManagerData::
        GasSubstance ()
        {
          return this->GasSubstance_;
        }

        void CompartmentManagerData::
        GasSubstance (const GasSubstance_sequence& s)
        {
          this->GasSubstance_ = s;
        }

        const CompartmentManagerData::GasGraph_sequence& CompartmentManagerData::
        GasGraph () const
        {
          return this->GasGraph_;
        }

        CompartmentManagerData::GasGraph_sequence& CompartmentManagerData::
        GasGraph ()
        {
          return this->GasGraph_;
        }

        void CompartmentManagerData::
        GasGraph (const GasGraph_sequence& s)
        {
          this->GasGraph_ = s;
        }

        const CompartmentManagerData::ThermalCompartment_sequence& CompartmentManagerData::
        ThermalCompartment () const
        {
          return this->ThermalCompartment_;
        }

        CompartmentManagerData::ThermalCompartment_sequence& CompartmentManagerData::
        ThermalCompartment ()
        {
          return this->ThermalCompartment_;
        }

        void CompartmentManagerData::
        ThermalCompartment (const ThermalCompartment_sequence& s)
        {
          this->ThermalCompartment_ = s;
        }

        const CompartmentManagerData::ThermalLink_sequence& CompartmentManagerData::
        ThermalLink () const
        {
          return this->ThermalLink_;
        }

        CompartmentManagerData::ThermalLink_sequence& CompartmentManagerData::
        ThermalLink ()
        {
          return this->ThermalLink_;
        }

        void CompartmentManagerData::
        ThermalLink (const ThermalLink_sequence& s)
        {
          this->ThermalLink_ = s;
        }

        const CompartmentManagerData::TissueCompartment_sequence& CompartmentManagerData::
        TissueCompartment () const
        {
          return this->TissueCompartment_;
        }

        CompartmentManagerData::TissueCompartment_sequence& CompartmentManagerData::
        TissueCompartment ()
        {
          return this->TissueCompartment_;
        }

        void CompartmentManagerData::
        TissueCompartment (const TissueCompartment_sequence& s)
        {
          this->TissueCompartment_ = s;
        }

        const CompartmentManagerData::TissueSubstance_sequence& CompartmentManagerData::
        TissueSubstance () const
        {
          return this->TissueSubstance_;
        }

        CompartmentManagerData::TissueSubstance_sequence& CompartmentManagerData::
        TissueSubstance ()
        {
          return this->TissueSubstance_;
        }

        void CompartmentManagerData::
        TissueSubstance (const TissueSubstance_sequence& s)
        {
          this->TissueSubstance_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // CompartmentManagerData
        //

        CompartmentManagerData::
        CompartmentManagerData ()
        : ::mil::tatrc::physiology::datamodel::ObjectData (),
          ElectricalCompartment_ (this),
          ElectricalLink_ (this),
          LiquidCompartment_ (this),
          LiquidLink_ (this),
          LiquidSubstance_ (this),
          LiquidGraph_ (this),
          GasCompartment_ (this),
          GasLink_ (this),
          GasSubstance_ (this),
          GasGraph_ (this),
          ThermalCompartment_ (this),
          ThermalLink_ (this),
          TissueCompartment_ (this),
          TissueSubstance_ (this)
        {
        }

        CompartmentManagerData::
        CompartmentManagerData (const CompartmentManagerData& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (x, f, c),
          ElectricalCompartment_ (x.ElectricalCompartment_, f, this),
          ElectricalLink_ (x.ElectricalLink_, f, this),
          LiquidCompartment_ (x.LiquidCompartment_, f, this),
          LiquidLink_ (x.LiquidLink_, f, this),
          LiquidSubstance_ (x.LiquidSubstance_, f, this),
          LiquidGraph_ (x.LiquidGraph_, f, this),
          GasCompartment_ (x.GasCompartment_, f, this),
          GasLink_ (x.GasLink_, f, this),
          GasSubstance_ (x.GasSubstance_, f, this),
          GasGraph_ (x.GasGraph_, f, this),
          ThermalCompartment_ (x.ThermalCompartment_, f, this),
          ThermalLink_ (x.ThermalLink_, f, this),
          TissueCompartment_ (x.TissueCompartment_, f, this),
          TissueSubstance_ (x.TissueSubstance_, f, this)
        {
        }

        CompartmentManagerData::
        CompartmentManagerData (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
        : ::mil::tatrc::physiology::datamodel::ObjectData (e, f | ::xml_schema::flags::base, c),
          ElectricalCompartment_ (this),
          ElectricalLink_ (this),
          LiquidCompartment_ (this),
          LiquidLink_ (this),
          LiquidSubstance_ (this),
          LiquidGraph_ (this),
          GasCompartment_ (this),
          GasLink_ (this),
          GasSubstance_ (this),
          GasGraph_ (this),
          ThermalCompartment_ (this),
          ThermalLink_ (this),
          TissueCompartment_ (this),
          TissueSubstance_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
            this->parse (p, f);
          }
        }

        void CompartmentManagerData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::mil::tatrc::physiology::datamodel::ObjectData::parse (p, f);

          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ElectricalCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalCompartment_type > r (
                  dynamic_cast< ElectricalCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // ElectricalLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ElectricalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ElectricalLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ElectricalLink_type > r (
                  dynamic_cast< ElectricalLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ElectricalLink_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidCompartment_type > r (
                  dynamic_cast< LiquidCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidLink_type > r (
                  dynamic_cast< LiquidLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidLink_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidSubstance_type > r (
                  dynamic_cast< LiquidSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            // LiquidGraph
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "LiquidGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< LiquidGraph_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< LiquidGraph_type > r (
                  dynamic_cast< LiquidGraph_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->LiquidGraph_.push_back (::std::move (r));
                continue;
              }
            }

            // GasCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasCompartment_type > r (
                  dynamic_cast< GasCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // GasLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasLink_type > r (
                  dynamic_cast< GasLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasLink_.push_back (::std::move (r));
                continue;
              }
            }

            // GasSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasSubstance_type > r (
                  dynamic_cast< GasSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            // GasGraph
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GasGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GasGraph_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< GasGraph_type > r (
                  dynamic_cast< GasGraph_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->GasGraph_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalCompartment_type > r (
                  dynamic_cast< ThermalCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // ThermalLink
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ThermalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ThermalLink_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< ThermalLink_type > r (
                  dynamic_cast< ThermalLink_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->ThermalLink_.push_back (::std::move (r));
                continue;
              }
            }

            // TissueCompartment
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueCompartment_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< TissueCompartment_type > r (
                  dynamic_cast< TissueCompartment_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->TissueCompartment_.push_back (::std::move (r));
                continue;
              }
            }

            // TissueSubstance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "TissueSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< TissueSubstance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                ::std::unique_ptr< TissueSubstance_type > r (
                  dynamic_cast< TissueSubstance_type* > (tmp.get ()));

                if (r.get ())
                  tmp.release ();
                else
                  throw ::xsd::cxx::tree::not_derived< char > ();

                this->TissueSubstance_.push_back (::std::move (r));
                continue;
              }
            }

            break;
          }
        }

        CompartmentManagerData* CompartmentManagerData::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class CompartmentManagerData (*this, f, c);
        }

        CompartmentManagerData& CompartmentManagerData::
        operator= (const CompartmentManagerData& x)
        {
          if (this != &x)
          {
            static_cast< ::mil::tatrc::physiology::datamodel::ObjectData& > (*this) = x;
            this->ElectricalCompartment_ = x.ElectricalCompartment_;
            this->ElectricalLink_ = x.ElectricalLink_;
            this->LiquidCompartment_ = x.LiquidCompartment_;
            this->LiquidLink_ = x.LiquidLink_;
            this->LiquidSubstance_ = x.LiquidSubstance_;
            this->LiquidGraph_ = x.LiquidGraph_;
            this->GasCompartment_ = x.GasCompartment_;
            this->GasLink_ = x.GasLink_;
            this->GasSubstance_ = x.GasSubstance_;
            this->GasGraph_ = x.GasGraph_;
            this->ThermalCompartment_ = x.ThermalCompartment_;
            this->ThermalLink_ = x.ThermalLink_;
            this->TissueCompartment_ = x.TissueCompartment_;
            this->TissueSubstance_ = x.TissueSubstance_;
          }

          return *this;
        }

        CompartmentManagerData::
        ~CompartmentManagerData ()
        {
        }

        static
        const ::xsd::cxx::tree::type_factory_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_type_factory_init (
          "CompartmentManagerData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const CompartmentManagerData& i)
        {
          o << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalCompartment_const_iterator
                 b (i.ElectricalCompartment ().begin ()), e (i.ElectricalCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalLink_const_iterator
                 b (i.ElectricalLink ().begin ()), e (i.ElectricalLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ElectricalLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidCompartment_const_iterator
                 b (i.LiquidCompartment ().begin ()), e (i.LiquidCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidLink_const_iterator
                 b (i.LiquidLink ().begin ()), e (i.LiquidLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidSubstance_const_iterator
                 b (i.LiquidSubstance ().begin ()), e (i.LiquidSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidSubstance: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidGraph_const_iterator
                 b (i.LiquidGraph ().begin ()), e (i.LiquidGraph ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "LiquidGraph: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasCompartment_const_iterator
                 b (i.GasCompartment ().begin ()), e (i.GasCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasLink_const_iterator
                 b (i.GasLink ().begin ()), e (i.GasLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasSubstance_const_iterator
                 b (i.GasSubstance ().begin ()), e (i.GasSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasSubstance: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::GasGraph_const_iterator
                 b (i.GasGraph ().begin ()), e (i.GasGraph ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "GasGraph: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalCompartment_const_iterator
                 b (i.ThermalCompartment ().begin ()), e (i.ThermalCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalLink_const_iterator
                 b (i.ThermalLink ().begin ()), e (i.ThermalLink ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "ThermalLink: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueCompartment_const_iterator
                 b (i.TissueCompartment ().begin ()), e (i.TissueCompartment ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "TissueCompartment: ";
              om.insert (o, *b);
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueSubstance_const_iterator
                 b (i.TissueSubstance ().begin ()), e (i.TissueSubstance ().end ());
                 b != e; ++b)
            {
              o << ::std::endl << "TissueSubstance: ";
              om.insert (o, *b);
            }
          }

          return o;
        }

        static
        const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_std_ostream_init;
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const CompartmentManagerData& i)
        {
          e << static_cast< const ::mil::tatrc::physiology::datamodel::ObjectData& > (i);

          // ElectricalCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalCompartment_const_iterator
                 b (i.ElectricalCompartment ().begin ()), n (i.ElectricalCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ElectricalCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ElectricalLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ElectricalLink_const_iterator
                 b (i.ElectricalLink ().begin ()), n (i.ElectricalLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ElectricalLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ElectricalLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ElectricalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidCompartment_const_iterator
                 b (i.LiquidCompartment ().begin ()), n (i.LiquidCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidLink_const_iterator
                 b (i.LiquidLink ().begin ()), n (i.LiquidLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidSubstance_const_iterator
                 b (i.LiquidSubstance ().begin ()), n (i.LiquidSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // LiquidGraph
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::LiquidGraph_const_iterator
                 b (i.LiquidGraph ().begin ()), n (i.LiquidGraph ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::LiquidGraph_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "LiquidGraph",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "LiquidGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasCompartment_const_iterator
                 b (i.GasCompartment ().begin ()), n (i.GasCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasLink_const_iterator
                 b (i.GasLink ().begin ()), n (i.GasLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasSubstance_const_iterator
                 b (i.GasSubstance ().begin ()), n (i.GasSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // GasGraph
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::GasGraph_const_iterator
                 b (i.GasGraph ().begin ()), n (i.GasGraph ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::GasGraph_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GasGraph",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "GasGraph",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalCompartment_const_iterator
                 b (i.ThermalCompartment ().begin ()), n (i.ThermalCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ThermalCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // ThermalLink
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::ThermalLink_const_iterator
                 b (i.ThermalLink ().begin ()), n (i.ThermalLink ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::ThermalLink_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ThermalLink",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "ThermalLink",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // TissueCompartment
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueCompartment_const_iterator
                 b (i.TissueCompartment ().begin ()), n (i.TissueCompartment ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::TissueCompartment_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueCompartment",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "TissueCompartment",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }

          // TissueSubstance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            for (CompartmentManagerData::TissueSubstance_const_iterator
                 b (i.TissueSubstance ().begin ()), n (i.TissueSubstance ().end ());
                 b != n; ++b)
            {
              if (typeid (CompartmentManagerData::TissueSubstance_type) == typeid (*b))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "TissueSubstance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << *b;
              }
              else
                tsm.serialize (
                  "TissueSubstance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, *b);
            }
          }
        }

        static
        const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CompartmentManagerData >
        _xsd_CompartmentManagerData_type_serializer_init (
          "CompartmentManagerData",
          "uri:/mil/tatrc/physiology/datamodel");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


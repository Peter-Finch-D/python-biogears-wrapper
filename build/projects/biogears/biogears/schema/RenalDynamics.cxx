// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "Properties.hxx"

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RenalDynamics.hxx"

#include "ScalarVolumePerTimeMassData.hxx"

#include "Regulation.hxx"

#include "ScalarMassPerTimeData.hxx"

#include "ScalarData.hxx"

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RenalDynamics
        // 

        const RenalDynamics::Clearance_optional& RenalDynamics::
        Clearance () const
        {
          return this->Clearance_;
        }

        RenalDynamics::Clearance_optional& RenalDynamics::
        Clearance ()
        {
          return this->Clearance_;
        }

        void RenalDynamics::
        Clearance (const Clearance_type& x)
        {
          this->Clearance_.set (x);
        }

        void RenalDynamics::
        Clearance (const Clearance_optional& x)
        {
          this->Clearance_ = x;
        }

        void RenalDynamics::
        Clearance (::std::unique_ptr< Clearance_type > x)
        {
          this->Clearance_.set (std::move (x));
        }

        const RenalDynamics::Regulation_optional& RenalDynamics::
        Regulation () const
        {
          return this->Regulation_;
        }

        RenalDynamics::Regulation_optional& RenalDynamics::
        Regulation ()
        {
          return this->Regulation_;
        }

        void RenalDynamics::
        Regulation (const Regulation_type& x)
        {
          this->Regulation_.set (x);
        }

        void RenalDynamics::
        Regulation (const Regulation_optional& x)
        {
          this->Regulation_ = x;
        }

        void RenalDynamics::
        Regulation (::std::unique_ptr< Regulation_type > x)
        {
          this->Regulation_.set (std::move (x));
        }

        const RenalDynamics::FiltrationRate_optional& RenalDynamics::
        FiltrationRate () const
        {
          return this->FiltrationRate_;
        }

        RenalDynamics::FiltrationRate_optional& RenalDynamics::
        FiltrationRate ()
        {
          return this->FiltrationRate_;
        }

        void RenalDynamics::
        FiltrationRate (const FiltrationRate_type& x)
        {
          this->FiltrationRate_.set (x);
        }

        void RenalDynamics::
        FiltrationRate (const FiltrationRate_optional& x)
        {
          this->FiltrationRate_ = x;
        }

        void RenalDynamics::
        FiltrationRate (::std::unique_ptr< FiltrationRate_type > x)
        {
          this->FiltrationRate_.set (std::move (x));
        }

        const RenalDynamics::ReabsorptionRate_optional& RenalDynamics::
        ReabsorptionRate () const
        {
          return this->ReabsorptionRate_;
        }

        RenalDynamics::ReabsorptionRate_optional& RenalDynamics::
        ReabsorptionRate ()
        {
          return this->ReabsorptionRate_;
        }

        void RenalDynamics::
        ReabsorptionRate (const ReabsorptionRate_type& x)
        {
          this->ReabsorptionRate_.set (x);
        }

        void RenalDynamics::
        ReabsorptionRate (const ReabsorptionRate_optional& x)
        {
          this->ReabsorptionRate_ = x;
        }

        void RenalDynamics::
        ReabsorptionRate (::std::unique_ptr< ReabsorptionRate_type > x)
        {
          this->ReabsorptionRate_.set (std::move (x));
        }

        const RenalDynamics::ExcretionRate_optional& RenalDynamics::
        ExcretionRate () const
        {
          return this->ExcretionRate_;
        }

        RenalDynamics::ExcretionRate_optional& RenalDynamics::
        ExcretionRate ()
        {
          return this->ExcretionRate_;
        }

        void RenalDynamics::
        ExcretionRate (const ExcretionRate_type& x)
        {
          this->ExcretionRate_.set (x);
        }

        void RenalDynamics::
        ExcretionRate (const ExcretionRate_optional& x)
        {
          this->ExcretionRate_ = x;
        }

        void RenalDynamics::
        ExcretionRate (::std::unique_ptr< ExcretionRate_type > x)
        {
          this->ExcretionRate_.set (std::move (x));
        }

        const RenalDynamics::GlomerularFilterability_optional& RenalDynamics::
        GlomerularFilterability () const
        {
          return this->GlomerularFilterability_;
        }

        RenalDynamics::GlomerularFilterability_optional& RenalDynamics::
        GlomerularFilterability ()
        {
          return this->GlomerularFilterability_;
        }

        void RenalDynamics::
        GlomerularFilterability (const GlomerularFilterability_type& x)
        {
          this->GlomerularFilterability_.set (x);
        }

        void RenalDynamics::
        GlomerularFilterability (const GlomerularFilterability_optional& x)
        {
          this->GlomerularFilterability_ = x;
        }

        void RenalDynamics::
        GlomerularFilterability (::std::unique_ptr< GlomerularFilterability_type > x)
        {
          this->GlomerularFilterability_.set (std::move (x));
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        // RenalDynamics
        //

        RenalDynamics::
        RenalDynamics ()
        : ::xml_schema::type (),
          Clearance_ (this),
          Regulation_ (this),
          FiltrationRate_ (this),
          ReabsorptionRate_ (this),
          ExcretionRate_ (this),
          GlomerularFilterability_ (this)
        {
        }

        RenalDynamics::
        RenalDynamics (const RenalDynamics& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::xml_schema::type (x, f, c),
          Clearance_ (x.Clearance_, f, this),
          Regulation_ (x.Regulation_, f, this),
          FiltrationRate_ (x.FiltrationRate_, f, this),
          ReabsorptionRate_ (x.ReabsorptionRate_, f, this),
          ExcretionRate_ (x.ExcretionRate_, f, this),
          GlomerularFilterability_ (x.GlomerularFilterability_, f, this)
        {
        }

        RenalDynamics::
        RenalDynamics (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
        : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
          Clearance_ (this),
          Regulation_ (this),
          FiltrationRate_ (this),
          ReabsorptionRate_ (this),
          ExcretionRate_ (this),
          GlomerularFilterability_ (this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
            this->parse (p, f);
          }
        }

        void RenalDynamics::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          for (; p.more_content (); p.next_content (false))
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Clearance
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "Clearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< Clearance_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->Clearance_)
                {
                  ::std::unique_ptr< Clearance_type > r (
                    dynamic_cast< Clearance_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->Clearance_.set (::std::move (r));
                  continue;
                }
              }
            }

            // Regulation
            //
            if (n.name () == "Regulation" && n.namespace_ () == "uri:/mil/tatrc/physiology/datamodel")
            {
              ::std::unique_ptr< Regulation_type > r (
                Regulation_traits::create (i, f, this));

              if (!this->Regulation_)
              {
                this->Regulation_.set (::std::move (r));
                continue;
              }
            }

            // FiltrationRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "FiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< FiltrationRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->FiltrationRate_)
                {
                  ::std::unique_ptr< FiltrationRate_type > r (
                    dynamic_cast< FiltrationRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->FiltrationRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ReabsorptionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ReabsorptionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ReabsorptionRate_)
                {
                  ::std::unique_ptr< ReabsorptionRate_type > r (
                    dynamic_cast< ReabsorptionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ReabsorptionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // ExcretionRate
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "ExcretionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< ExcretionRate_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->ExcretionRate_)
                {
                  ::std::unique_ptr< ExcretionRate_type > r (
                    dynamic_cast< ExcretionRate_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->ExcretionRate_.set (::std::move (r));
                  continue;
                }
              }
            }

            // GlomerularFilterability
            //
            {
              ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
                ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
                  "GlomerularFilterability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  &::xsd::cxx::tree::factory_impl< GlomerularFilterability_type >,
                  false, true, i, n, f, this));

              if (tmp.get () != 0)
              {
                if (!this->GlomerularFilterability_)
                {
                  ::std::unique_ptr< GlomerularFilterability_type > r (
                    dynamic_cast< GlomerularFilterability_type* > (tmp.get ()));

                  if (r.get ())
                    tmp.release ();
                  else
                    throw ::xsd::cxx::tree::not_derived< char > ();

                  this->GlomerularFilterability_.set (::std::move (r));
                  continue;
                }
              }
            }

            break;
          }
        }

        RenalDynamics* RenalDynamics::
        _clone (::xml_schema::flags f,
                ::xml_schema::container* c) const
        {
          return new class RenalDynamics (*this, f, c);
        }

        RenalDynamics& RenalDynamics::
        operator= (const RenalDynamics& x)
        {
          if (this != &x)
          {
            static_cast< ::xml_schema::type& > (*this) = x;
            this->Clearance_ = x.Clearance_;
            this->Regulation_ = x.Regulation_;
            this->FiltrationRate_ = x.FiltrationRate_;
            this->ReabsorptionRate_ = x.ReabsorptionRate_;
            this->ExcretionRate_ = x.ExcretionRate_;
            this->GlomerularFilterability_ = x.GlomerularFilterability_;
          }

          return *this;
        }

        RenalDynamics::
        ~RenalDynamics ()
        {
        }
      }
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        ::std::ostream&
        operator<< (::std::ostream& o, const RenalDynamics& i)
        {
          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.Clearance ())
            {
              o << ::std::endl << "Clearance: ";
              om.insert (o, *i.Clearance ());
            }
          }

          if (i.Regulation ())
          {
            o << ::std::endl << "Regulation: " << *i.Regulation ();
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.FiltrationRate ())
            {
              o << ::std::endl << "FiltrationRate: ";
              om.insert (o, *i.FiltrationRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ReabsorptionRate ())
            {
              o << ::std::endl << "ReabsorptionRate: ";
              om.insert (o, *i.ReabsorptionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.ExcretionRate ())
            {
              o << ::std::endl << "ExcretionRate: ";
              om.insert (o, *i.ExcretionRate ());
            }
          }

          {
            ::xsd::cxx::tree::std_ostream_map< char >& om (
              ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

            if (i.GlomerularFilterability ())
            {
              o << ::std::endl << "GlomerularFilterability: ";
              om.insert (o, *i.GlomerularFilterability ());
            }
          }

          return o;
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace mil
{
  namespace tatrc
  {
    namespace physiology
    {
      namespace datamodel
      {
        void
        operator<< (::xercesc::DOMElement& e, const RenalDynamics& i)
        {
          e << static_cast< const ::xml_schema::type& > (i);

          // Clearance
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.Clearance ())
            {
              const RenalDynamics::Clearance_type& x (*i.Clearance ());
              if (typeid (RenalDynamics::Clearance_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "Clearance",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "Clearance",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // Regulation
          //
          if (i.Regulation ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Regulation",
                "uri:/mil/tatrc/physiology/datamodel",
                e));

            s << *i.Regulation ();
          }

          // FiltrationRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.FiltrationRate ())
            {
              const RenalDynamics::FiltrationRate_type& x (*i.FiltrationRate ());
              if (typeid (RenalDynamics::FiltrationRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "FiltrationRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "FiltrationRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ReabsorptionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ReabsorptionRate ())
            {
              const RenalDynamics::ReabsorptionRate_type& x (*i.ReabsorptionRate ());
              if (typeid (RenalDynamics::ReabsorptionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ReabsorptionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ReabsorptionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // ExcretionRate
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.ExcretionRate ())
            {
              const RenalDynamics::ExcretionRate_type& x (*i.ExcretionRate ());
              if (typeid (RenalDynamics::ExcretionRate_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "ExcretionRate",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "ExcretionRate",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }

          // GlomerularFilterability
          //
          {
            ::xsd::cxx::tree::type_serializer_map< char >& tsm (
              ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

            if (i.GlomerularFilterability ())
            {
              const RenalDynamics::GlomerularFilterability_type& x (*i.GlomerularFilterability ());
              if (typeid (RenalDynamics::GlomerularFilterability_type) == typeid (x))
              {
                ::xercesc::DOMElement& s (
                  ::xsd::cxx::xml::dom::create_element (
                    "GlomerularFilterability",
                    "uri:/mil/tatrc/physiology/datamodel",
                    e));

                s << x;
              }
              else
                tsm.serialize (
                  "GlomerularFilterability",
                  "uri:/mil/tatrc/physiology/datamodel",
                  false, true, e, x);
            }
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

